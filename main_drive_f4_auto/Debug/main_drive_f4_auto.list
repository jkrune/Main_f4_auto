
main_drive_f4_auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008134  08008134  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800813c  0800813c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000648  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006b0  200006b0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b21a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000320f  00000000  00000000  0003b2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001030  00000000  00000000  0003e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c87  00000000  00000000  0003f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000257a6  00000000  00000000  000401bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016150  00000000  00000000  00065965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dde0d  00000000  00000000  0007bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ec0  00000000  00000000  001598c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0015e784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ef8 	.word	0x08007ef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007ef8 	.word	0x08007ef8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <TIM3_Init>:

int temp_x,temp_y;
uint8_t temp1 = 100,temp2 = 100;

void TIM3_Init(void)	///50Hz PWM (4 pin: 2 BLDC, !
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <TIM3_Init+0x148>)
 80005ae:	4a46      	ldr	r2, [pc, #280]	; (80006c8 <TIM3_Init+0x14c>)
 80005b0:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 719;
 80005b2:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <TIM3_Init+0x148>)
 80005b4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80005b8:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <TIM3_Init+0x148>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 2000;
 80005c0:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <TIM3_Init+0x148>)
 80005c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005c6:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <TIM3_Init+0x148>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <TIM3_Init+0x148>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d4:	483b      	ldr	r0, [pc, #236]	; (80006c4 <TIM3_Init+0x148>)
 80005d6:	f003 fd35 	bl	8004044 <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <TIM3_Init+0x68>
		  {
			Error_Handler();
 80005e0:	f001 fd72 	bl	80020c8 <Error_Handler>
		  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4834      	ldr	r0, [pc, #208]	; (80006c4 <TIM3_Init+0x148>)
 80005f2:	f004 fb23 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <TIM3_Init+0x84>
		  {
			Error_Handler();
 80005fc:	f001 fd64 	bl	80020c8 <Error_Handler>
		  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000600:	4830      	ldr	r0, [pc, #192]	; (80006c4 <TIM3_Init+0x148>)
 8000602:	f003 fea0 	bl	8004346 <HAL_TIM_PWM_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <TIM3_Init+0x94>
		  {
			Error_Handler();
 800060c:	f001 fd5c 	bl	80020c8 <Error_Handler>
		  }
	  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000610:	482c      	ldr	r0, [pc, #176]	; (80006c4 <TIM3_Init+0x148>)
 8000612:	f003 fe3f 	bl	8004294 <HAL_TIM_OC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <TIM3_Init+0xa4>
		  {
			Error_Handler();
 800061c:	f001 fd54 	bl	80020c8 <Error_Handler>
		  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4619      	mov	r1, r3
 800062e:	4825      	ldr	r0, [pc, #148]	; (80006c4 <TIM3_Init+0x148>)
 8000630:	f004 ff04 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <TIM3_Init+0xc2>
		  {
			Error_Handler();
 800063a:	f001 fd45 	bl	80020c8 <Error_Handler>
		  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063e:	2360      	movs	r3, #96	; 0x60
 8000640:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0; /// 100 200(min max)
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <TIM3_Init+0x148>)
 8000656:	f004 fa2f 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <TIM3_Init+0xe8>
		  {
			Error_Handler();
 8000660:	f001 fd32 	bl	80020c8 <Error_Handler>
		  }
	  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2204      	movs	r2, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4816      	ldr	r0, [pc, #88]	; (80006c4 <TIM3_Init+0x148>)
 800066c:	f004 f9c8 	bl	8004a00 <HAL_TIM_OC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <TIM3_Init+0xfe>
		  {
			Error_Handler();
 8000676:	f001 fd27 	bl	80020c8 <Error_Handler>
		  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2208      	movs	r2, #8
 800067e:	4619      	mov	r1, r3
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <TIM3_Init+0x148>)
 8000682:	f004 fa19 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <TIM3_Init+0x114>
		  {
			Error_Handler();
 800068c:	f001 fd1c 	bl	80020c8 <Error_Handler>
		  }
	  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	220c      	movs	r2, #12
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <TIM3_Init+0x148>)
 8000698:	f004 f9b2 	bl	8004a00 <HAL_TIM_OC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <TIM3_Init+0x12a>
		  {
			Error_Handler();
 80006a2:	f001 fd11 	bl	80020c8 <Error_Handler>
		  }

	  HAL_TIM_MspPostInit(&htim3);
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <TIM3_Init+0x148>)
 80006a8:	f002 f924 	bl	80028f4 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <TIM3_Init+0x148>)
 80006b0:	f003 fe98 	bl	80043e4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006b4:	2104      	movs	r1, #4
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <TIM3_Init+0x148>)
 80006b8:	f003 fe94 	bl	80043e4 <HAL_TIM_PWM_Start>
}
 80006bc:	bf00      	nop
 80006be:	3738      	adds	r7, #56	; 0x38
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200003a4 	.word	0x200003a4
 80006c8:	40000400 	.word	0x40000400

080006cc <MX_TIM4_Init>:
#include "delay.h"

extern TIM_HandleTypeDef htim4,htim14;
extern uint32_t time_run;
void MX_TIM4_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0


//50ms
  htim4.Instance = TIM4;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_TIM4_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006d8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80006dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006fa:	f003 fca3 	bl	8004044 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM4_Init+0x3c>
  {
    Error_Handler();
 8000704:	f001 fce0 	bl	80020c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <MX_TIM4_Init+0x4c>)
 800070a:	f002 f8f3 	bl	80028f4 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start_IT(&htim4);
 800070e:	4802      	ldr	r0, [pc, #8]	; (8000718 <MX_TIM4_Init+0x4c>)
 8000710:	f003 fd50 	bl	80041b4 <HAL_TIM_Base_Start_IT>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200001dc 	.word	0x200001dc
 800071c:	40000800 	.word	0x40000800

08000720 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d10c      	bne.n	800074c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		time_run++;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3301      	adds	r3, #1
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800073a:	6013      	str	r3, [r2, #0]
		RUN_ABLE = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 800073c:	2120      	movs	r1, #32
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000740:	f002 fff6 	bl	8003730 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800074a:	701a      	strb	r2, [r3, #0]
	}
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40000800 	.word	0x40000800
 8000758:	20000354 	.word	0x20000354
 800075c:	40020c00 	.word	0x40020c00
 8000760:	200004fc 	.word	0x200004fc

08000764 <millies>:

uint32_t millies(void)//0.05; 1s ung voi 20 lan dem; millies tra ve 400 ung voi 1s thoi gian thuc, va 1600 ung voi 4s
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
	return time_run*20;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <millies+0x1c>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000354 	.word	0x20000354

08000784 <delay_us>:

void delay_us(uint16_t us)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim14,0);
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <delay_us+0x30>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24

//	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim14);
	while(__HAL_TIM_GET_COUNTER(&htim14) < us);
 8000796:	bf00      	nop
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <delay_us+0x30>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d3f9      	bcc.n	8000798 <delay_us+0x14>

}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200005b8 	.word	0x200005b8

080007b8 <delay_ms>:
void delay_ms(uint16_t ms)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
    do {
        for (uint32_t i = 0; i < ms; i++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e006      	b.n	80007d6 <delay_ms+0x1e>
            delay_us(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f7ff ffda 	bl	8000784 <delay_us>
        for (uint32_t i = 0; i < ms; i++) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d3f4      	bcc.n	80007c8 <delay_ms+0x10>
        }
    } while (0);
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_TIM14_Init+0x44>)
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <MX_TIM14_Init+0x48>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 71;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_TIM14_Init+0x44>)
 80007f4:	2247      	movs	r2, #71	; 0x47
 80007f6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_TIM14_Init+0x44>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_TIM14_Init+0x44>)
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_TIM14_Init+0x44>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_TIM14_Init+0x44>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_TIM14_Init+0x44>)
 8000814:	f003 fc16 	bl	8004044 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800081e:	f001 fc53 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start(&htim14);
 8000822:	4802      	ldr	r0, [pc, #8]	; (800082c <MX_TIM14_Init+0x44>)
 8000824:	f003 fc5e 	bl	80040e4 <HAL_TIM_Base_Start>
  /* USER CODE END TIM14_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200005b8 	.word	0x200005b8
 8000830:	40002000 	.word	0x40002000

08000834 <key_pad_gpio>:
#include "keypad_lcd.h"


void key_pad_gpio(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef key_pad = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

	key_pad.Mode	=	GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
	key_pad.Speed	=	GPIO_SPEED_FAST;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
	key_pad.Pull	=	GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
	key_pad.Pin		=	GPIO_PIN_3 | GPIO_PIN_1 | GPIO_PIN_15 | GPIO_PIN_13;
 8000854:	f24a 030a 	movw	r3, #40970	; 0xa00a
 8000858:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOC, &key_pad);
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4809      	ldr	r0, [pc, #36]	; (8000884 <key_pad_gpio+0x50>)
 8000860:	f002 fdca 	bl	80033f8 <HAL_GPIO_Init>

	key_pad.Mode	=	GPIO_MODE_OUTPUT_OD;
 8000864:	2311      	movs	r3, #17
 8000866:	60bb      	str	r3, [r7, #8]
	key_pad.Speed	=	GPIO_SPEED_FAST;
 8000868:	2302      	movs	r3, #2
 800086a:	613b      	str	r3, [r7, #16]
	key_pad.Pin		=	GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_14 | GPIO_PIN_6;
 800086c:	f244 0345 	movw	r3, #16453	; 0x4045
 8000870:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOC, &key_pad);
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <key_pad_gpio+0x50>)
 8000878:	f002 fdbe 	bl	80033f8 <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020800 	.word	0x40020800

08000888 <MX_USART1_UART_Init>:
extern volatile int MotorSpeed[5];
extern volatile uint32_t countnn;


void MX_USART1_UART_Init(void)//lay gia tri goc tu esp
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_USART1_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 8000894:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008c0:	f004 fe9e 	bl	8005600 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f001 fbfd 	bl	80020c8 <Error_Handler>
  }

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000044c 	.word	0x2000044c
 80008d8:	40011000 	.word	0x40011000

080008dc <split_array>:

void split_array(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0



     // Mảng để lưu các giá trị
    char *token;
    char delim[] = ","; // Ký tự phân tách giữa các giá trị
 80008e2:	232c      	movs	r3, #44	; 0x2c
 80008e4:	80bb      	strh	r3, [r7, #4]
    int i = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]

    // Sử dụng strtok để tách chuỗi
    token = strtok(data, delim);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <split_array+0x50>)
 80008f0:	f005 ff3a 	bl	8006768 <strtok>
 80008f4:	60f8      	str	r0, [r7, #12]

    // Duyệt qua các phần tử đã được tách
    while (token != NULL) {
 80008f6:	e011      	b.n	800091c <split_array+0x40>
        sscanf(token, "%d", &values[i]); // Chuyển đổi chuỗi thành số nguyên và lưu vào mảng
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <split_array+0x54>)
 80008fe:	4413      	add	r3, r2
 8000900:	461a      	mov	r2, r3
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <split_array+0x58>)
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f005 feb5 	bl	8006674 <siscanf>
        i++;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	3301      	adds	r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
        token = strtok(NULL, delim); // Tiếp tục tách chuỗi
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	2000      	movs	r0, #0
 8000916:	f005 ff27 	bl	8006768 <strtok>
 800091a:	60f8      	str	r0, [r7, #12]
    while (token != NULL) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1ea      	bne.n	80008f8 <split_array+0x1c>
    }

}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200004a8 	.word	0x200004a8
 8000930:	20000268 	.word	0x20000268
 8000934:	08007f10 	.word	0x08007f10

08000938 <TIM5_Init>:
void TIM5_Init(void)//tim encoder
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0



  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
  TIM_Encoder_InitTypeDef encoder_init = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2224      	movs	r2, #36	; 0x24
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 ff01 	bl	8006756 <memset>

  htim5.Instance = TIM5;
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <TIM5_Init+0xc0>)
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <TIM5_Init+0xc4>)
 8000958:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <TIM5_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <TIM5_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <TIM5_Init+0xc0>)
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <TIM5_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <TIM5_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800097a:	481f      	ldr	r0, [pc, #124]	; (80009f8 <TIM5_Init+0xc0>)
 800097c:	f003 fce3 	bl	8004346 <HAL_TIM_PWM_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <TIM5_Init+0x52>
  {
    Error_Handler();
 8000986:	f001 fb9f 	bl	80020c8 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000996:	4619      	mov	r1, r3
 8000998:	4817      	ldr	r0, [pc, #92]	; (80009f8 <TIM5_Init+0xc0>)
 800099a:	f004 fd4f 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <TIM5_Init+0x70>
  {
    Error_Handler();
 80009a4:	f001 fb90 	bl	80020c8 <Error_Handler>
  }

  encoder_init.EncoderMode	=	TIM_ENCODERMODE_TI1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
  encoder_init.IC1Filter	=	5;
 80009ac:	2305      	movs	r3, #5
 80009ae:	617b      	str	r3, [r7, #20]
  encoder_init.IC1Polarity	=	TIM_ICPOLARITY_RISING;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  encoder_init.IC1Selection	=	TIM_ICSELECTION_DIRECTTI;
 80009b4:	2301      	movs	r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]

  encoder_init.IC2Filter	=	0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  encoder_init.IC2Polarity	=	TIM_ICPOLARITY_FALLING;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
  encoder_init.IC2Selection	=	TIM_ICSELECTION_INDIRECTTI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]

  if(HAL_TIM_Encoder_Init(&htim5, &encoder_init) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <TIM5_Init+0xc0>)
 80009ca:	f003 fdd3 	bl	8004574 <HAL_TIM_Encoder_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <TIM5_Init+0xa0>
  {
	  Error_Handler();
 80009d4:	f001 fb78 	bl	80020c8 <Error_Handler>
  }




  HAL_TIM_MspPostInit(&htim5);
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <TIM5_Init+0xc0>)
 80009da:	f001 ff8b 	bl	80028f4 <HAL_TIM_MspPostInit>

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 80009de:	2100      	movs	r1, #0
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <TIM5_Init+0xc0>)
 80009e2:	f003 fe77 	bl	80046d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 80009e6:	2104      	movs	r1, #4
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <TIM5_Init+0xc0>)
 80009ea:	f003 fe73 	bl	80046d4 <HAL_TIM_Encoder_Start>

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000358 	.word	0x20000358
 80009fc:	40000c00 	.word	0x40000c00

08000a00 <Line_PIN_Config>:

void Line_PIN_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
	/// led ngang
// E 7 8 9 10 11 12 13 ; B 2 ;
	GPIO_InitTypeDef pin_line_cf;

	pin_line_cf.Mode		=	GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
	pin_line_cf.Pin			=	GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10  | GPIO_PIN_11 |
 8000a0a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a0e:	607b      	str	r3, [r7, #4]
								GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	pin_line_cf.Pull		=	GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
	pin_line_cf.Speed		=	GPIO_SPEED_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &pin_line_cf);
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <Line_PIN_Config+0x4c>)
 8000a1e:	f002 fceb 	bl	80033f8 <HAL_GPIO_Init>

	pin_line_cf.Pin			=	GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_13;
 8000a22:	f24f 0304 	movw	r3, #61444	; 0xf004
 8000a26:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &pin_line_cf);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <Line_PIN_Config+0x50>)
 8000a2e:	f002 fce3 	bl	80033f8 <HAL_GPIO_Init>

	pin_line_cf.Pin			=	GPIO_PIN_8 | GPIO_PIN_9 ;
 8000a32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a36:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &pin_line_cf);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <Line_PIN_Config+0x50>)
 8000a3e:	f002 fcdb 	bl	80033f8 <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40020400 	.word	0x40020400

08000a54 <lech_value_1>:
//led[4]=	HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10);
//led[5]=	HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
//led[6]=	HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
//led[7]=	HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
void lech_value_1(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	led[0]=	!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8000a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5c:	488f      	ldr	r0, [pc, #572]	; (8000c9c <lech_value_1+0x248>)
 8000a5e:	f002 fe67 	bl	8003730 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b8b      	ldr	r3, [pc, #556]	; (8000ca0 <lech_value_1+0x24c>)
 8000a72:	701a      	strb	r2, [r3, #0]
	led[1]=	!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	4888      	ldr	r0, [pc, #544]	; (8000c9c <lech_value_1+0x248>)
 8000a7a:	f002 fe59 	bl	8003730 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf0c      	ite	eq
 8000a84:	2301      	moveq	r3, #1
 8000a86:	2300      	movne	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b84      	ldr	r3, [pc, #528]	; (8000ca0 <lech_value_1+0x24c>)
 8000a8e:	705a      	strb	r2, [r3, #1]
	led[2]=	!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	4881      	ldr	r0, [pc, #516]	; (8000c9c <lech_value_1+0x248>)
 8000a96:	f002 fe4b 	bl	8003730 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf0c      	ite	eq
 8000aa0:	2301      	moveq	r3, #1
 8000aa2:	2300      	movne	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b7d      	ldr	r3, [pc, #500]	; (8000ca0 <lech_value_1+0x24c>)
 8000aaa:	709a      	strb	r2, [r3, #2]
	led[3]=	!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10);
 8000aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab0:	487a      	ldr	r0, [pc, #488]	; (8000c9c <lech_value_1+0x248>)
 8000ab2:	f002 fe3d 	bl	8003730 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf0c      	ite	eq
 8000abc:	2301      	moveq	r3, #1
 8000abe:	2300      	movne	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b76      	ldr	r3, [pc, #472]	; (8000ca0 <lech_value_1+0x24c>)
 8000ac6:	70da      	strb	r2, [r3, #3]
	led[4]=	!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8000ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000acc:	4873      	ldr	r0, [pc, #460]	; (8000c9c <lech_value_1+0x248>)
 8000ace:	f002 fe2f 	bl	8003730 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b6f      	ldr	r3, [pc, #444]	; (8000ca0 <lech_value_1+0x24c>)
 8000ae2:	711a      	strb	r2, [r3, #4]
	led[5]=	!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 8000ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae8:	486c      	ldr	r0, [pc, #432]	; (8000c9c <lech_value_1+0x248>)
 8000aea:	f002 fe21 	bl	8003730 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf0c      	ite	eq
 8000af4:	2301      	moveq	r3, #1
 8000af6:	2300      	movne	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <lech_value_1+0x24c>)
 8000afe:	715a      	strb	r2, [r3, #5]
	led[6]=	!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	4866      	ldr	r0, [pc, #408]	; (8000c9c <lech_value_1+0x248>)
 8000b04:	f002 fe14 	bl	8003730 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b62      	ldr	r3, [pc, #392]	; (8000ca0 <lech_value_1+0x24c>)
 8000b18:	719a      	strb	r2, [r3, #6]
	led[7]=	!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4861      	ldr	r0, [pc, #388]	; (8000ca4 <lech_value_1+0x250>)
 8000b1e:	f002 fe07 	bl	8003730 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b5b      	ldr	r3, [pc, #364]	; (8000ca0 <lech_value_1+0x24c>)
 8000b32:	71da      	strb	r2, [r3, #7]

	   if (      (led[0] == 1) &&       (led[1] == 0) && (led[2] == 0)  && (led[3] == 0) && (led[2] == 0) && (led[5] == 0)    && (led[6] == 0)  && (led[7] == 0)    )
 8000b34:	4b5a      	ldr	r3, [pc, #360]	; (8000ca0 <lech_value_1+0x24c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d127      	bne.n	8000b8e <lech_value_1+0x13a>
 8000b3e:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <lech_value_1+0x24c>)
 8000b40:	785b      	ldrb	r3, [r3, #1]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d122      	bne.n	8000b8e <lech_value_1+0x13a>
 8000b48:	4b55      	ldr	r3, [pc, #340]	; (8000ca0 <lech_value_1+0x24c>)
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d11d      	bne.n	8000b8e <lech_value_1+0x13a>
 8000b52:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <lech_value_1+0x24c>)
 8000b54:	78db      	ldrb	r3, [r3, #3]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d118      	bne.n	8000b8e <lech_value_1+0x13a>
 8000b5c:	4b50      	ldr	r3, [pc, #320]	; (8000ca0 <lech_value_1+0x24c>)
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d113      	bne.n	8000b8e <lech_value_1+0x13a>
 8000b66:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <lech_value_1+0x24c>)
 8000b68:	795b      	ldrb	r3, [r3, #5]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10e      	bne.n	8000b8e <lech_value_1+0x13a>
 8000b70:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <lech_value_1+0x24c>)
 8000b72:	799b      	ldrb	r3, [r3, #6]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d109      	bne.n	8000b8e <lech_value_1+0x13a>
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <lech_value_1+0x24c>)
 8000b7c:	79db      	ldrb	r3, [r3, #7]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <lech_value_1+0x13a>
			lech_1 = -8;
 8000b84:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <lech_value_1+0x254>)
 8000b86:	f06f 0207 	mvn.w	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	e27a      	b.n	8001084 <lech_value_1+0x630>
	   else if(   (led[0] == 1)  && (led[1] == 1) && (led[2] == 0)  && (led[3] == 0) && (led[2] == 0) && (led[5] == 0)    && (led[6] == 0)  && (led[7] == 0)    )
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <lech_value_1+0x24c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d127      	bne.n	8000be8 <lech_value_1+0x194>
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <lech_value_1+0x24c>)
 8000b9a:	785b      	ldrb	r3, [r3, #1]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d122      	bne.n	8000be8 <lech_value_1+0x194>
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <lech_value_1+0x24c>)
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11d      	bne.n	8000be8 <lech_value_1+0x194>
 8000bac:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <lech_value_1+0x24c>)
 8000bae:	78db      	ldrb	r3, [r3, #3]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d118      	bne.n	8000be8 <lech_value_1+0x194>
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <lech_value_1+0x24c>)
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d113      	bne.n	8000be8 <lech_value_1+0x194>
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <lech_value_1+0x24c>)
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10e      	bne.n	8000be8 <lech_value_1+0x194>
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <lech_value_1+0x24c>)
 8000bcc:	799b      	ldrb	r3, [r3, #6]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <lech_value_1+0x194>
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <lech_value_1+0x24c>)
 8000bd6:	79db      	ldrb	r3, [r3, #7]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <lech_value_1+0x194>
			lech_1 = -7;
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <lech_value_1+0x254>)
 8000be0:	f06f 0206 	mvn.w	r2, #6
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e24d      	b.n	8001084 <lech_value_1+0x630>
	  else if (  (led[0] == 0) &&     (led[1] == 1) && (led[2] == 0)  && (led[3] == 0) && (led[2] == 0) && (led[5] == 0)    && (led[6] == 0)   && (led[7] == 0)   )
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <lech_value_1+0x24c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d127      	bne.n	8000c42 <lech_value_1+0x1ee>
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <lech_value_1+0x24c>)
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d122      	bne.n	8000c42 <lech_value_1+0x1ee>
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <lech_value_1+0x24c>)
 8000bfe:	789b      	ldrb	r3, [r3, #2]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d11d      	bne.n	8000c42 <lech_value_1+0x1ee>
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <lech_value_1+0x24c>)
 8000c08:	78db      	ldrb	r3, [r3, #3]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d118      	bne.n	8000c42 <lech_value_1+0x1ee>
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <lech_value_1+0x24c>)
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d113      	bne.n	8000c42 <lech_value_1+0x1ee>
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <lech_value_1+0x24c>)
 8000c1c:	795b      	ldrb	r3, [r3, #5]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10e      	bne.n	8000c42 <lech_value_1+0x1ee>
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <lech_value_1+0x24c>)
 8000c26:	799b      	ldrb	r3, [r3, #6]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d109      	bne.n	8000c42 <lech_value_1+0x1ee>
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <lech_value_1+0x24c>)
 8000c30:	79db      	ldrb	r3, [r3, #7]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d104      	bne.n	8000c42 <lech_value_1+0x1ee>
	    lech_1 = -6;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <lech_value_1+0x254>)
 8000c3a:	f06f 0205 	mvn.w	r2, #5
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e220      	b.n	8001084 <lech_value_1+0x630>
	  else if (  (led[0] == 0) &&   (led[1] == 1) &&  (led[2] == 1) && (led[3] == 0) && (led[2] == 0) && (led[5] == 0)    && (led[6] == 0)    && (led[7] == 0)  )
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <lech_value_1+0x24c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d12f      	bne.n	8000cac <lech_value_1+0x258>
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <lech_value_1+0x24c>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d12a      	bne.n	8000cac <lech_value_1+0x258>
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <lech_value_1+0x24c>)
 8000c58:	789b      	ldrb	r3, [r3, #2]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d125      	bne.n	8000cac <lech_value_1+0x258>
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <lech_value_1+0x24c>)
 8000c62:	78db      	ldrb	r3, [r3, #3]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d120      	bne.n	8000cac <lech_value_1+0x258>
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <lech_value_1+0x24c>)
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11b      	bne.n	8000cac <lech_value_1+0x258>
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <lech_value_1+0x24c>)
 8000c76:	795b      	ldrb	r3, [r3, #5]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d116      	bne.n	8000cac <lech_value_1+0x258>
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <lech_value_1+0x24c>)
 8000c80:	799b      	ldrb	r3, [r3, #6]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d111      	bne.n	8000cac <lech_value_1+0x258>
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <lech_value_1+0x24c>)
 8000c8a:	79db      	ldrb	r3, [r3, #7]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10c      	bne.n	8000cac <lech_value_1+0x258>
	    lech_1 = -5;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <lech_value_1+0x254>)
 8000c94:	f06f 0204 	mvn.w	r2, #4
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e1f3      	b.n	8001084 <lech_value_1+0x630>
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	20000444 	.word	0x20000444
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	200004a0 	.word	0x200004a0
	  else if (  (led[0] == 0) &&  (led[1] == 0) &&  (led[2] == 1) && (led[3] == 0) && (led[2] == 0) && (led[5] == 0)    && (led[6] == 0)   && (led[7] == 0)   )
 8000cac:	4b85      	ldr	r3, [pc, #532]	; (8000ec4 <lech_value_1+0x470>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d127      	bne.n	8000d06 <lech_value_1+0x2b2>
 8000cb6:	4b83      	ldr	r3, [pc, #524]	; (8000ec4 <lech_value_1+0x470>)
 8000cb8:	785b      	ldrb	r3, [r3, #1]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d122      	bne.n	8000d06 <lech_value_1+0x2b2>
 8000cc0:	4b80      	ldr	r3, [pc, #512]	; (8000ec4 <lech_value_1+0x470>)
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d11d      	bne.n	8000d06 <lech_value_1+0x2b2>
 8000cca:	4b7e      	ldr	r3, [pc, #504]	; (8000ec4 <lech_value_1+0x470>)
 8000ccc:	78db      	ldrb	r3, [r3, #3]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d118      	bne.n	8000d06 <lech_value_1+0x2b2>
 8000cd4:	4b7b      	ldr	r3, [pc, #492]	; (8000ec4 <lech_value_1+0x470>)
 8000cd6:	789b      	ldrb	r3, [r3, #2]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d113      	bne.n	8000d06 <lech_value_1+0x2b2>
 8000cde:	4b79      	ldr	r3, [pc, #484]	; (8000ec4 <lech_value_1+0x470>)
 8000ce0:	795b      	ldrb	r3, [r3, #5]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10e      	bne.n	8000d06 <lech_value_1+0x2b2>
 8000ce8:	4b76      	ldr	r3, [pc, #472]	; (8000ec4 <lech_value_1+0x470>)
 8000cea:	799b      	ldrb	r3, [r3, #6]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <lech_value_1+0x2b2>
 8000cf2:	4b74      	ldr	r3, [pc, #464]	; (8000ec4 <lech_value_1+0x470>)
 8000cf4:	79db      	ldrb	r3, [r3, #7]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d104      	bne.n	8000d06 <lech_value_1+0x2b2>
	    lech_1 = -3;
 8000cfc:	4b72      	ldr	r3, [pc, #456]	; (8000ec8 <lech_value_1+0x474>)
 8000cfe:	f06f 0202 	mvn.w	r2, #2
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e1be      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 1) && (led[3] == 1) && (led[4] == 0) && (led[5] == 0)     && (led[6] == 0)  && (led[7] == 0)   )
 8000d06:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <lech_value_1+0x470>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d127      	bne.n	8000d60 <lech_value_1+0x30c>
 8000d10:	4b6c      	ldr	r3, [pc, #432]	; (8000ec4 <lech_value_1+0x470>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d122      	bne.n	8000d60 <lech_value_1+0x30c>
 8000d1a:	4b6a      	ldr	r3, [pc, #424]	; (8000ec4 <lech_value_1+0x470>)
 8000d1c:	789b      	ldrb	r3, [r3, #2]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d11d      	bne.n	8000d60 <lech_value_1+0x30c>
 8000d24:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <lech_value_1+0x470>)
 8000d26:	78db      	ldrb	r3, [r3, #3]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d118      	bne.n	8000d60 <lech_value_1+0x30c>
 8000d2e:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <lech_value_1+0x470>)
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d113      	bne.n	8000d60 <lech_value_1+0x30c>
 8000d38:	4b62      	ldr	r3, [pc, #392]	; (8000ec4 <lech_value_1+0x470>)
 8000d3a:	795b      	ldrb	r3, [r3, #5]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10e      	bne.n	8000d60 <lech_value_1+0x30c>
 8000d42:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <lech_value_1+0x470>)
 8000d44:	799b      	ldrb	r3, [r3, #6]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d109      	bne.n	8000d60 <lech_value_1+0x30c>
 8000d4c:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <lech_value_1+0x470>)
 8000d4e:	79db      	ldrb	r3, [r3, #7]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d104      	bne.n	8000d60 <lech_value_1+0x30c>
	    lech_1 = -2;
 8000d56:	4b5c      	ldr	r3, [pc, #368]	; (8000ec8 <lech_value_1+0x474>)
 8000d58:	f06f 0201 	mvn.w	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e191      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 1) && (led[4] == 0) && (led[5] == 0)    && (led[6] == 0)   && (led[7] == 0)     )
 8000d60:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <lech_value_1+0x470>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d127      	bne.n	8000dba <lech_value_1+0x366>
 8000d6a:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <lech_value_1+0x470>)
 8000d6c:	785b      	ldrb	r3, [r3, #1]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d122      	bne.n	8000dba <lech_value_1+0x366>
 8000d74:	4b53      	ldr	r3, [pc, #332]	; (8000ec4 <lech_value_1+0x470>)
 8000d76:	789b      	ldrb	r3, [r3, #2]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d11d      	bne.n	8000dba <lech_value_1+0x366>
 8000d7e:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <lech_value_1+0x470>)
 8000d80:	78db      	ldrb	r3, [r3, #3]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d118      	bne.n	8000dba <lech_value_1+0x366>
 8000d88:	4b4e      	ldr	r3, [pc, #312]	; (8000ec4 <lech_value_1+0x470>)
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d113      	bne.n	8000dba <lech_value_1+0x366>
 8000d92:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <lech_value_1+0x470>)
 8000d94:	795b      	ldrb	r3, [r3, #5]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10e      	bne.n	8000dba <lech_value_1+0x366>
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <lech_value_1+0x470>)
 8000d9e:	799b      	ldrb	r3, [r3, #6]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d109      	bne.n	8000dba <lech_value_1+0x366>
 8000da6:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <lech_value_1+0x470>)
 8000da8:	79db      	ldrb	r3, [r3, #7]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d104      	bne.n	8000dba <lech_value_1+0x366>
	    lech_1 = -1;
 8000db0:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <lech_value_1+0x474>)
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e164      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 1) && (led[4] == 1) && (led[5] == 0)    && (led[6] == 0)   && (led[7] == 0)  )
 8000dba:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <lech_value_1+0x470>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d126      	bne.n	8000e12 <lech_value_1+0x3be>
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <lech_value_1+0x470>)
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d121      	bne.n	8000e12 <lech_value_1+0x3be>
 8000dce:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <lech_value_1+0x470>)
 8000dd0:	789b      	ldrb	r3, [r3, #2]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d11c      	bne.n	8000e12 <lech_value_1+0x3be>
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <lech_value_1+0x470>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d117      	bne.n	8000e12 <lech_value_1+0x3be>
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <lech_value_1+0x470>)
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d112      	bne.n	8000e12 <lech_value_1+0x3be>
 8000dec:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <lech_value_1+0x470>)
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10d      	bne.n	8000e12 <lech_value_1+0x3be>
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <lech_value_1+0x470>)
 8000df8:	799b      	ldrb	r3, [r3, #6]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d108      	bne.n	8000e12 <lech_value_1+0x3be>
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <lech_value_1+0x470>)
 8000e02:	79db      	ldrb	r3, [r3, #7]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <lech_value_1+0x3be>
	    lech_1 = 0;
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <lech_value_1+0x474>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e138      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 0) && (led[4] == 1) && (led[5] == 0)  && (led[6] == 0)   && (led[7] == 0)    )
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <lech_value_1+0x470>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d126      	bne.n	8000e6a <lech_value_1+0x416>
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <lech_value_1+0x470>)
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d121      	bne.n	8000e6a <lech_value_1+0x416>
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <lech_value_1+0x470>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d11c      	bne.n	8000e6a <lech_value_1+0x416>
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <lech_value_1+0x470>)
 8000e32:	78db      	ldrb	r3, [r3, #3]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d117      	bne.n	8000e6a <lech_value_1+0x416>
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <lech_value_1+0x470>)
 8000e3c:	791b      	ldrb	r3, [r3, #4]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d112      	bne.n	8000e6a <lech_value_1+0x416>
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <lech_value_1+0x470>)
 8000e46:	795b      	ldrb	r3, [r3, #5]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10d      	bne.n	8000e6a <lech_value_1+0x416>
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <lech_value_1+0x470>)
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d108      	bne.n	8000e6a <lech_value_1+0x416>
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <lech_value_1+0x470>)
 8000e5a:	79db      	ldrb	r3, [r3, #7]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <lech_value_1+0x416>
	    lech_1 = 1;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <lech_value_1+0x474>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e10c      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 0) && (led[4] == 1) && (led[5] == 1)  && (led[6] == 0)     && (led[7] == 0)    )
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <lech_value_1+0x470>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d12b      	bne.n	8000ecc <lech_value_1+0x478>
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <lech_value_1+0x470>)
 8000e76:	785b      	ldrb	r3, [r3, #1]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d126      	bne.n	8000ecc <lech_value_1+0x478>
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <lech_value_1+0x470>)
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d121      	bne.n	8000ecc <lech_value_1+0x478>
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <lech_value_1+0x470>)
 8000e8a:	78db      	ldrb	r3, [r3, #3]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d11c      	bne.n	8000ecc <lech_value_1+0x478>
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <lech_value_1+0x470>)
 8000e94:	791b      	ldrb	r3, [r3, #4]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d117      	bne.n	8000ecc <lech_value_1+0x478>
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <lech_value_1+0x470>)
 8000e9e:	795b      	ldrb	r3, [r3, #5]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d112      	bne.n	8000ecc <lech_value_1+0x478>
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <lech_value_1+0x470>)
 8000ea8:	799b      	ldrb	r3, [r3, #6]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10d      	bne.n	8000ecc <lech_value_1+0x478>
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <lech_value_1+0x470>)
 8000eb2:	79db      	ldrb	r3, [r3, #7]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d108      	bne.n	8000ecc <lech_value_1+0x478>
	    lech_1 = 2;
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <lech_value_1+0x474>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e0e0      	b.n	8001084 <lech_value_1+0x630>
 8000ec2:	bf00      	nop
 8000ec4:	20000444 	.word	0x20000444
 8000ec8:	200004a0 	.word	0x200004a0
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 0) && (led[4] == 0) && (led[5] == 1)  && (led[6] == 0)   && (led[7] == 0)      )
 8000ecc:	4b6e      	ldr	r3, [pc, #440]	; (8001088 <lech_value_1+0x634>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d126      	bne.n	8000f24 <lech_value_1+0x4d0>
 8000ed6:	4b6c      	ldr	r3, [pc, #432]	; (8001088 <lech_value_1+0x634>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d121      	bne.n	8000f24 <lech_value_1+0x4d0>
 8000ee0:	4b69      	ldr	r3, [pc, #420]	; (8001088 <lech_value_1+0x634>)
 8000ee2:	789b      	ldrb	r3, [r3, #2]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11c      	bne.n	8000f24 <lech_value_1+0x4d0>
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <lech_value_1+0x634>)
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d117      	bne.n	8000f24 <lech_value_1+0x4d0>
 8000ef4:	4b64      	ldr	r3, [pc, #400]	; (8001088 <lech_value_1+0x634>)
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d112      	bne.n	8000f24 <lech_value_1+0x4d0>
 8000efe:	4b62      	ldr	r3, [pc, #392]	; (8001088 <lech_value_1+0x634>)
 8000f00:	795b      	ldrb	r3, [r3, #5]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d10d      	bne.n	8000f24 <lech_value_1+0x4d0>
 8000f08:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <lech_value_1+0x634>)
 8000f0a:	799b      	ldrb	r3, [r3, #6]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <lech_value_1+0x4d0>
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <lech_value_1+0x634>)
 8000f14:	79db      	ldrb	r3, [r3, #7]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d103      	bne.n	8000f24 <lech_value_1+0x4d0>
	    lech_1 = 3;
 8000f1c:	4b5b      	ldr	r3, [pc, #364]	; (800108c <lech_value_1+0x638>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e0af      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 0) && (led[4] == 0) && (led[5] == 1)  && (led[6] == 1)   && (led[7] == 0)    )
 8000f24:	4b58      	ldr	r3, [pc, #352]	; (8001088 <lech_value_1+0x634>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d126      	bne.n	8000f7c <lech_value_1+0x528>
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <lech_value_1+0x634>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d121      	bne.n	8000f7c <lech_value_1+0x528>
 8000f38:	4b53      	ldr	r3, [pc, #332]	; (8001088 <lech_value_1+0x634>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d11c      	bne.n	8000f7c <lech_value_1+0x528>
 8000f42:	4b51      	ldr	r3, [pc, #324]	; (8001088 <lech_value_1+0x634>)
 8000f44:	78db      	ldrb	r3, [r3, #3]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d117      	bne.n	8000f7c <lech_value_1+0x528>
 8000f4c:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <lech_value_1+0x634>)
 8000f4e:	791b      	ldrb	r3, [r3, #4]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d112      	bne.n	8000f7c <lech_value_1+0x528>
 8000f56:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <lech_value_1+0x634>)
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10d      	bne.n	8000f7c <lech_value_1+0x528>
 8000f60:	4b49      	ldr	r3, [pc, #292]	; (8001088 <lech_value_1+0x634>)
 8000f62:	799b      	ldrb	r3, [r3, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d108      	bne.n	8000f7c <lech_value_1+0x528>
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <lech_value_1+0x634>)
 8000f6c:	79db      	ldrb	r3, [r3, #7]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d103      	bne.n	8000f7c <lech_value_1+0x528>
	    lech_1 = 5;
 8000f74:	4b45      	ldr	r3, [pc, #276]	; (800108c <lech_value_1+0x638>)
 8000f76:	2205      	movs	r2, #5
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e083      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 0) && (led[4] == 0) && (led[5] == 0)  && (led[6] == 1)   && (led[7] == 0)      )
 8000f7c:	4b42      	ldr	r3, [pc, #264]	; (8001088 <lech_value_1+0x634>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d126      	bne.n	8000fd4 <lech_value_1+0x580>
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <lech_value_1+0x634>)
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d121      	bne.n	8000fd4 <lech_value_1+0x580>
 8000f90:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <lech_value_1+0x634>)
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11c      	bne.n	8000fd4 <lech_value_1+0x580>
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <lech_value_1+0x634>)
 8000f9c:	78db      	ldrb	r3, [r3, #3]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d117      	bne.n	8000fd4 <lech_value_1+0x580>
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <lech_value_1+0x634>)
 8000fa6:	791b      	ldrb	r3, [r3, #4]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d112      	bne.n	8000fd4 <lech_value_1+0x580>
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <lech_value_1+0x634>)
 8000fb0:	795b      	ldrb	r3, [r3, #5]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10d      	bne.n	8000fd4 <lech_value_1+0x580>
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <lech_value_1+0x634>)
 8000fba:	799b      	ldrb	r3, [r3, #6]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d108      	bne.n	8000fd4 <lech_value_1+0x580>
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <lech_value_1+0x634>)
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <lech_value_1+0x580>
	    lech_1 = 6;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <lech_value_1+0x638>)
 8000fce:	2206      	movs	r2, #6
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e057      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 0) && (led[4] == 0) && (led[5] == 0)  && (led[6] == 1)   && (led[7] == 1)      )
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <lech_value_1+0x634>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d126      	bne.n	800102c <lech_value_1+0x5d8>
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <lech_value_1+0x634>)
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d121      	bne.n	800102c <lech_value_1+0x5d8>
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <lech_value_1+0x634>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d11c      	bne.n	800102c <lech_value_1+0x5d8>
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <lech_value_1+0x634>)
 8000ff4:	78db      	ldrb	r3, [r3, #3]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d117      	bne.n	800102c <lech_value_1+0x5d8>
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <lech_value_1+0x634>)
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d112      	bne.n	800102c <lech_value_1+0x5d8>
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <lech_value_1+0x634>)
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10d      	bne.n	800102c <lech_value_1+0x5d8>
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <lech_value_1+0x634>)
 8001012:	799b      	ldrb	r3, [r3, #6]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d108      	bne.n	800102c <lech_value_1+0x5d8>
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <lech_value_1+0x634>)
 800101c:	79db      	ldrb	r3, [r3, #7]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d103      	bne.n	800102c <lech_value_1+0x5d8>
	    lech_1 = 7;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <lech_value_1+0x638>)
 8001026:	2207      	movs	r2, #7
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e02b      	b.n	8001084 <lech_value_1+0x630>
	  else if ( (led[0] == 0) &&  (led[1] == 0) &&   (led[2] == 0) && (led[3] == 0) && (led[4] == 0) && (led[5] == 0)  && (led[6] == 0)   && (led[7] == 1)      )
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <lech_value_1+0x634>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d126      	bne.n	8001084 <lech_value_1+0x630>
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <lech_value_1+0x634>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d121      	bne.n	8001084 <lech_value_1+0x630>
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <lech_value_1+0x634>)
 8001042:	789b      	ldrb	r3, [r3, #2]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11c      	bne.n	8001084 <lech_value_1+0x630>
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <lech_value_1+0x634>)
 800104c:	78db      	ldrb	r3, [r3, #3]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d117      	bne.n	8001084 <lech_value_1+0x630>
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <lech_value_1+0x634>)
 8001056:	791b      	ldrb	r3, [r3, #4]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d112      	bne.n	8001084 <lech_value_1+0x630>
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <lech_value_1+0x634>)
 8001060:	795b      	ldrb	r3, [r3, #5]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10d      	bne.n	8001084 <lech_value_1+0x630>
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <lech_value_1+0x634>)
 800106a:	799b      	ldrb	r3, [r3, #6]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d108      	bne.n	8001084 <lech_value_1+0x630>
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <lech_value_1+0x634>)
 8001074:	79db      	ldrb	r3, [r3, #7]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d103      	bne.n	8001084 <lech_value_1+0x630>
	    lech_1 = 8;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <lech_value_1+0x638>)
 800107e:	2208      	movs	r2, #8
 8001080:	601a      	str	r2, [r3, #0]
}
 8001082:	e7ff      	b.n	8001084 <lech_value_1+0x630>
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000444 	.word	0x20000444
 800108c:	200004a0 	.word	0x200004a0

08001090 <nga4_count>:
//		goc = values[1];
//	}
//	if(goc > 180 && goc <= 360) goc = goc - 360;
//}
void nga4_count(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
		if (led[0] == 1)    i++;
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <nga4_count+0xe8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d102      	bne.n	80010aa <nga4_count+0x1a>
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3301      	adds	r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
		if (led[1] == 1)    i++;
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <nga4_count+0xe8>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d102      	bne.n	80010ba <nga4_count+0x2a>
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	3301      	adds	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
		if (led[2] == 1)    i++;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <nga4_count+0xe8>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d102      	bne.n	80010ca <nga4_count+0x3a>
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	3301      	adds	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
		if (led[3] == 1)    i++;
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <nga4_count+0xe8>)
 80010cc:	78db      	ldrb	r3, [r3, #3]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <nga4_count+0x4a>
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3301      	adds	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
		if (led[4] == 1)    i++;
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <nga4_count+0xe8>)
 80010dc:	791b      	ldrb	r3, [r3, #4]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d102      	bne.n	80010ea <nga4_count+0x5a>
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
		if (led[5] == 1)    i++;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <nga4_count+0xe8>)
 80010ec:	795b      	ldrb	r3, [r3, #5]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d102      	bne.n	80010fa <nga4_count+0x6a>
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	3301      	adds	r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]
		if (led[6] == 1)    i++;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <nga4_count+0xe8>)
 80010fc:	799b      	ldrb	r3, [r3, #6]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <nga4_count+0x7a>
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	3301      	adds	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
		if (led[7] == 1)    i++;
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <nga4_count+0xe8>)
 800110c:	79db      	ldrb	r3, [r3, #7]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d102      	bne.n	800111a <nga4_count+0x8a>
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3301      	adds	r3, #1
 8001118:	71fb      	strb	r3, [r7, #7]

	  if ((  i >= 4||  ((led[3] == 1 ||  led[4] == 1 )&& (led[1] == 1 || led[6] == 1 )) ) &&  millies() - time1 >= 300  )
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d813      	bhi.n	8001148 <nga4_count+0xb8>
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <nga4_count+0xe8>)
 8001122:	78db      	ldrb	r3, [r3, #3]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d004      	beq.n	8001134 <nga4_count+0xa4>
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <nga4_count+0xe8>)
 800112c:	791b      	ldrb	r3, [r3, #4]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d11d      	bne.n	8001170 <nga4_count+0xe0>
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <nga4_count+0xe8>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d004      	beq.n	8001148 <nga4_count+0xb8>
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <nga4_count+0xe8>)
 8001140:	799b      	ldrb	r3, [r3, #6]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d113      	bne.n	8001170 <nga4_count+0xe0>
 8001148:	f7ff fb0c 	bl	8000764 <millies>
 800114c:	4602      	mov	r2, r0
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <nga4_count+0xec>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001158:	d30a      	bcc.n	8001170 <nga4_count+0xe0>
	    // ng� 4
	  {

	    so_nga4 ++; // tang so ng� tu l�n
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <nga4_count+0xf0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <nga4_count+0xf0>)
 8001164:	701a      	strb	r2, [r3, #0]
	    time1 = millies();
 8001166:	f7ff fafd 	bl	8000764 <millies>
 800116a:	4603      	mov	r3, r0
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <nga4_count+0xec>)
 800116e:	6013      	str	r3, [r2, #0]
	  }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000444 	.word	0x20000444
 800117c:	20000490 	.word	0x20000490
 8001180:	200004f5 	.word	0x200004f5

08001184 <nga3_count>:
void nga3_count(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
		if (led[0] == 1)    i++;
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <nga3_count+0xe8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d102      	bne.n	800119e <nga3_count+0x1a>
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	3301      	adds	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
		if (led[1] == 1)    i++;
 800119e:	4b33      	ldr	r3, [pc, #204]	; (800126c <nga3_count+0xe8>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <nga3_count+0x2a>
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	3301      	adds	r3, #1
 80011ac:	71fb      	strb	r3, [r7, #7]
		if (led[2] == 1)    i++;
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <nga3_count+0xe8>)
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d102      	bne.n	80011be <nga3_count+0x3a>
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	3301      	adds	r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
		if (led[3] == 1)    i++;
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <nga3_count+0xe8>)
 80011c0:	78db      	ldrb	r3, [r3, #3]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d102      	bne.n	80011ce <nga3_count+0x4a>
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	3301      	adds	r3, #1
 80011cc:	71fb      	strb	r3, [r7, #7]
		if (led[4] == 1)    i++;
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <nga3_count+0xe8>)
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <nga3_count+0x5a>
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	3301      	adds	r3, #1
 80011dc:	71fb      	strb	r3, [r7, #7]
		if (led[5] == 1)    i++;
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <nga3_count+0xe8>)
 80011e0:	795b      	ldrb	r3, [r3, #5]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d102      	bne.n	80011ee <nga3_count+0x6a>
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	3301      	adds	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
		if (led[6] == 1)    i++;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <nga3_count+0xe8>)
 80011f0:	799b      	ldrb	r3, [r3, #6]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d102      	bne.n	80011fe <nga3_count+0x7a>
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	3301      	adds	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]
		if (led[7] == 1)    i++;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <nga3_count+0xe8>)
 8001200:	79db      	ldrb	r3, [r3, #7]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <nga3_count+0x8a>
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	3301      	adds	r3, #1
 800120c:	71fb      	strb	r3, [r7, #7]

	  if ((  i >= 4||  ((led[3] == 1 ||  led[4] == 1 ) && (led[0] == 1 || led[2] == 1 )) ) &&  millies() - time2 >= 300  )
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d813      	bhi.n	800123c <nga3_count+0xb8>
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <nga3_count+0xe8>)
 8001216:	78db      	ldrb	r3, [r3, #3]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d004      	beq.n	8001228 <nga3_count+0xa4>
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <nga3_count+0xe8>)
 8001220:	791b      	ldrb	r3, [r3, #4]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d11d      	bne.n	8001264 <nga3_count+0xe0>
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <nga3_count+0xe8>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d004      	beq.n	800123c <nga3_count+0xb8>
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <nga3_count+0xe8>)
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d113      	bne.n	8001264 <nga3_count+0xe0>
 800123c:	f7ff fa92 	bl	8000764 <millies>
 8001240:	4602      	mov	r2, r0
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <nga3_count+0xec>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800124c:	d30a      	bcc.n	8001264 <nga3_count+0xe0>
	    // ng� 4
	  {

	    so_nga3 ++; // tang so ng� tu l�n
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <nga3_count+0xf0>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <nga3_count+0xf0>)
 8001258:	701a      	strb	r2, [r3, #0]
	    time2 = millies();
 800125a:	f7ff fa83 	bl	8000764 <millies>
 800125e:	4603      	mov	r3, r0
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <nga3_count+0xec>)
 8001262:	6013      	str	r3, [r2, #0]
	  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000444 	.word	0x20000444
 8001270:	20000600 	.word	0x20000600
 8001274:	200002cc 	.word	0x200002cc

08001278 <pid_goc>:
	if(PID_1 >40)   PID_1 =40;
	if(PID_1 <-40)   PID_1 =-40;
}

void pid_goc(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	goc = values[1];
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <pid_goc+0xa8>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <pid_goc+0xac>)
 8001282:	6013      	str	r3, [r2, #0]

//	if ((goc < 2) && (goc >-2)) goc = 0;
//	else
//		goc=values[4];

	lech_ag = goc - goc0;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <pid_goc+0xac>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <pid_goc+0xb0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a27      	ldr	r2, [pc, #156]	; (800132c <pid_goc+0xb4>)
 8001290:	6013      	str	r3, [r2, #0]

	if( abs(lech_ag) <=  1 ) lech_ag=0;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <pid_goc+0xb4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129a:	db06      	blt.n	80012aa <pid_goc+0x32>
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <pid_goc+0xb4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	dc02      	bgt.n	80012aa <pid_goc+0x32>
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <pid_goc+0xb4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

	P_a = lech_ag*Kp_a;
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <pid_goc+0xb4>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <pid_goc+0xb8>)
 80012b6:	6013      	str	r3, [r2, #0]

	I_a = Ki_a*lech_ag + I_a;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <pid_goc+0xbc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <pid_goc+0xbc>)
 80012be:	6013      	str	r3, [r2, #0]

	D_a = (lech_ag - pre_lech_ag)*Kd_a;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <pid_goc+0xb4>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <pid_goc+0xc0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad2      	subs	r2, r2, r3
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	4a1a      	ldr	r2, [pc, #104]	; (800133c <pid_goc+0xc4>)
 80012d2:	6013      	str	r3, [r2, #0]

	PID_a = P_a+I_a+D_a;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <pid_goc+0xb8>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <pid_goc+0xbc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	441a      	add	r2, r3
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <pid_goc+0xc4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a16      	ldr	r2, [pc, #88]	; (8001340 <pid_goc+0xc8>)
 80012e6:	6013      	str	r3, [r2, #0]

	pre_lech_ag = lech_ag;
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <pid_goc+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <pid_goc+0xc0>)
 80012ee:	6013      	str	r3, [r2, #0]

	if(PID_a >32)   PID_a =32;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <pid_goc+0xc8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	dd02      	ble.n	80012fe <pid_goc+0x86>
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <pid_goc+0xc8>)
 80012fa:	2220      	movs	r2, #32
 80012fc:	601a      	str	r2, [r3, #0]
	if(PID_a <-32)   PID_a =-32;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <pid_goc+0xc8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f113 0f20 	cmn.w	r3, #32
 8001306:	da03      	bge.n	8001310 <pid_goc+0x98>
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <pid_goc+0xc8>)
 800130a:	f06f 021f 	mvn.w	r2, #31
 800130e:	601a      	str	r2, [r3, #0]
	flag = 0;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <pid_goc+0xcc>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000268 	.word	0x20000268
 8001324:	200003f0 	.word	0x200003f0
 8001328:	200003ec 	.word	0x200003ec
 800132c:	20000608 	.word	0x20000608
 8001330:	20000498 	.word	0x20000498
 8001334:	2000034c 	.word	0x2000034c
 8001338:	20000494 	.word	0x20000494
 800133c:	200004e4 	.word	0x200004e4
 8001340:	200004f8 	.word	0x200004f8
 8001344:	20000340 	.word	0x20000340

08001348 <motor_foward_pid>:
//
//1     3
/********************************************************PID_VALUE_TO_MOTOR****************************************************/

void motor_foward_pid(int speed)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	int x = speed;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	60fb      	str	r3, [r7, #12]
	/*--line + angle--*/
	// khi goc lech duong , pid + vao 1 2 ??
	MotorSpeed[1] = x + PID_1 - PID_a;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <motor_foward_pid+0x88>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	441a      	add	r2, r3
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <motor_foward_pid+0x8c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <motor_foward_pid+0x90>)
 8001364:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x + PID_1 - PID_a;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <motor_foward_pid+0x88>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	441a      	add	r2, r3
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <motor_foward_pid+0x8c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <motor_foward_pid+0x90>)
 8001376:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x - PID_1 + PID_a;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <motor_foward_pid+0x88>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	1ad2      	subs	r2, r2, r3
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <motor_foward_pid+0x8c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4413      	add	r3, r2
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <motor_foward_pid+0x90>)
 8001388:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x - PID_1 + PID_a;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <motor_foward_pid+0x88>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	1ad2      	subs	r2, r2, r3
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <motor_foward_pid+0x8c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <motor_foward_pid+0x90>)
 800139a:	6113      	str	r3, [r2, #16]

	st_motor1(MotorSpeed[1]);
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <motor_foward_pid+0x90>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 f839 	bl	8002418 <st_motor1>
	st_motor2(MotorSpeed[2]);
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <motor_foward_pid+0x90>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f864 	bl	8002478 <st_motor2>
	st_motor3(-MotorSpeed[3]);
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <motor_foward_pid+0x90>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	425b      	negs	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f890 	bl	80024dc <st_motor3>
	st_motor4(-MotorSpeed[4]);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <motor_foward_pid+0x90>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	425b      	negs	r3, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 f8ba 	bl	800253c <st_motor4>

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200001d8 	.word	0x200001d8
 80013d4:	200004f8 	.word	0x200004f8
 80013d8:	2000032c 	.word	0x2000032c

080013dc <motor_backward_pid>:

void motor_backward_pid(int speed)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	int x = speed;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x - PID_1 + PID_a;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <motor_backward_pid+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	1ad2      	subs	r2, r2, r3
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <motor_backward_pid+0x8c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <motor_backward_pid+0x90>)
 80013f8:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x - PID_1 + PID_a;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <motor_backward_pid+0x88>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <motor_backward_pid+0x8c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <motor_backward_pid+0x90>)
 800140a:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x + PID_1 - PID_a;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <motor_backward_pid+0x88>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	441a      	add	r2, r3
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <motor_backward_pid+0x8c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <motor_backward_pid+0x90>)
 800141c:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x + PID_1 - PID_a;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <motor_backward_pid+0x88>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	441a      	add	r2, r3
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <motor_backward_pid+0x8c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	4a0f      	ldr	r2, [pc, #60]	; (800146c <motor_backward_pid+0x90>)
 800142e:	6113      	str	r3, [r2, #16]

	st_motor1(-MotorSpeed[1]);
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <motor_backward_pid+0x90>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	425b      	negs	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 ffee 	bl	8002418 <st_motor1>
	st_motor2(-MotorSpeed[2]);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <motor_backward_pid+0x90>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	425b      	negs	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f818 	bl	8002478 <st_motor2>
	st_motor3(MotorSpeed[3]);
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <motor_backward_pid+0x90>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4618      	mov	r0, r3
 800144e:	f001 f845 	bl	80024dc <st_motor3>
	st_motor4(MotorSpeed[4]);
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <motor_backward_pid+0x90>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	4618      	mov	r0, r3
 8001458:	f001 f870 	bl	800253c <st_motor4>

}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001d8 	.word	0x200001d8
 8001468:	200004f8 	.word	0x200004f8
 800146c:	2000032c 	.word	0x2000032c

08001470 <motor_rightside_pid>:

void motor_rightside_pid(int speed)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	int x = speed;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x - PID_2 + PID_a;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <motor_rightside_pid+0x88>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	1ad2      	subs	r2, r2, r3
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <motor_rightside_pid+0x8c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <motor_rightside_pid+0x90>)
 800148c:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x + PID_2 - PID_a;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <motor_rightside_pid+0x88>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	441a      	add	r2, r3
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <motor_rightside_pid+0x8c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a18      	ldr	r2, [pc, #96]	; (8001500 <motor_rightside_pid+0x90>)
 800149e:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x - PID_2 + PID_a;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <motor_rightside_pid+0x88>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	1ad2      	subs	r2, r2, r3
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <motor_rightside_pid+0x8c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <motor_rightside_pid+0x90>)
 80014b0:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x + PID_2 - PID_a;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <motor_rightside_pid+0x88>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	441a      	add	r2, r3
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <motor_rightside_pid+0x8c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <motor_rightside_pid+0x90>)
 80014c2:	6113      	str	r3, [r2, #16]

	st_motor1(-MotorSpeed[1]);
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <motor_rightside_pid+0x90>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	425b      	negs	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 ffa4 	bl	8002418 <st_motor1>
	st_motor2(MotorSpeed[2]);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <motor_rightside_pid+0x90>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 ffcf 	bl	8002478 <st_motor2>
	st_motor3(-MotorSpeed[3]);
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <motor_rightside_pid+0x90>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	425b      	negs	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fffb 	bl	80024dc <st_motor3>
	st_motor4(MotorSpeed[4]);
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <motor_rightside_pid+0x90>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 f826 	bl	800253c <st_motor4>

}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200003f4 	.word	0x200003f4
 80014fc:	200004f8 	.word	0x200004f8
 8001500:	2000032c 	.word	0x2000032c

08001504 <motor_leftside_pid>:

void motor_leftside_pid(int speed)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	int x = speed;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x + PID_2 - PID_a;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <motor_leftside_pid+0x88>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	441a      	add	r2, r3
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <motor_leftside_pid+0x8c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <motor_leftside_pid+0x90>)
 8001520:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x - PID_2 + PID_a;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <motor_leftside_pid+0x88>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	1ad2      	subs	r2, r2, r3
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <motor_leftside_pid+0x8c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a18      	ldr	r2, [pc, #96]	; (8001594 <motor_leftside_pid+0x90>)
 8001532:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x + PID_2 - PID_a;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <motor_leftside_pid+0x88>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	441a      	add	r2, r3
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <motor_leftside_pid+0x8c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <motor_leftside_pid+0x90>)
 8001544:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x - PID_2 + PID_a;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <motor_leftside_pid+0x88>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	1ad2      	subs	r2, r2, r3
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <motor_leftside_pid+0x8c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <motor_leftside_pid+0x90>)
 8001556:	6113      	str	r3, [r2, #16]

	st_motor1(MotorSpeed[1]);
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <motor_leftside_pid+0x90>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 ff5b 	bl	8002418 <st_motor1>
	st_motor2(-MotorSpeed[2]);
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <motor_leftside_pid+0x90>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	425b      	negs	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f000 ff85 	bl	8002478 <st_motor2>
	st_motor3(MotorSpeed[3]);
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <motor_leftside_pid+0x90>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 ffb2 	bl	80024dc <st_motor3>
	st_motor4(-MotorSpeed[4]);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <motor_leftside_pid+0x90>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	425b      	negs	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 ffdc 	bl	800253c <st_motor4>

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200003f4 	.word	0x200003f4
 8001590:	200004f8 	.word	0x200004f8
 8001594:	2000032c 	.word	0x2000032c

08001598 <motor_turn_angle>:

void motor_turn_angle(int speed)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	int x = speed;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = sign(PID_a)*x + PID_a;
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <motor_turn_angle+0xb4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f8c0 	bl	800272e <sign>
 80015ae:	4602      	mov	r2, r0
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	fb03 f202 	mul.w	r2, r3, r2
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <motor_turn_angle+0xb4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <motor_turn_angle+0xb8>)
 80015be:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = sign(PID_a)*x + PID_a;
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <motor_turn_angle+0xb4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 f8b2 	bl	800272e <sign>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	fb03 f202 	mul.w	r2, r3, r2
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <motor_turn_angle+0xb4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <motor_turn_angle+0xb8>)
 80015da:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = sign(PID_a)*x + PID_a;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <motor_turn_angle+0xb4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 f8a4 	bl	800272e <sign>
 80015e6:	4602      	mov	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	fb03 f202 	mul.w	r2, r3, r2
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <motor_turn_angle+0xb4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <motor_turn_angle+0xb8>)
 80015f6:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = sign(PID_a)*x + PID_a;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <motor_turn_angle+0xb4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 f896 	bl	800272e <sign>
 8001602:	4602      	mov	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	fb03 f202 	mul.w	r2, r3, r2
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <motor_turn_angle+0xb4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <motor_turn_angle+0xb8>)
 8001612:	6113      	str	r3, [r2, #16]

	st_motor1(-MotorSpeed[1]);
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <motor_turn_angle+0xb8>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	425b      	negs	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fefc 	bl	8002418 <st_motor1>
	st_motor2(-MotorSpeed[2]);
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <motor_turn_angle+0xb8>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	425b      	negs	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ff26 	bl	8002478 <st_motor2>
	st_motor3(-MotorSpeed[3]);
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <motor_turn_angle+0xb8>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	425b      	negs	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 ff52 	bl	80024dc <st_motor3>
	st_motor4(-MotorSpeed[4]);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <motor_turn_angle+0xb8>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	425b      	negs	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 ff7c 	bl	800253c <st_motor4>


}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200004f8 	.word	0x200004f8
 8001650:	2000032c 	.word	0x2000032c

08001654 <run_turn_angle>:

void run_turn_angle(int speed, int angle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 800165e:	2201      	movs	r2, #1
 8001660:	4911      	ldr	r1, [pc, #68]	; (80016a8 <run_turn_angle+0x54>)
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <run_turn_angle+0x58>)
 8001664:	f004 f819 	bl	800569a <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f001 fcfd 	bl	8003068 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 800166e:	2201      	movs	r2, #1
 8001670:	490d      	ldr	r1, [pc, #52]	; (80016a8 <run_turn_angle+0x54>)
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <run_turn_angle+0x58>)
 8001674:	f004 f811 	bl	800569a <HAL_UART_Receive_IT>
	while(values[1] != angle )
 8001678:	e007      	b.n	800168a <run_turn_angle+0x36>
	{
		goc0 = angle;
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <run_turn_angle+0x5c>)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6013      	str	r3, [r2, #0]
		pid_goc();
 8001680:	f7ff fdfa 	bl	8001278 <pid_goc>
		motor_turn_angle(speed);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff87 	bl	8001598 <motor_turn_angle>
	while(values[1] != angle )
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <run_turn_angle+0x60>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d1f2      	bne.n	800167a <run_turn_angle+0x26>
	}
	stop();
 8001694:	f000 ff82 	bl	800259c <stop>
	goc0 = 0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <run_turn_angle+0x5c>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001d4 	.word	0x200001d4
 80016ac:	2000044c 	.word	0x2000044c
 80016b0:	200003ec 	.word	0x200003ec
 80016b4:	20000268 	.word	0x20000268

080016b8 <linefollow_foward>:
/**********************************-Line Follow-**************************************/

void linefollow_foward(int speed)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	lech_value_1();
 80016c0:	f7ff f9c8 	bl	8000a54 <lech_value_1>
//	lech_value_2();
//	pid_lech_1();

	pid_goc();
 80016c4:	f7ff fdd8 	bl	8001278 <pid_goc>

//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_foward_pid( speed  );
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fe3d 	bl	8001348 <motor_foward_pid>
//	}
//	else
//		stop();
//	LCD_speed_plot();
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <linefollow_backward>:

void linefollow_backward(int speed)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	//lech_value_1();
	//lech_value_2();
	//pid_lech_1();
	pid_goc();
 80016de:	f7ff fdcb 	bl	8001278 <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_backward_pid( speed  );
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fe7a 	bl	80013dc <motor_backward_pid>

//	}
//	else
//		stop();
//	LCD_speed_plot();
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <linefollow_rightside>:

void linefollow_rightside(int speed)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	//lech_value_1();
//	lech_value_2();
//	pid_lech_2();
	pid_goc();
 80016f8:	f7ff fdbe 	bl	8001278 <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_rightside_pid( speed  );
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff feb7 	bl	8001470 <motor_rightside_pid>

//	}
//	else
//		stop();
//		LCD_speed_plot();
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <linefollow_leftside>:
void linefollow_leftside(int speed)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
//	lech_value_1();
//	lech_value_2();
//	pid_lech_2();
	pid_goc();
 8001712:	f7ff fdb1 	bl	8001278 <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_leftside_pid( speed  );
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fef4 	bl	8001504 <motor_leftside_pid>

//	}
//	else
//		stop();
//		LCD_speed_plot();
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <run_foward_steps>:


/***********************-Run with encoder-*************************1 vong = 2000 xung*/

void run_foward_steps(int speed, uint16_t step)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <run_foward_steps+0x60>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <run_foward_steps+0x64>)
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);

		HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001738:	2201      	movs	r2, #1
 800173a:	4914      	ldr	r1, [pc, #80]	; (800178c <run_foward_steps+0x68>)
 800173c:	4814      	ldr	r0, [pc, #80]	; (8001790 <run_foward_steps+0x6c>)
 800173e:	f003 ffac 	bl	800569a <HAL_UART_Receive_IT>
		HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f001 fc90 	bl	8003068 <HAL_Delay>
		HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001748:	2201      	movs	r2, #1
 800174a:	4910      	ldr	r1, [pc, #64]	; (800178c <run_foward_steps+0x68>)
 800174c:	4810      	ldr	r0, [pc, #64]	; (8001790 <run_foward_steps+0x6c>)
 800174e:	f003 ffa4 	bl	800569a <HAL_UART_Receive_IT>
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8001752:	e007      	b.n	8001764 <run_foward_steps+0x40>
	{
		linefollow_foward(speed);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffaf 	bl	80016b8 <linefollow_foward>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <run_foward_steps+0x60>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <run_foward_steps+0x70>)
 8001762:	6013      	str	r3, [r2, #0]
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <run_foward_steps+0x60>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	f5c3 2374 	rsb	r3, r3, #999424	; 0xf4000
 800176e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	4293      	cmp	r3, r2
 8001776:	d9ed      	bls.n	8001754 <run_foward_steps+0x30>

	}
	stop();
 8001778:	f000 ff10 	bl	800259c <stop>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000358 	.word	0x20000358
 8001788:	000f4240 	.word	0x000f4240
 800178c:	200001d4 	.word	0x200001d4
 8001790:	2000044c 	.word	0x2000044c
 8001794:	20000614 	.word	0x20000614

08001798 <run_backward_steps>:

void run_backward_steps(uint16_t speed, uint16_t step)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <run_backward_steps+0x68>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a15      	ldr	r2, [pc, #84]	; (8001804 <run_backward_steps+0x6c>)
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24


		HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	4915      	ldr	r1, [pc, #84]	; (8001808 <run_backward_steps+0x70>)
 80017b4:	4815      	ldr	r0, [pc, #84]	; (800180c <run_backward_steps+0x74>)
 80017b6:	f003 ff70 	bl	800569a <HAL_UART_Receive_IT>
		HAL_Delay(1);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f001 fc54 	bl	8003068 <HAL_Delay>
		HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 80017c0:	2201      	movs	r2, #1
 80017c2:	4911      	ldr	r1, [pc, #68]	; (8001808 <run_backward_steps+0x70>)
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <run_backward_steps+0x74>)
 80017c6:	f003 ff68 	bl	800569a <HAL_UART_Receive_IT>
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 80017ca:	e008      	b.n	80017de <run_backward_steps+0x46>
	{
		linefollow_backward(speed);
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff81 	bl	80016d6 <linefollow_backward>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <run_backward_steps+0x68>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <run_backward_steps+0x78>)
 80017dc:	6013      	str	r3, [r2, #0]
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <run_backward_steps+0x68>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 80017e8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80017ec:	88ba      	ldrh	r2, [r7, #4]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d9ec      	bls.n	80017cc <run_backward_steps+0x34>
	}stop();
 80017f2:	f000 fed3 	bl	800259c <stop>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000358 	.word	0x20000358
 8001804:	000f4240 	.word	0x000f4240
 8001808:	200001d4 	.word	0x200001d4
 800180c:	2000044c 	.word	0x2000044c
 8001810:	20000614 	.word	0x20000614

08001814 <run_right_steps>:

void run_right_steps(uint16_t speed, uint16_t step)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	4613      	mov	r3, r2
 8001822:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <run_right_steps+0x68>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <run_right_steps+0x6c>)
 800182a:	625a      	str	r2, [r3, #36]	; 0x24


	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 800182c:	2201      	movs	r2, #1
 800182e:	4915      	ldr	r1, [pc, #84]	; (8001884 <run_right_steps+0x70>)
 8001830:	4815      	ldr	r0, [pc, #84]	; (8001888 <run_right_steps+0x74>)
 8001832:	f003 ff32 	bl	800569a <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f001 fc16 	bl	8003068 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 800183c:	2201      	movs	r2, #1
 800183e:	4911      	ldr	r1, [pc, #68]	; (8001884 <run_right_steps+0x70>)
 8001840:	4811      	ldr	r0, [pc, #68]	; (8001888 <run_right_steps+0x74>)
 8001842:	f003 ff2a 	bl	800569a <HAL_UART_Receive_IT>
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8001846:	e008      	b.n	800185a <run_right_steps+0x46>
	{
		linefollow_rightside(speed);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff50 	bl	80016f0 <linefollow_rightside>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <run_right_steps+0x68>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	4a0d      	ldr	r2, [pc, #52]	; (800188c <run_right_steps+0x78>)
 8001858:	6013      	str	r3, [r2, #0]
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <run_right_steps+0x68>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8001864:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001868:	88ba      	ldrh	r2, [r7, #4]
 800186a:	4293      	cmp	r3, r2
 800186c:	d9ec      	bls.n	8001848 <run_right_steps+0x34>
	}stop();
 800186e:	f000 fe95 	bl	800259c <stop>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000358 	.word	0x20000358
 8001880:	000f4240 	.word	0x000f4240
 8001884:	200001d4 	.word	0x200001d4
 8001888:	2000044c 	.word	0x2000044c
 800188c:	20000614 	.word	0x20000614

08001890 <run_left_steps>:

void run_left_steps(uint16_t speed, uint16_t step)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	80fb      	strh	r3, [r7, #6]
 800189c:	4613      	mov	r3, r2
 800189e:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <run_left_steps+0x68>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a15      	ldr	r2, [pc, #84]	; (80018fc <run_left_steps+0x6c>)
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24


	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 80018a8:	2201      	movs	r2, #1
 80018aa:	4915      	ldr	r1, [pc, #84]	; (8001900 <run_left_steps+0x70>)
 80018ac:	4815      	ldr	r0, [pc, #84]	; (8001904 <run_left_steps+0x74>)
 80018ae:	f003 fef4 	bl	800569a <HAL_UART_Receive_IT>
	HAL_Delay(1);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f001 fbd8 	bl	8003068 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 80018b8:	2201      	movs	r2, #1
 80018ba:	4911      	ldr	r1, [pc, #68]	; (8001900 <run_left_steps+0x70>)
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <run_left_steps+0x74>)
 80018be:	f003 feec 	bl	800569a <HAL_UART_Receive_IT>
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 80018c2:	e008      	b.n	80018d6 <run_left_steps+0x46>
	{
		linefollow_leftside(speed);
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff1f 	bl	800170a <linefollow_leftside>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <run_left_steps+0x68>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <run_left_steps+0x78>)
 80018d4:	6013      	str	r3, [r2, #0]
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <run_left_steps+0x68>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f5c3 2374 	rsb	r3, r3, #999424	; 0xf4000
 80018e0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80018e4:	88ba      	ldrh	r2, [r7, #4]
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d9ec      	bls.n	80018c4 <run_left_steps+0x34>
	}stop();
 80018ea:	f000 fe57 	bl	800259c <stop>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000358 	.word	0x20000358
 80018fc:	000f4240 	.word	0x000f4240
 8001900:	200001d4 	.word	0x200001d4
 8001904:	2000044c 	.word	0x2000044c
 8001908:	20000614 	.word	0x20000614

0800190c <run_foward_count>:

/*******************chay dem so vach***************************/
void run_foward_count(int speed, uint8_t nga3 , uint8_t nga4)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
 8001918:	4613      	mov	r3, r2
 800191a:	70bb      	strb	r3, [r7, #2]
	so_nga3 = nga3;
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <run_foward_count+0x60>)
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	7013      	strb	r3, [r2, #0]
	so_nga4 = nga4;
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <run_foward_count+0x64>)
 8001924:	78bb      	ldrb	r3, [r7, #2]
 8001926:	7013      	strb	r3, [r2, #0]
	while(!((so_nga3 == nga3) && nga3 != 0 ))
 8001928:	e004      	b.n	8001934 <run_foward_count+0x28>
			{
				linefollow_foward(speed);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fec4 	bl	80016b8 <linefollow_foward>
				nga3_count();
 8001930:	f7ff fc28 	bl	8001184 <nga3_count>
	while(!((so_nga3 == nga3) && nga3 != 0 ))
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <run_foward_count+0x60>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	429a      	cmp	r2, r3
 800193c:	d1f5      	bne.n	800192a <run_foward_count+0x1e>
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f2      	beq.n	800192a <run_foward_count+0x1e>
			}
	while(!((so_nga4 == nga4) && nga4 != 0 ))
 8001944:	e004      	b.n	8001950 <run_foward_count+0x44>
			{
				linefollow_foward(speed);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff feb6 	bl	80016b8 <linefollow_foward>
				nga4_count();
 800194c:	f7ff fba0 	bl	8001090 <nga4_count>
	while(!((so_nga4 == nga4) && nga4 != 0 ))
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <run_foward_count+0x64>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	78ba      	ldrb	r2, [r7, #2]
 8001956:	429a      	cmp	r2, r3
 8001958:	d1f5      	bne.n	8001946 <run_foward_count+0x3a>
 800195a:	78bb      	ldrb	r3, [r7, #2]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f2      	beq.n	8001946 <run_foward_count+0x3a>
			}
	stop();
 8001960:	f000 fe1c 	bl	800259c <stop>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200002cc 	.word	0x200002cc
 8001970:	200004f5 	.word	0x200004f5

08001974 <run_backward_count>:

void run_backward_count(int speed, uint8_t nga3 , uint8_t nga4)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
 8001980:	4613      	mov	r3, r2
 8001982:	70bb      	strb	r3, [r7, #2]
	so_nga3 = nga3;
 8001984:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <run_backward_count+0x60>)
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	7013      	strb	r3, [r2, #0]
	so_nga4 = nga4;
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <run_backward_count+0x64>)
 800198c:	78bb      	ldrb	r3, [r7, #2]
 800198e:	7013      	strb	r3, [r2, #0]
	while(!((so_nga3 == nga3) && nga3 != 0 ))
 8001990:	e004      	b.n	800199c <run_backward_count+0x28>
			{
				linefollow_backward(speed);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fe9f 	bl	80016d6 <linefollow_backward>
				nga3_count();
 8001998:	f7ff fbf4 	bl	8001184 <nga3_count>
	while(!((so_nga3 == nga3) && nga3 != 0 ))
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <run_backward_count+0x60>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d1f5      	bne.n	8001992 <run_backward_count+0x1e>
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f2      	beq.n	8001992 <run_backward_count+0x1e>
			}
	while(!((so_nga4 == nga4) && nga4 != 0 ))
 80019ac:	e004      	b.n	80019b8 <run_backward_count+0x44>
			{
				linefollow_foward(speed);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fe82 	bl	80016b8 <linefollow_foward>
				nga4_count();
 80019b4:	f7ff fb6c 	bl	8001090 <nga4_count>
	while(!((so_nga4 == nga4) && nga4 != 0 ))
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <run_backward_count+0x64>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	78ba      	ldrb	r2, [r7, #2]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d1f5      	bne.n	80019ae <run_backward_count+0x3a>
 80019c2:	78bb      	ldrb	r3, [r7, #2]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f2      	beq.n	80019ae <run_backward_count+0x3a>
			}
	stop();
 80019c8:	f000 fde8 	bl	800259c <stop>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200002cc 	.word	0x200002cc
 80019d8:	200004f5 	.word	0x200004f5

080019dc <run_rightside_count>:
			}
	stop();
}

void run_rightside_count(int speed, uint8_t nga3 , uint8_t nga4)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
 80019e8:	4613      	mov	r3, r2
 80019ea:	70bb      	strb	r3, [r7, #2]
	so_nga3 = nga3;
 80019ec:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <run_rightside_count+0x58>)
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	7013      	strb	r3, [r2, #0]
	so_nga4 = nga4;
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <run_rightside_count+0x5c>)
 80019f4:	78bb      	ldrb	r3, [r7, #2]
 80019f6:	7013      	strb	r3, [r2, #0]
	while(!((so_nga3 == nga3) && nga3 != 0 ))
 80019f8:	e002      	b.n	8001a00 <run_rightside_count+0x24>
			{
				linefollow_rightside(speed);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fe78 	bl	80016f0 <linefollow_rightside>
	while(!((so_nga3 == nga3) && nga3 != 0 ))
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <run_rightside_count+0x58>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d1f7      	bne.n	80019fa <run_rightside_count+0x1e>
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f4      	beq.n	80019fa <run_rightside_count+0x1e>
			}
	while(!((so_nga4 == nga4) && nga4 != 0 ))
 8001a10:	e002      	b.n	8001a18 <run_rightside_count+0x3c>
			{
				linefollow_foward(speed);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fe50 	bl	80016b8 <linefollow_foward>
	while(!((so_nga4 == nga4) && nga4 != 0 ))
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <run_rightside_count+0x5c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	78ba      	ldrb	r2, [r7, #2]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d1f7      	bne.n	8001a12 <run_rightside_count+0x36>
 8001a22:	78bb      	ldrb	r3, [r7, #2]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f4      	beq.n	8001a12 <run_rightside_count+0x36>
			}
	stop();
 8001a28:	f000 fdb8 	bl	800259c <stop>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200002cc 	.word	0x200002cc
 8001a38:	200004f5 	.word	0x200004f5

08001a3c <chay_doc>:
/*******************chay mu`***********************************/
void chay_doc(int speed,uint8_t mode,uint16_t time)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	803b      	strh	r3, [r7, #0]
	switch(mode){
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d81f      	bhi.n	8001a94 <chay_doc+0x58>
 8001a54:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <chay_doc+0x20>)
 8001a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5a:	bf00      	nop
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a77 	.word	0x08001a77
 8001a64:	08001a81 	.word	0x08001a81
 8001a68:	08001a8b 	.word	0x08001a8b
	case 1:
		run_foward_noline(speed,time);
 8001a6c:	883b      	ldrh	r3, [r7, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f815 	bl	8001aa0 <run_foward_noline>
	case 2:
		run_backward_noline(speed,time);
 8001a76:	883b      	ldrh	r3, [r7, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f844 	bl	8001b08 <run_backward_noline>
	case 3:
		run_leftside_noline(speed,time);
 8001a80:	883b      	ldrh	r3, [r7, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f873 	bl	8001b70 <run_leftside_noline>
	case 4:
		run_rightside_noline(speed,time);
 8001a8a:	883b      	ldrh	r3, [r7, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8a2 	bl	8001bd8 <run_rightside_noline>
	default:
		stop();
 8001a94:	f000 fd82 	bl	800259c <stop>
	}
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <run_foward_noline>:
void run_foward_noline(int speed,uint16_t time)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
	PID_1 =0;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <run_foward_noline+0x5c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4912      	ldr	r1, [pc, #72]	; (8001b00 <run_foward_noline+0x60>)
 8001ab6:	4813      	ldr	r0, [pc, #76]	; (8001b04 <run_foward_noline+0x64>)
 8001ab8:	f003 fdef 	bl	800569a <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f001 fad3 	bl	8003068 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <run_foward_noline+0x60>)
 8001ac6:	480f      	ldr	r0, [pc, #60]	; (8001b04 <run_foward_noline+0x64>)
 8001ac8:	f003 fde7 	bl	800569a <HAL_UART_Receive_IT>
	uint16_t current = millies();
 8001acc:	f7fe fe4a 	bl	8000764 <millies>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	81fb      	strh	r3, [r7, #14]
	while(millies() - current < time)
 8001ad4:	e004      	b.n	8001ae0 <run_foward_noline+0x40>
	{
		pid_goc();
 8001ad6:	f7ff fbcf 	bl	8001278 <pid_goc>
	//	if(RUN_ABLE==1)// kiem tra nut
	//	{
		motor_foward_pid( speed  );
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fc34 	bl	8001348 <motor_foward_pid>
	while(millies() - current < time)
 8001ae0:	f7fe fe40 	bl	8000764 <millies>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	1ad2      	subs	r2, r2, r3
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3f2      	bcc.n	8001ad6 <run_foward_noline+0x36>
	//	}
	//	else
	//		stop();
	//	LCD_speed_plot();
	}
	stop();
 8001af0:	f000 fd54 	bl	800259c <stop>

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200001d8 	.word	0x200001d8
 8001b00:	200001d4 	.word	0x200001d4
 8001b04:	2000044c 	.word	0x2000044c

08001b08 <run_backward_noline>:

void run_backward_noline(int speed,uint16_t time)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
	PID_1 =0;
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <run_backward_noline+0x5c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4912      	ldr	r1, [pc, #72]	; (8001b68 <run_backward_noline+0x60>)
 8001b1e:	4813      	ldr	r0, [pc, #76]	; (8001b6c <run_backward_noline+0x64>)
 8001b20:	f003 fdbb 	bl	800569a <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f001 fa9f 	bl	8003068 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <run_backward_noline+0x60>)
 8001b2e:	480f      	ldr	r0, [pc, #60]	; (8001b6c <run_backward_noline+0x64>)
 8001b30:	f003 fdb3 	bl	800569a <HAL_UART_Receive_IT>
	uint16_t current = millies();
 8001b34:	f7fe fe16 	bl	8000764 <millies>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	81fb      	strh	r3, [r7, #14]
	while(millies() - current < time)
 8001b3c:	e004      	b.n	8001b48 <run_backward_noline+0x40>
	{
		pid_goc();
 8001b3e:	f7ff fb9b 	bl	8001278 <pid_goc>
	//	if(RUN_ABLE==1)// kiem tra nut
	//	{
		motor_backward_pid(speed);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fc4a 	bl	80013dc <motor_backward_pid>
	while(millies() - current < time)
 8001b48:	f7fe fe0c 	bl	8000764 <millies>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	1ad2      	subs	r2, r2, r3
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3f2      	bcc.n	8001b3e <run_backward_noline+0x36>
	//	}
	//	else
	//		stop();
	//	LCD_speed_plot();
	}
	stop();
 8001b58:	f000 fd20 	bl	800259c <stop>

}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200001d8 	.word	0x200001d8
 8001b68:	200001d4 	.word	0x200001d4
 8001b6c:	2000044c 	.word	0x2000044c

08001b70 <run_leftside_noline>:

void run_leftside_noline(int speed,uint16_t time)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
	PID_2 =0;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <run_leftside_noline+0x5c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	4912      	ldr	r1, [pc, #72]	; (8001bd0 <run_leftside_noline+0x60>)
 8001b86:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <run_leftside_noline+0x64>)
 8001b88:	f003 fd87 	bl	800569a <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f001 fa6b 	bl	8003068 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <run_leftside_noline+0x60>)
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <run_leftside_noline+0x64>)
 8001b98:	f003 fd7f 	bl	800569a <HAL_UART_Receive_IT>
	uint16_t current = millies();
 8001b9c:	f7fe fde2 	bl	8000764 <millies>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	81fb      	strh	r3, [r7, #14]
	while(millies() - current < time)
 8001ba4:	e004      	b.n	8001bb0 <run_leftside_noline+0x40>
	{
		pid_goc();
 8001ba6:	f7ff fb67 	bl	8001278 <pid_goc>
	//	if(RUN_ABLE==1)// kiem tra nut
	//	{
		motor_leftside_pid(speed);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fcaa 	bl	8001504 <motor_leftside_pid>
	while(millies() - current < time)
 8001bb0:	f7fe fdd8 	bl	8000764 <millies>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3f2      	bcc.n	8001ba6 <run_leftside_noline+0x36>
	//	}
	//	else
	//		stop();
	//	LCD_speed_plot();
	}
	stop();
 8001bc0:	f000 fcec 	bl	800259c <stop>

}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200003f4 	.word	0x200003f4
 8001bd0:	200001d4 	.word	0x200001d4
 8001bd4:	2000044c 	.word	0x2000044c

08001bd8 <run_rightside_noline>:

void run_rightside_noline(int speed,uint16_t time)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
	PID_2 =0;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <run_rightside_noline+0x5c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001bea:	2201      	movs	r2, #1
 8001bec:	4912      	ldr	r1, [pc, #72]	; (8001c38 <run_rightside_noline+0x60>)
 8001bee:	4813      	ldr	r0, [pc, #76]	; (8001c3c <run_rightside_noline+0x64>)
 8001bf0:	f003 fd53 	bl	800569a <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f001 fa37 	bl	8003068 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <run_rightside_noline+0x60>)
 8001bfe:	480f      	ldr	r0, [pc, #60]	; (8001c3c <run_rightside_noline+0x64>)
 8001c00:	f003 fd4b 	bl	800569a <HAL_UART_Receive_IT>
	uint16_t current = millies();
 8001c04:	f7fe fdae 	bl	8000764 <millies>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	81fb      	strh	r3, [r7, #14]
	while(millies() - current < time)
 8001c0c:	e004      	b.n	8001c18 <run_rightside_noline+0x40>
	{
		pid_goc();
 8001c0e:	f7ff fb33 	bl	8001278 <pid_goc>

	//	if(RUN_ABLE==1)// kiem tra nut
	//	{
		motor_rightside_pid(speed);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fc2c 	bl	8001470 <motor_rightside_pid>
	while(millies() - current < time)
 8001c18:	f7fe fda4 	bl	8000764 <millies>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	89fb      	ldrh	r3, [r7, #14]
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3f2      	bcc.n	8001c0e <run_rightside_noline+0x36>
	//	}
	//	else
	//		stop();
	//	LCD_speed_plot();
	}
	stop();
 8001c28:	f000 fcb8 	bl	800259c <stop>

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200003f4 	.word	0x200003f4
 8001c38:	200001d4 	.word	0x200001d4
 8001c3c:	2000044c 	.word	0x2000044c

08001c40 <nang_ha_led>:
void nang_ha_led(uint8_t nang_ha)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	if(nang_ha == 1)
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d104      	bne.n	8001c5a <nang_ha_led+0x1a>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,150);
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <nang_ha_led+0x30>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2296      	movs	r2, #150	; 0x96
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
	}else{__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,85);}
}
 8001c58:	e003      	b.n	8001c62 <nang_ha_led+0x22>
	}else{__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,85);}
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <nang_ha_led+0x30>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2255      	movs	r2, #85	; 0x55
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	200003a4 	.word	0x200003a4

08001c74 <cho_lenh>:
void cho_lenh(uint8_t lenh)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	while(!(values[0] != 0 && values[0] == lenh))
 8001c7e:	e002      	b.n	8001c86 <cho_lenh+0x12>
		{
		flag = 0;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <cho_lenh+0x34>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
	while(!(values[0] != 0 && values[0] == lenh))
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <cho_lenh+0x38>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f8      	beq.n	8001c80 <cho_lenh+0xc>
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <cho_lenh+0x38>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1f3      	bne.n	8001c80 <cho_lenh+0xc>
		}
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000340 	.word	0x20000340
 8001cac:	20000268 	.word	0x20000268

08001cb0 <bat_den>:



void bat_den(uint8_t state)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]

}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <main>:
static uint8_t khoi_dong(void);
//static void MX_USART2_UART_Init(void);
//static void MX_USART3_UART_Init(void);

int main(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	/*system*/
	HAL_Init();
 8001ccc:	f001 f95a 	bl	8002f84 <HAL_Init>
	SystemClock_Config();
 8001cd0:	f000 f8ae 	bl	8001e30 <SystemClock_Config>

	MX_TIM4_Init();
 8001cd4:	f7fe fcfa 	bl	80006cc <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8001cd8:	f7fe fdd6 	bl	8000888 <MX_USART1_UART_Init>
	key_pad_gpio();
 8001cdc:	f7fe fdaa 	bl	8000834 <key_pad_gpio>
	Line_PIN_Config();
 8001ce0:	f7fe fe8e 	bl	8000a00 <Line_PIN_Config>
	MX_GPIO_Init();
 8001ce4:	f000 f90e 	bl	8001f04 <MX_GPIO_Init>
	TIM5_Init();
 8001ce8:	f7fe fe26 	bl	8000938 <TIM5_Init>
	TIM3_Init();
 8001cec:	f7fe fc46 	bl	800057c <TIM3_Init>
	MX_TIM14_Init();
 8001cf0:	f7fe fd7a 	bl	80007e8 <MX_TIM14_Init>
	PWM_Init();
 8001cf4:	f000 fb64 	bl	80023c0 <PWM_Init>
//	khoi_dong();

		memset(&data, 0, sizeof(data));
 8001cf8:	223c      	movs	r2, #60	; 0x3c
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	481a      	ldr	r0, [pc, #104]	; (8001d68 <main+0xa0>)
 8001cfe:	f004 fd2a 	bl	8006756 <memset>
		stop();
 8001d02:	f000 fc4b 	bl	800259c <stop>
		HAL_Delay(2000);
 8001d06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d0a:	f001 f9ad 	bl	8003068 <HAL_Delay>
		HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4916      	ldr	r1, [pc, #88]	; (8001d6c <main+0xa4>)
 8001d12:	4817      	ldr	r0, [pc, #92]	; (8001d70 <main+0xa8>)
 8001d14:	f003 fcc1 	bl	800569a <HAL_UART_Receive_IT>
		run_foward_steps(Basic_speed,22320);
 8001d18:	f245 7130 	movw	r1, #22320	; 0x5730
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	f7ff fd01 	bl	8001724 <run_foward_steps>
		delay_ms(500);
 8001d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d26:	f7fe fd47 	bl	80007b8 <delay_ms>
		run_right_steps(Basic_speed,9000);
 8001d2a:	f242 3128 	movw	r1, #9000	; 0x2328
 8001d2e:	2064      	movs	r0, #100	; 0x64
 8001d30:	f7ff fd70 	bl	8001814 <run_right_steps>
		delay_ms(500);
 8001d34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d38:	f7fe fd3e 	bl	80007b8 <delay_ms>
		run_backward_steps(Basic_speed,22320);
 8001d3c:	f245 7130 	movw	r1, #22320	; 0x5730
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	f7ff fd29 	bl	8001798 <run_backward_steps>
		delay_ms(500);
 8001d46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4a:	f7fe fd35 	bl	80007b8 <delay_ms>
		run_left_steps(Basic_speed,9000);
 8001d4e:	f242 3128 	movw	r1, #9000	; 0x2328
 8001d52:	2064      	movs	r0, #100	; 0x64
 8001d54:	f7ff fd9c 	bl	8001890 <run_left_steps>
//		linefollow_leftside_time(Basic_speed,1200);
//		cho_lenh(4);
//		linefollow_rightside_time(Basic_speed,1200);
//		linefollow_backward(Basic_speed);
//		delay_ms(10000);
		run_turn_angle(20, 50);
 8001d58:	2132      	movs	r1, #50	; 0x32
 8001d5a:	2014      	movs	r0, #20
 8001d5c:	f7ff fc7a 	bl	8001654 <run_turn_angle>

		chienthuat_1();
 8001d60:	f000 fc4e 	bl	8002600 <chienthuat_1>


	while(1)
 8001d64:	e7fe      	b.n	8001d64 <main+0x9c>
 8001d66:	bf00      	nop
 8001d68:	200004a8 	.word	0x200004a8
 8001d6c:	200001d4 	.word	0x200001d4
 8001d70:	2000044c 	.word	0x2000044c

08001d74 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <HAL_UART_RxCpltCallback+0xa4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d144      	bne.n	8001e10 <HAL_UART_RxCpltCallback+0x9c>
	{

		if ((rcv_buffer == 'd') & (flag != 1))// nhan ki tu d ngung nhan
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_UART_RxCpltCallback+0xa8>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_UART_RxCpltCallback+0xac>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4013      	ands	r3, r2
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_UART_RxCpltCallback+0x52>
		{
			count = 0;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_UART_RxCpltCallback+0xb0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_UART_RxCpltCallback+0xac>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
			split_array();
 8001db6:	f7fe fd91 	bl	80008dc <split_array>
			HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4917      	ldr	r1, [pc, #92]	; (8001e1c <HAL_UART_RxCpltCallback+0xa8>)
 8001dbe:	481a      	ldr	r0, [pc, #104]	; (8001e28 <HAL_UART_RxCpltCallback+0xb4>)
 8001dc0:	f003 fc6b 	bl	800569a <HAL_UART_Receive_IT>

		}


	}
}
 8001dc4:	e024      	b.n	8001e10 <HAL_UART_RxCpltCallback+0x9c>
		}else if ((rcv_buffer != 'd') & (flag != 1))
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_UART_RxCpltCallback+0xa8>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_UART_RxCpltCallback+0xac>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d012      	beq.n	8001e10 <HAL_UART_RxCpltCallback+0x9c>
			data[count++] = rcv_buffer;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_UART_RxCpltCallback+0xb0>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	b2d1      	uxtb	r1, r2
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_UART_RxCpltCallback+0xb0>)
 8001df4:	7011      	strb	r1, [r2, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_UART_RxCpltCallback+0xa8>)
 8001dfa:	7819      	ldrb	r1, [r3, #0]
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_UART_RxCpltCallback+0xb8>)
 8001dfe:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001e00:	2201      	movs	r2, #1
 8001e02:	4906      	ldr	r1, [pc, #24]	; (8001e1c <HAL_UART_RxCpltCallback+0xa8>)
 8001e04:	4808      	ldr	r0, [pc, #32]	; (8001e28 <HAL_UART_RxCpltCallback+0xb4>)
 8001e06:	f003 fc48 	bl	800569a <HAL_UART_Receive_IT>
			flag = 0;
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_UART_RxCpltCallback+0xac>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	200001d4 	.word	0x200001d4
 8001e20:	20000340 	.word	0x20000340
 8001e24:	200004f4 	.word	0x200004f4
 8001e28:	2000044c 	.word	0x2000044c
 8001e2c:	200004a8 	.word	0x200004a8

08001e30 <SystemClock_Config>:
//	{
//
//	}
//}
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b094      	sub	sp, #80	; 0x50
 8001e34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	2230      	movs	r2, #48	; 0x30
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fc89 	bl	8006756 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <SystemClock_Config+0xcc>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <SystemClock_Config+0xcc>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	; 0x40
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <SystemClock_Config+0xcc>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <SystemClock_Config+0xd0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <SystemClock_Config+0xd0>)
 8001e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <SystemClock_Config+0xd0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e90:	2301      	movs	r3, #1
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e94:	2310      	movs	r3, #16
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8001ea4:	2390      	movs	r3, #144	; 0x90
 8001ea6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eac:	2304      	movs	r3, #4
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb0:	f107 0320 	add.w	r3, r7, #32
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fc6d 	bl	8003794 <HAL_RCC_OscConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0x94>
	{
	Error_Handler();
 8001ec0:	f000 f902 	bl	80020c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ed0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ed4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eda:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fece 	bl	8003c84 <HAL_RCC_ClockConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <SystemClock_Config+0xc2>
	{
	Error_Handler();
 8001eee:	f000 f8eb 	bl	80020c8 <Error_Handler>
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	3750      	adds	r7, #80	; 0x50
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40007000 	.word	0x40007000

08001f04 <MX_GPIO_Init>:




static void MX_GPIO_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
 *  E2   cong tac hanh trinh */



  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b61      	ldr	r3, [pc, #388]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a4e      	ldr	r2, [pc, #312]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <MX_GPIO_Init+0x1ac>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001fa6:	237f      	movs	r3, #127	; 0x7f
 8001fa8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	483d      	ldr	r0, [pc, #244]	; (80020b4 <MX_GPIO_Init+0x1b0>)
 8001fbe:	f001 fa1b 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001fc2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001fc6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12
  	  	  	  	  	  	  |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4837      	ldr	r0, [pc, #220]	; (80020b8 <MX_GPIO_Init+0x1b4>)
 8001fdc:	f001 fa0c 	bl	80033f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4831      	ldr	r0, [pc, #196]	; (80020bc <MX_GPIO_Init+0x1b8>)
 8001ff8:	f001 f9fe 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ffc:	23f0      	movs	r3, #240	; 0xf0
 8001ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200c:	2305      	movs	r3, #5
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	482a      	ldr	r0, [pc, #168]	; (80020c0 <MX_GPIO_Init+0x1bc>)
 8002018:	f001 f9ee 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800201c:	f24f 0304 	movw	r3, #61444	; 0xf004
 8002020:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4822      	ldr	r0, [pc, #136]	; (80020bc <MX_GPIO_Init+0x1b8>)
 8002032:	f001 f9e1 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002036:	f64f 7380 	movw	r3, #65408	; 0xff80
 800203a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	481a      	ldr	r0, [pc, #104]	; (80020b4 <MX_GPIO_Init+0x1b0>)
 800204c:	f001 f9d4 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 8002050:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002054:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4817      	ldr	r0, [pc, #92]	; (80020c4 <MX_GPIO_Init+0x1c0>)
 8002066:	f001 f9c7 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD15 PD2
                           PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_2
 800206a:	f64c 430f 	movw	r3, #52239	; 0xcc0f
 800206e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3 | GPIO_PIN_14 |GPIO_PIN_0 | GPIO_PIN_1 ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4810      	ldr	r0, [pc, #64]	; (80020c4 <MX_GPIO_Init+0x1c0>)
 8002084:	f001 f9b8 	bl	80033f8 <HAL_GPIO_Init>



  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <MX_GPIO_Init+0x1bc>)
 80020a2:	f001 f9a9 	bl	80033f8 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020c00 	.word	0x40020c00

080020c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020cc:	b672      	cpsid	i
}
 80020ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <Error_Handler+0x8>
	...

080020d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1,htim8,htim5;


void MX_TIM1_Init(void)//5kHz
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b096      	sub	sp, #88	; 0x58
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2220      	movs	r2, #32
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fb22 	bl	8006756 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002112:	4b50      	ldr	r3, [pc, #320]	; (8002254 <MX_TIM1_Init+0x180>)
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <MX_TIM1_Init+0x184>)
 8002116:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002118:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <MX_TIM1_Init+0x180>)
 800211a:	2247      	movs	r2, #71	; 0x47
 800211c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <MX_TIM1_Init+0x180>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <MX_TIM1_Init+0x180>)
 8002126:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800212a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <MX_TIM1_Init+0x180>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002132:	4b48      	ldr	r3, [pc, #288]	; (8002254 <MX_TIM1_Init+0x180>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002138:	4b46      	ldr	r3, [pc, #280]	; (8002254 <MX_TIM1_Init+0x180>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800213e:	4845      	ldr	r0, [pc, #276]	; (8002254 <MX_TIM1_Init+0x180>)
 8002140:	f001 ff80 	bl	8004044 <HAL_TIM_Base_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800214a:	f7ff ffbd 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800214e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002158:	4619      	mov	r1, r3
 800215a:	483e      	ldr	r0, [pc, #248]	; (8002254 <MX_TIM1_Init+0x180>)
 800215c:	f002 fd6e 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002166:	f7ff ffaf 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800216a:	483a      	ldr	r0, [pc, #232]	; (8002254 <MX_TIM1_Init+0x180>)
 800216c:	f002 f8eb 	bl	8004346 <HAL_TIM_PWM_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002176:	f7ff ffa7 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002186:	4619      	mov	r1, r3
 8002188:	4832      	ldr	r0, [pc, #200]	; (8002254 <MX_TIM1_Init+0x180>)
 800218a:	f003 f957 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002194:	f7ff ff98 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002198:	2360      	movs	r3, #96	; 0x60
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4825      	ldr	r0, [pc, #148]	; (8002254 <MX_TIM1_Init+0x180>)
 80021be:	f002 fc7b 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80021c8:	f7ff ff7e 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	2204      	movs	r2, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	481f      	ldr	r0, [pc, #124]	; (8002254 <MX_TIM1_Init+0x180>)
 80021d6:	f002 fc6f 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80021e0:	f7ff ff72 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	2208      	movs	r2, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	4819      	ldr	r0, [pc, #100]	; (8002254 <MX_TIM1_Init+0x180>)
 80021ee:	f002 fc63 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80021f8:	f7ff ff66 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	220c      	movs	r2, #12
 8002202:	4619      	mov	r1, r3
 8002204:	4813      	ldr	r0, [pc, #76]	; (8002254 <MX_TIM1_Init+0x180>)
 8002206:	f002 fc57 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002210:	f7ff ff5a 	bl	80020c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4807      	ldr	r0, [pc, #28]	; (8002254 <MX_TIM1_Init+0x180>)
 8002238:	f003 f97c 	bl	8005534 <HAL_TIMEx_ConfigBreakDeadTime>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002242:	f7ff ff41 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002246:	4803      	ldr	r0, [pc, #12]	; (8002254 <MX_TIM1_Init+0x180>)
 8002248:	f000 fb54 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 800224c:	bf00      	nop
 800224e:	3758      	adds	r7, #88	; 0x58
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000660 	.word	0x20000660
 8002258:	40010000 	.word	0x40010000

0800225c <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b092      	sub	sp, #72	; 0x48
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002262:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	615a      	str	r2, [r3, #20]
 800227e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2220      	movs	r2, #32
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f004 fa65 	bl	8006756 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800228c:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <MX_TIM8_Init+0x15c>)
 800228e:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <MX_TIM8_Init+0x160>)
 8002290:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <MX_TIM8_Init+0x15c>)
 8002294:	220f      	movs	r2, #15
 8002296:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <MX_TIM8_Init+0x15c>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 400;
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80022a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a6:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80022b8:	483f      	ldr	r0, [pc, #252]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80022ba:	f002 f844 	bl	8004346 <HAL_TIM_PWM_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80022c4:	f7ff ff00 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80022c8:	483b      	ldr	r0, [pc, #236]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80022ca:	f001 ffe3 	bl	8004294 <HAL_TIM_OC_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80022d4:	f7ff fef8 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022e4:	4619      	mov	r1, r3
 80022e6:	4834      	ldr	r0, [pc, #208]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80022e8:	f003 f8a8 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80022f2:	f7ff fee9 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f6:	2360      	movs	r3, #96	; 0x60
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002302:	2300      	movs	r3, #0
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	2200      	movs	r2, #0
 8002318:	4619      	mov	r1, r3
 800231a:	4827      	ldr	r0, [pc, #156]	; (80023b8 <MX_TIM8_Init+0x15c>)
 800231c:	f002 fbcc 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 8002326:	f7ff fecf 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	2204      	movs	r2, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4821      	ldr	r0, [pc, #132]	; (80023b8 <MX_TIM8_Init+0x15c>)
 8002334:	f002 fbc0 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 800233e:	f7ff fec3 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	2208      	movs	r2, #8
 8002348:	4619      	mov	r1, r3
 800234a:	481b      	ldr	r0, [pc, #108]	; (80023b8 <MX_TIM8_Init+0x15c>)
 800234c:	f002 fbb4 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002356:	f7ff feb7 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800235e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002362:	220c      	movs	r2, #12
 8002364:	4619      	mov	r1, r3
 8002366:	4814      	ldr	r0, [pc, #80]	; (80023b8 <MX_TIM8_Init+0x15c>)
 8002368:	f002 fb4a 	bl	8004a00 <HAL_TIM_OC_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 8002372:	f7ff fea9 	bl	80020c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800238a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4807      	ldr	r0, [pc, #28]	; (80023b8 <MX_TIM8_Init+0x15c>)
 800239a:	f003 f8cb 	bl	8005534 <HAL_TIMEx_ConfigBreakDeadTime>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 80023a4:	f7ff fe90 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <MX_TIM8_Init+0x15c>)
 80023aa:	f000 faa3 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 80023ae:	bf00      	nop
 80023b0:	3748      	adds	r7, #72	; 0x48
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000618 	.word	0x20000618
 80023bc:	40010400 	.word	0x40010400

080023c0 <PWM_Init>:




void PWM_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 80023c4:	f7ff fe86 	bl	80020d4 <MX_TIM1_Init>
	MX_TIM8_Init();
 80023c8:	f7ff ff48 	bl	800225c <MX_TIM8_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80023cc:	2100      	movs	r1, #0
 80023ce:	4810      	ldr	r0, [pc, #64]	; (8002410 <PWM_Init+0x50>)
 80023d0:	f002 f808 	bl	80043e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80023d4:	2104      	movs	r1, #4
 80023d6:	480e      	ldr	r0, [pc, #56]	; (8002410 <PWM_Init+0x50>)
 80023d8:	f002 f804 	bl	80043e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80023dc:	2108      	movs	r1, #8
 80023de:	480c      	ldr	r0, [pc, #48]	; (8002410 <PWM_Init+0x50>)
 80023e0:	f002 f800 	bl	80043e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80023e4:	210c      	movs	r1, #12
 80023e6:	480a      	ldr	r0, [pc, #40]	; (8002410 <PWM_Init+0x50>)
 80023e8:	f001 fffc 	bl	80043e4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80023ec:	2100      	movs	r1, #0
 80023ee:	4809      	ldr	r0, [pc, #36]	; (8002414 <PWM_Init+0x54>)
 80023f0:	f001 fff8 	bl	80043e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80023f4:	2104      	movs	r1, #4
 80023f6:	4807      	ldr	r0, [pc, #28]	; (8002414 <PWM_Init+0x54>)
 80023f8:	f001 fff4 	bl	80043e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80023fc:	2108      	movs	r1, #8
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <PWM_Init+0x54>)
 8002400:	f001 fff0 	bl	80043e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002404:	210c      	movs	r1, #12
 8002406:	4803      	ldr	r0, [pc, #12]	; (8002414 <PWM_Init+0x54>)
 8002408:	f001 ffec 	bl	80043e4 <HAL_TIM_PWM_Start>
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);

}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000660 	.word	0x20000660
 8002414:	20000618 	.word	0x20000618

08002418 <st_motor1>:

void st_motor1(int speed)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);}
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f8d5 	bl	80025d0 <speed_shift>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	dd05      	ble.n	8002438 <st_motor1+0x20>
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	480f      	ldr	r0, [pc, #60]	; (8002470 <st_motor1+0x58>)
 8002432:	f001 f995 	bl	8003760 <HAL_GPIO_WritePin>
 8002436:	e00a      	b.n	800244e <st_motor1+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);}
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f8c9 	bl	80025d0 <speed_shift>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	da04      	bge.n	800244e <st_motor1+0x36>
 8002444:	2200      	movs	r2, #0
 8002446:	2101      	movs	r1, #1
 8002448:	4809      	ldr	r0, [pc, #36]	; (8002470 <st_motor1+0x58>)
 800244a:	f001 f989 	bl	8003760 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(speed_shift(speed))-12);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f8be 	bl	80025d0 <speed_shift>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	bfb8      	it	lt
 800245a:	425b      	neglt	r3, r3
 800245c:	f1a3 020c 	sub.w	r2, r3, #12
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <st_motor1+0x5c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020c00 	.word	0x40020c00
 8002474:	20000660 	.word	0x20000660

08002478 <st_motor2>:

void st_motor2(int speed)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);}
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f8a5 	bl	80025d0 <speed_shift>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	dd06      	ble.n	800249a <st_motor2+0x22>
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002492:	4810      	ldr	r0, [pc, #64]	; (80024d4 <st_motor2+0x5c>)
 8002494:	f001 f964 	bl	8003760 <HAL_GPIO_WritePin>
 8002498:	e00b      	b.n	80024b2 <st_motor2+0x3a>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);}
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f898 	bl	80025d0 <speed_shift>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da05      	bge.n	80024b2 <st_motor2+0x3a>
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ac:	4809      	ldr	r0, [pc, #36]	; (80024d4 <st_motor2+0x5c>)
 80024ae:	f001 f957 	bl	8003760 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,abs(speed_shift(speed))-12);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f88c 	bl	80025d0 <speed_shift>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bfb8      	it	lt
 80024be:	425b      	neglt	r3, r3
 80024c0:	f1a3 020c 	sub.w	r2, r3, #12
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <st_motor2+0x60>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38

}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40020000 	.word	0x40020000
 80024d8:	20000660 	.word	0x20000660

080024dc <st_motor3>:

void st_motor3(int speed)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);}
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f873 	bl	80025d0 <speed_shift>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	dd05      	ble.n	80024fc <st_motor3+0x20>
 80024f0:	2201      	movs	r2, #1
 80024f2:	2108      	movs	r1, #8
 80024f4:	480f      	ldr	r0, [pc, #60]	; (8002534 <st_motor3+0x58>)
 80024f6:	f001 f933 	bl	8003760 <HAL_GPIO_WritePin>
 80024fa:	e00a      	b.n	8002512 <st_motor3+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);}
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f867 	bl	80025d0 <speed_shift>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	da04      	bge.n	8002512 <st_motor3+0x36>
 8002508:	2200      	movs	r2, #0
 800250a:	2108      	movs	r1, #8
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <st_motor3+0x58>)
 800250e:	f001 f927 	bl	8003760 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,abs(speed_shift(speed))-12);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f85c 	bl	80025d0 <speed_shift>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	bfb8      	it	lt
 800251e:	425b      	neglt	r3, r3
 8002520:	f1a3 020c 	sub.w	r2, r3, #12
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <st_motor3+0x5c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40020c00 	.word	0x40020c00
 8002538:	20000660 	.word	0x20000660

0800253c <st_motor4>:

void st_motor4(int speed)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);}
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f843 	bl	80025d0 <speed_shift>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	dd05      	ble.n	800255c <st_motor4+0x20>
 8002550:	2201      	movs	r2, #1
 8002552:	2102      	movs	r1, #2
 8002554:	480f      	ldr	r0, [pc, #60]	; (8002594 <st_motor4+0x58>)
 8002556:	f001 f903 	bl	8003760 <HAL_GPIO_WritePin>
 800255a:	e00a      	b.n	8002572 <st_motor4+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);}
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f837 	bl	80025d0 <speed_shift>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	da04      	bge.n	8002572 <st_motor4+0x36>
 8002568:	2200      	movs	r2, #0
 800256a:	2102      	movs	r1, #2
 800256c:	4809      	ldr	r0, [pc, #36]	; (8002594 <st_motor4+0x58>)
 800256e:	f001 f8f7 	bl	8003760 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,abs(speed_shift(speed))-12);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f82c 	bl	80025d0 <speed_shift>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfb8      	it	lt
 800257e:	425b      	neglt	r3, r3
 8002580:	f1a3 020c 	sub.w	r2, r3, #12
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <st_motor4+0x5c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40

}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40020c00 	.word	0x40020c00
 8002598:	20000660 	.word	0x20000660

0800259c <stop>:
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,8);
}
void stop(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,12);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <stop+0x30>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	220c      	movs	r2, #12
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,12);
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <stop+0x30>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	220c      	movs	r2, #12
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,12);
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <stop+0x30>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	220c      	movs	r2, #12
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,12);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <stop+0x30>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	220c      	movs	r2, #12
 80025be:	639a      	str	r2, [r3, #56]	; 0x38

}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000660 	.word	0x20000660

080025d0 <speed_shift>:
///////////////////////////////////////Loai truong hop khoa cung dong co/////////////////////////////////

int speed_shift(int speed)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	if(speed <0){return (speed - 12);}
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da02      	bge.n	80025e4 <speed_shift+0x14>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3b0c      	subs	r3, #12
 80025e2:	e007      	b.n	80025f4 <speed_shift+0x24>
	if(speed >0){return (speed + 12);}
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	dd02      	ble.n	80025f0 <speed_shift+0x20>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	330c      	adds	r3, #12
 80025ee:	e001      	b.n	80025f4 <speed_shift+0x24>
	else {return (speed + 12);}
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	330c      	adds	r3, #12

}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <chienthuat_1>:
#include "move.h"

void chienthuat_1(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	///0
//	run_foward_steps(Fast_speed, 1000);

	run_foward_count(Basic_speed, 1 , 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2101      	movs	r1, #1
 8002608:	2064      	movs	r0, #100	; 0x64
 800260a:	f7ff f97f 	bl	800190c <run_foward_count>
	//1
	run_foward_steps(Fast_speed, 1000);
 800260e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002612:	20f0      	movs	r0, #240	; 0xf0
 8002614:	f7ff f886 	bl	8001724 <run_foward_steps>

	run_foward_count(Basic_speed, 2 , 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2102      	movs	r1, #2
 800261c:	2064      	movs	r0, #100	; 0x64
 800261e:	f7ff f975 	bl	800190c <run_foward_count>
	//2
	cho_lenh(1);
 8002622:	2001      	movs	r0, #1
 8002624:	f7ff fb26 	bl	8001c74 <cho_lenh>

	run_foward_steps(Basic_speed, 1);//chay doan nho den gan con doc
 8002628:	2101      	movs	r1, #1
 800262a:	2064      	movs	r0, #100	; 0x64
 800262c:	f7ff f87a 	bl	8001724 <run_foward_steps>

	nang_ha_led(nang);
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fb05 	bl	8001c40 <nang_ha_led>

	chay_doc(len_doc_speed,tien,1000);//len doc
 8002636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800263a:	2101      	movs	r1, #1
 800263c:	2096      	movs	r0, #150	; 0x96
 800263e:	f7ff f9fd 	bl	8001a3c <chay_doc>

	bat_den(on);
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff fb34 	bl	8001cb0 <bat_den>

	cho_lenh(2);
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff fb13 	bl	8001c74 <cho_lenh>

	chay_doc(xuong_doc_speed,lui,1000);//xuong doc
 800264e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002652:	2102      	movs	r1, #2
 8002654:	2046      	movs	r0, #70	; 0x46
 8002656:	f7ff f9f1 	bl	8001a3c <chay_doc>

	bat_den(off);
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff fb28 	bl	8001cb0 <bat_den>

	nang_ha_led(ha);//ha led
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff faed 	bl	8001c40 <nang_ha_led>
//
//	run_foward_count(Basic_speed, 3 , 0);
//	//3
//	run_foward_steps(Fast_speed, 1000);

	run_foward_count(Basic_speed, 4 , 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2104      	movs	r1, #4
 800266a:	2064      	movs	r0, #100	; 0x64
 800266c:	f7ff f94e 	bl	800190c <run_foward_count>
	//4
//	run_right_steps(Fast_speed, 1000);

	cho_lenh(1);
 8002670:	2001      	movs	r0, #1
 8002672:	f7ff faff 	bl	8001c74 <cho_lenh>

	nang_ha_led(nang);
 8002676:	2001      	movs	r0, #1
 8002678:	f7ff fae2 	bl	8001c40 <nang_ha_led>

	chay_doc(len_doc_speed,phai,1000);//len doc phai
 800267c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002680:	2104      	movs	r1, #4
 8002682:	2096      	movs	r0, #150	; 0x96
 8002684:	f7ff f9da 	bl	8001a3c <chay_doc>

	bat_den(on);
 8002688:	2001      	movs	r0, #1
 800268a:	f7ff fb11 	bl	8001cb0 <bat_den>

	cho_lenh(2);
 800268e:	2002      	movs	r0, #2
 8002690:	f7ff faf0 	bl	8001c74 <cho_lenh>

	chay_doc(xuong_doc_speed,phai,1000);//xuong doc
 8002694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002698:	2104      	movs	r1, #4
 800269a:	2046      	movs	r0, #70	; 0x46
 800269c:	f7ff f9ce 	bl	8001a3c <chay_doc>

	bat_den(off);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff fb05 	bl	8001cb0 <bat_den>

	nang_ha_led(ha);//ha led
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7ff faca 	bl	8001c40 <nang_ha_led>

//	run_right_steps(Fast_speed, 1000);

	run_rightside_count(Basic_speed, 5 , 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2105      	movs	r1, #5
 80026b0:	2064      	movs	r0, #100	; 0x64
 80026b2:	f7ff f993 	bl	80019dc <run_rightside_count>
	//5

	run_backward_steps(Basic_speed, 1000);
 80026b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026ba:	2064      	movs	r0, #100	; 0x64
 80026bc:	f7ff f86c 	bl	8001798 <run_backward_steps>

	run_backward_count(Basic_speed, 0 , 1);
 80026c0:	2201      	movs	r2, #1
 80026c2:	2100      	movs	r1, #0
 80026c4:	2064      	movs	r0, #100	; 0x64
 80026c6:	f7ff f955 	bl	8001974 <run_backward_count>
	//nga4-1
//	run_backward_steps(Basic_speed, 1000);

	cho_lenh(1);
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7ff fad2 	bl	8001c74 <cho_lenh>

	nang_ha_led(nang);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff fab5 	bl	8001c40 <nang_ha_led>

	chay_doc(len_doc_speed,lui,1000);
 80026d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026da:	2102      	movs	r1, #2
 80026dc:	2096      	movs	r0, #150	; 0x96
 80026de:	f7ff f9ad 	bl	8001a3c <chay_doc>

	bat_den(on);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f7ff fae4 	bl	8001cb0 <bat_den>

	cho_lenh(2);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f7ff fac3 	bl	8001c74 <cho_lenh>

	chay_doc(xuong_doc_speed,tien,1000);
 80026ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f2:	2101      	movs	r1, #1
 80026f4:	2046      	movs	r0, #70	; 0x46
 80026f6:	f7ff f9a1 	bl	8001a3c <chay_doc>

	bat_den(off);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7ff fad8 	bl	8001cb0 <bat_den>

	run_foward_steps(Basic_speed, 1000);
 8002700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002704:	2064      	movs	r0, #100	; 0x64
 8002706:	f7ff f80d 	bl	8001724 <run_foward_steps>

	run_foward_count(Basic_speed, 0 , 2);
 800270a:	2202      	movs	r2, #2
 800270c:	2100      	movs	r1, #0
 800270e:	2064      	movs	r0, #100	; 0x64
 8002710:	f7ff f8fc 	bl	800190c <run_foward_count>
	//nga4-2
	run_right_steps(Basic_speed, 1000);
 8002714:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f7ff f87b 	bl	8001814 <run_right_steps>

	chay_doc(len_doc_speed, phai, 1000);
 800271e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002722:	2104      	movs	r1, #4
 8002724:	2096      	movs	r0, #150	; 0x96
 8002726:	f7ff f989 	bl	8001a3c <chay_doc>

	//cho lenh ban bong
	//done!!
	//while(1);
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}

0800272e <sign>:
	HAL_Delay(10);
}


int  sign(int number)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
	int dau;
	if(number > 0)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	dd02      	ble.n	8002742 <sign+0x14>
	{
		dau = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e008      	b.n	8002754 <sign+0x26>
	}
	else if(number < 0)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	da03      	bge.n	8002750 <sign+0x22>
	{
		dau = -1;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e001      	b.n	8002754 <sign+0x26>
	}else dau = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
	return dau;
 8002754:	68fb      	ldr	r3, [r7, #12]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_MspInit>:




void HAL_MspInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_MspInit+0x4c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_MspInit+0x4c>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_MspInit+0x4c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_MspInit+0x4c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_MspInit+0x4c>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_MspInit+0x4c>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]

}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a36      	ldr	r2, [pc, #216]	; (800289c <HAL_TIM_Base_MspInit+0xe8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10e      	bne.n	80027e4 <HAL_TIM_Base_MspInit+0x30>
  {

    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
//    HAL_NVIC_EnableIRQ(TIM4_IRQn);
//    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 1);

  }

}
 80027e2:	e056      	b.n	8002892 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d10e      	bne.n	800280c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
}
 800280a:	e042      	b.n	8002892 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]
}
 8002832:	e02e      	b.n	8002892 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <HAL_TIM_Base_MspInit+0xf4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d116      	bne.n	800286c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800285a:	201e      	movs	r0, #30
 800285c:	f000 fd1f 	bl	800329e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 1);
 8002860:	2201      	movs	r2, #1
 8002862:	2105      	movs	r1, #5
 8002864:	201e      	movs	r0, #30
 8002866:	f000 fcfe 	bl	8003266 <HAL_NVIC_SetPriority>
}
 800286a:	e012      	b.n	8002892 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM14)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_TIM_Base_MspInit+0xf8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10d      	bne.n	8002892 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	bf00      	nop
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40002000 	.word	0x40002000

080028b0 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_TIM_PWM_MspInit+0x3c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10d      	bne.n	80028de <HAL_TIM_PWM_MspInit+0x2e>
  {

    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_TIM_PWM_MspInit+0x40>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_TIM_PWM_MspInit+0x40>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_TIM_PWM_MspInit+0x40>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

  }

}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40000c00 	.word	0x40000c00
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b090      	sub	sp, #64	; 0x40
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a7f      	ldr	r2, [pc, #508]	; (8002b10 <HAL_TIM_MspPostInit+0x21c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d12d      	bne.n	8002972 <HAL_TIM_MspPostInit+0x7e>
  {

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
 800291a:	4b7e      	ldr	r3, [pc, #504]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a7d      	ldr	r2, [pc, #500]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b7b      	ldr	r3, [pc, #492]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002932:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002944:	2301      	movs	r3, #1
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294c:	4619      	mov	r1, r3
 800294e:	4872      	ldr	r0, [pc, #456]	; (8002b18 <HAL_TIM_MspPostInit+0x224>)
 8002950:	f000 fd52 	bl	80033f8 <HAL_GPIO_Init>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	4b6e      	ldr	r3, [pc, #440]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	4a6d      	ldr	r2, [pc, #436]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6453      	str	r3, [r2, #68]	; 0x44
 8002964:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        __HAL_RCC_TIM8_CLK_ENABLE();
  }


}
 8002970:	e0ca      	b.n	8002b08 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d13d      	bne.n	80029f8 <HAL_TIM_MspPostInit+0x104>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	4b64      	ldr	r3, [pc, #400]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a63      	ldr	r2, [pc, #396]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a5c      	ldr	r2, [pc, #368]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
 80029a8:	4b5a      	ldr	r3, [pc, #360]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029c6:	2301      	movs	r3, #1
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ce:	4619      	mov	r1, r3
 80029d0:	4851      	ldr	r0, [pc, #324]	; (8002b18 <HAL_TIM_MspPostInit+0x224>)
 80029d2:	f000 fd11 	bl	80033f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d6:	2308      	movs	r3, #8
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029e6:	2301      	movs	r3, #1
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	484a      	ldr	r0, [pc, #296]	; (8002b1c <HAL_TIM_MspPostInit+0x228>)
 80029f2:	f000 fd01 	bl	80033f8 <HAL_GPIO_Init>
}
 80029f6:	e087      	b.n	8002b08 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <HAL_TIM_MspPostInit+0x22c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12c      	bne.n	8002a5c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a42      	ldr	r2, [pc, #264]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;//|GPIO_PIN_8|GPIO_PIN_9;
 8002a1e:	2330      	movs	r3, #48	; 0x30
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a36:	4619      	mov	r1, r3
 8002a38:	4838      	ldr	r0, [pc, #224]	; (8002b1c <HAL_TIM_MspPostInit+0x228>)
 8002a3a:	f000 fcdd 	bl	80033f8 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a33      	ldr	r2, [pc, #204]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
}
 8002a5a:	e055      	b.n	8002b08 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM5)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a30      	ldr	r2, [pc, #192]	; (8002b24 <HAL_TIM_MspPostInit+0x230>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d11e      	bne.n	8002aa4 <HAL_TIM_MspPostInit+0x1b0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a82:	2303      	movs	r3, #3
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a92:	2302      	movs	r3, #2
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481e      	ldr	r0, [pc, #120]	; (8002b18 <HAL_TIM_MspPostInit+0x224>)
 8002a9e:	f000 fcab 	bl	80033f8 <HAL_GPIO_Init>
}
 8002aa2:	e031      	b.n	8002b08 <HAL_TIM_MspPostInit+0x214>
    else if(htim->Instance==TIM8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_TIM_MspPostInit+0x234>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12c      	bne.n	8002b08 <HAL_TIM_MspPostInit+0x214>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002aca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002adc:	2303      	movs	r3, #3
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4811      	ldr	r0, [pc, #68]	; (8002b2c <HAL_TIM_MspPostInit+0x238>)
 8002ae8:	f000 fc86 	bl	80033f8 <HAL_GPIO_Init>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	6453      	str	r3, [r2, #68]	; 0x44
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_TIM_MspPostInit+0x220>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	3740      	adds	r7, #64	; 0x40
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000c00 	.word	0x40000c00
 8002b28:	40010400 	.word	0x40010400
 8002b2c:	40020800 	.word	0x40020800

08002b30 <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08e      	sub	sp, #56	; 0x38
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_UART_MspInit+0x17c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d134      	bne.n	8002bbc <HAL_UART_MspInit+0x8c>
  {
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002b5c:	f043 0310 	orr.w	r3, r3, #16
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b8a:	23c0      	movs	r3, #192	; 0xc0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4843      	ldr	r0, [pc, #268]	; (8002cb4 <HAL_UART_MspInit+0x184>)
 8002ba6:	f000 fc27 	bl	80033f8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8002baa:	2201      	movs	r2, #1
 8002bac:	2101      	movs	r1, #1
 8002bae:	2025      	movs	r0, #37	; 0x25
 8002bb0:	f000 fb59 	bl	8003266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb4:	2025      	movs	r0, #37	; 0x25
 8002bb6:	f000 fb72 	bl	800329e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);

  }

}
 8002bba:	e073      	b.n	8002ca4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <HAL_UART_MspInit+0x188>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d134      	bne.n	8002c30 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a38      	ldr	r2, [pc, #224]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a31      	ldr	r2, [pc, #196]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bfe:	230c      	movs	r3, #12
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c0e:	2307      	movs	r3, #7
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	4828      	ldr	r0, [pc, #160]	; (8002cbc <HAL_UART_MspInit+0x18c>)
 8002c1a:	f000 fbed 	bl	80033f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	2026      	movs	r0, #38	; 0x26
 8002c24:	f000 fb1f 	bl	8003266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c28:	2026      	movs	r0, #38	; 0x26
 8002c2a:	f000 fb38 	bl	800329e <HAL_NVIC_EnableIRQ>
}
 8002c2e:	e039      	b.n	8002ca4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_UART_MspInit+0x190>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d134      	bne.n	8002ca4 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_UART_MspInit+0x180>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c84:	2307      	movs	r3, #7
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4809      	ldr	r0, [pc, #36]	; (8002cb4 <HAL_UART_MspInit+0x184>)
 8002c90:	f000 fbb2 	bl	80033f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	2027      	movs	r0, #39	; 0x27
 8002c9a:	f000 fae4 	bl	8003266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c9e:	2027      	movs	r0, #39	; 0x27
 8002ca0:	f000 fafd 	bl	800329e <HAL_NVIC_EnableIRQ>
}
 8002ca4:	bf00      	nop
 8002ca6:	3738      	adds	r7, #56	; 0x38
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40011000 	.word	0x40011000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40004400 	.word	0x40004400
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40004800 	.word	0x40004800

08002cc4 <NMI_Handler>:
extern UART_HandleTypeDef huart3;

extern TIM_HandleTypeDef  htim3;
extern TIM_HandleTypeDef  htim4;
void NMI_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <NMI_Handler+0x4>
	...

08002ccc <TIM4_IRQHandler>:
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

void TIM4_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <TIM4_IRQHandler+0x10>)
 8002cd2:	f001 fd8d 	bl	80047f0 <HAL_TIM_IRQHandler>
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200001dc 	.word	0x200001dc

08002ce0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <TIM3_IRQHandler+0x10>)
 8002ce6:	f001 fd83 	bl	80047f0 <HAL_TIM_IRQHandler>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200003a4 	.word	0x200003a4

08002cf4 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <HardFault_Handler+0x4>

08002cfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cfe:	e7fe      	b.n	8002cfe <MemManage_Handler+0x4>

08002d00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <BusFault_Handler+0x4>

08002d06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <UsageFault_Handler+0x4>

08002d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d3a:	f000 f975 	bl	8003028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <USART1_IRQHandler+0x10>)
 8002d4a:	f002 fcd7 	bl	80056fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	2000044c 	.word	0x2000044c

08002d58 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <USART2_IRQHandler+0x10>)
 8002d5e:	f002 fccd 	bl	80056fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000548 	.word	0x20000548

08002d6c <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <USART3_IRQHandler+0x10>)
 8002d72:	f002 fcc3 	bl	80056fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000224 	.word	0x20000224

08002d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return 1;
 8002d84:	2301      	movs	r3, #1
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <_kill>:

int _kill(int pid, int sig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d9a:	f003 fd87 	bl	80068ac <__errno>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2216      	movs	r2, #22
 8002da2:	601a      	str	r2, [r3, #0]
  return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_exit>:

void _exit (int status)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ffe7 	bl	8002d90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dc2:	e7fe      	b.n	8002dc2 <_exit+0x12>

08002dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e00a      	b.n	8002dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dd6:	f3af 8000 	nop.w
 8002dda:	4601      	mov	r1, r0
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	60ba      	str	r2, [r7, #8]
 8002de2:	b2ca      	uxtb	r2, r1
 8002de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	3301      	adds	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	dbf0      	blt.n	8002dd6 <_read+0x12>
  }

  return len;
 8002df4:	687b      	ldr	r3, [r7, #4]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e009      	b.n	8002e24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	60ba      	str	r2, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3301      	adds	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	dbf1      	blt.n	8002e10 <_write+0x12>
  }
  return len;
 8002e2c:	687b      	ldr	r3, [r7, #4]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <_close>:

int _close(int file)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e5e:	605a      	str	r2, [r3, #4]
  return 0;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_isatty>:

int _isatty(int file)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <_sbrk+0x5c>)
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <_sbrk+0x60>)
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <_sbrk+0x64>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <_sbrk+0x64>)
 8002ebe:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <_sbrk+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <_sbrk+0x64>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d207      	bcs.n	8002ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed0:	f003 fcec 	bl	80068ac <__errno>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	e009      	b.n	8002ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <_sbrk+0x64>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <_sbrk+0x64>)
 8002ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20020000 	.word	0x20020000
 8002f00:	00000400 	.word	0x00000400
 8002f04:	20000084 	.word	0x20000084
 8002f08:	200006b0 	.word	0x200006b0

08002f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <SystemInit+0x20>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <SystemInit+0x20>)
 8002f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f36:	490e      	ldr	r1, [pc, #56]	; (8002f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f38:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4a:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f4c:	4c0b      	ldr	r4, [pc, #44]	; (8002f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f5a:	f7ff ffd7 	bl	8002f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5e:	f003 fcab 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f62:	f7fe feb1 	bl	8001cc8 <main>
  bx  lr    
 8002f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002f74:	08008144 	.word	0x08008144
  ldr r2, =_sbss
 8002f78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002f7c:	200006b0 	.word	0x200006b0

08002f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f80:	e7fe      	b.n	8002f80 <ADC_IRQHandler>
	...

08002f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <HAL_Init+0x40>)
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_Init+0x40>)
 8002f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <HAL_Init+0x40>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fac:	2003      	movs	r0, #3
 8002fae:	f000 f94f 	bl	8003250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb2:	200f      	movs	r0, #15
 8002fb4:	f000 f808 	bl	8002fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb8:	f7ff fbd4 	bl	8002764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00

08002fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x54>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_InitTick+0x58>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f967 	bl	80032ba <HAL_SYSTICK_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00e      	b.n	8003014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d80a      	bhi.n	8003012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	f04f 30ff 	mov.w	r0, #4294967295
 8003004:	f000 f92f 	bl	8003266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <HAL_InitTick+0x5c>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000000 	.word	0x20000000
 8003020:	20000008 	.word	0x20000008
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x20>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_IncTick+0x24>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4413      	add	r3, r2
 8003038:	4a04      	ldr	r2, [pc, #16]	; (800304c <HAL_IncTick+0x24>)
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000008 	.word	0x20000008
 800304c:	200006ac 	.word	0x200006ac

08003050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return uwTick;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_GetTick+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200006ac 	.word	0x200006ac

08003068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff ffee 	bl	8003050 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d005      	beq.n	800308e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_Delay+0x44>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800308e:	bf00      	nop
 8003090:	f7ff ffde 	bl	8003050 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	429a      	cmp	r2, r3
 800309e:	d8f7      	bhi.n	8003090 <HAL_Delay+0x28>
  {
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000008 	.word	0x20000008

080030b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <__NVIC_SetPriorityGrouping+0x44>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030cc:	4013      	ands	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e2:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <__NVIC_SetPriorityGrouping+0x44>)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	60d3      	str	r3, [r2, #12]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <__NVIC_GetPriorityGrouping+0x18>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	f003 0307 	and.w	r3, r3, #7
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	2b00      	cmp	r3, #0
 8003124:	db0b      	blt.n	800313e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	4907      	ldr	r1, [pc, #28]	; (800314c <__NVIC_EnableIRQ+0x38>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2001      	movs	r0, #1
 8003136:	fa00 f202 	lsl.w	r2, r0, r2
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000e100 	.word	0xe000e100

08003150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	2b00      	cmp	r3, #0
 8003162:	db0a      	blt.n	800317a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	490c      	ldr	r1, [pc, #48]	; (800319c <__NVIC_SetPriority+0x4c>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	440b      	add	r3, r1
 8003174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003178:	e00a      	b.n	8003190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <__NVIC_SetPriority+0x50>)
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3b04      	subs	r3, #4
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	440b      	add	r3, r1
 800318e:	761a      	strb	r2, [r3, #24]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000e100 	.word	0xe000e100
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f1c3 0307 	rsb	r3, r3, #7
 80031be:	2b04      	cmp	r3, #4
 80031c0:	bf28      	it	cs
 80031c2:	2304      	movcs	r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d902      	bls.n	80031d4 <NVIC_EncodePriority+0x30>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3b03      	subs	r3, #3
 80031d2:	e000      	b.n	80031d6 <NVIC_EncodePriority+0x32>
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	401a      	ands	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	43d9      	mvns	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	4313      	orrs	r3, r2
         );
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3724      	adds	r7, #36	; 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800321c:	d301      	bcc.n	8003222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321e:	2301      	movs	r3, #1
 8003220:	e00f      	b.n	8003242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <SysTick_Config+0x40>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322a:	210f      	movs	r1, #15
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	f7ff ff8e 	bl	8003150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <SysTick_Config+0x40>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <SysTick_Config+0x40>)
 800323c:	2207      	movs	r2, #7
 800323e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000e010 	.word	0xe000e010

08003250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ff29 	bl	80030b0 <__NVIC_SetPriorityGrouping>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003278:	f7ff ff3e 	bl	80030f8 <__NVIC_GetPriorityGrouping>
 800327c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f7ff ff8e 	bl	80031a4 <NVIC_EncodePriority>
 8003288:	4602      	mov	r2, r0
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff5d 	bl	8003150 <__NVIC_SetPriority>
}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff31 	bl	8003114 <__NVIC_EnableIRQ>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffa2 	bl	800320c <SysTick_Config>
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032e0:	f7ff feb6 	bl	8003050 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d008      	beq.n	8003304 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e052      	b.n	80033aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0216 	bic.w	r2, r2, #22
 8003312:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003322:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_DMA_Abort+0x62>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0208 	bic.w	r2, r2, #8
 8003342:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003354:	e013      	b.n	800337e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003356:	f7ff fe7b 	bl	8003050 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b05      	cmp	r3, #5
 8003362:	d90c      	bls.n	800337e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2203      	movs	r2, #3
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e015      	b.n	80033aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e4      	bne.n	8003356 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	223f      	movs	r2, #63	; 0x3f
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d004      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2280      	movs	r2, #128	; 0x80
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e00c      	b.n	80033ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2205      	movs	r2, #5
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e16b      	b.n	80036ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	f040 815a 	bne.w	80036e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d005      	beq.n	800344a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003446:	2b02      	cmp	r3, #2
 8003448:	d130      	bne.n	80034ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003480:	2201      	movs	r2, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 0201 	and.w	r2, r3, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d017      	beq.n	80034e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d123      	bne.n	800353c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80b4 	beq.w	80036e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b60      	ldr	r3, [pc, #384]	; (8003704 <HAL_GPIO_Init+0x30c>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	4a5f      	ldr	r2, [pc, #380]	; (8003704 <HAL_GPIO_Init+0x30c>)
 8003588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358c:	6453      	str	r3, [r2, #68]	; 0x44
 800358e:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <HAL_GPIO_Init+0x30c>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_GPIO_Init+0x310>)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	3302      	adds	r3, #2
 80035a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	220f      	movs	r2, #15
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a52      	ldr	r2, [pc, #328]	; (800370c <HAL_GPIO_Init+0x314>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d02b      	beq.n	800361e <HAL_GPIO_Init+0x226>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a51      	ldr	r2, [pc, #324]	; (8003710 <HAL_GPIO_Init+0x318>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d025      	beq.n	800361a <HAL_GPIO_Init+0x222>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a50      	ldr	r2, [pc, #320]	; (8003714 <HAL_GPIO_Init+0x31c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01f      	beq.n	8003616 <HAL_GPIO_Init+0x21e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4f      	ldr	r2, [pc, #316]	; (8003718 <HAL_GPIO_Init+0x320>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d019      	beq.n	8003612 <HAL_GPIO_Init+0x21a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4e      	ldr	r2, [pc, #312]	; (800371c <HAL_GPIO_Init+0x324>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_GPIO_Init+0x216>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4d      	ldr	r2, [pc, #308]	; (8003720 <HAL_GPIO_Init+0x328>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00d      	beq.n	800360a <HAL_GPIO_Init+0x212>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4c      	ldr	r2, [pc, #304]	; (8003724 <HAL_GPIO_Init+0x32c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <HAL_GPIO_Init+0x20e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4b      	ldr	r2, [pc, #300]	; (8003728 <HAL_GPIO_Init+0x330>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_GPIO_Init+0x20a>
 80035fe:	2307      	movs	r3, #7
 8003600:	e00e      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003602:	2308      	movs	r3, #8
 8003604:	e00c      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003606:	2306      	movs	r3, #6
 8003608:	e00a      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800360a:	2305      	movs	r3, #5
 800360c:	e008      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800360e:	2304      	movs	r3, #4
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003612:	2303      	movs	r3, #3
 8003614:	e004      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003616:	2302      	movs	r3, #2
 8003618:	e002      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800361e:	2300      	movs	r3, #0
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f002 0203 	and.w	r2, r2, #3
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	4093      	lsls	r3, r2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003630:	4935      	ldr	r1, [pc, #212]	; (8003708 <HAL_GPIO_Init+0x310>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <HAL_GPIO_Init+0x334>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003662:	4a32      	ldr	r2, [pc, #200]	; (800372c <HAL_GPIO_Init+0x334>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003668:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_GPIO_Init+0x334>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800368c:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_GPIO_Init+0x334>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <HAL_GPIO_Init+0x334>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b6:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_GPIO_Init+0x334>)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_GPIO_Init+0x334>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <HAL_GPIO_Init+0x334>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	f67f ae90 	bls.w	8003414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40013800 	.word	0x40013800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	40020800 	.word	0x40020800
 8003718:	40020c00 	.word	0x40020c00
 800371c:	40021000 	.word	0x40021000
 8003720:	40021400 	.word	0x40021400
 8003724:	40021800 	.word	0x40021800
 8003728:	40021c00 	.word	0x40021c00
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e001      	b.n	8003752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e267      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d075      	beq.n	800389e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d112      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4b82      	ldr	r3, [pc, #520]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05b      	beq.n	800389c <HAL_RCC_OscConfig+0x108>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d157      	bne.n	800389c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e242      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x74>
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x98>
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6f      	ldr	r2, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6c      	ldr	r2, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 800382c:	4b69      	ldr	r3, [pc, #420]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7ff fc00 	bl	8003050 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7ff fbfc 	bl	8003050 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e207      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xc0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7ff fbec 	bl	8003050 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387c:	f7ff fbe8 	bl	8003050 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1f3      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0xe8>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d063      	beq.n	8003972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c7      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4937      	ldr	r1, [pc, #220]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7ff fba1 	bl	8003050 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003912:	f7ff fb9d 	bl	8003050 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1a8      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4925      	ldr	r1, [pc, #148]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7ff fb80 	bl	8003050 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003954:	f7ff fb7c 	bl	8003050 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e187      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d036      	beq.n	80039ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_RCC_OscConfig+0x248>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7ff fb60 	bl	8003050 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003994:	f7ff fb5c 	bl	8003050 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e167      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x200>
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_OscConfig+0x248>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7ff fb49 	bl	8003050 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e00e      	b.n	80039e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c2:	f7ff fb45 	bl	8003050 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d907      	bls.n	80039e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e150      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ea      	bne.n	80039c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8097 	beq.w	8003b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b7d      	ldr	r3, [pc, #500]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a7c      	ldr	r2, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b7a      	ldr	r3, [pc, #488]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b77      	ldr	r3, [pc, #476]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b74      	ldr	r3, [pc, #464]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a73      	ldr	r2, [pc, #460]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7ff fb05 	bl	8003050 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7ff fb01 	bl	8003050 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e10c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2ea>
 8003a70:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x30c>
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a5e      	ldr	r2, [pc, #376]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a5b      	ldr	r2, [pc, #364]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003aa0:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a54      	ldr	r2, [pc, #336]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7ff fac6 	bl	8003050 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7ff fac2 	bl	8003050 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0cb      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x334>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aec:	f7ff fab0 	bl	8003050 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7ff faac 	bl	8003050 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0b5      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ee      	bne.n	8003af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a1 	beq.w	8003c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d05c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d141      	bne.n	8003bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7ff fa80 	bl	8003050 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b54:	f7ff fa7c 	bl	8003050 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e087      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	491b      	ldr	r1, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7ff fa55 	bl	8003050 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003baa:	f7ff fa51 	bl	8003050 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e05c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x416>
 8003bc8:	e054      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7ff fa3e 	bl	8003050 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7ff fa3a 	bl	8003050 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e045      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x444>
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e038      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCC_OscConfig+0x4ec>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d121      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d111      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0cc      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d90c      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0b8      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd8:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf0:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a52      	ldr	r2, [pc, #328]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfc:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	494d      	ldr	r1, [pc, #308]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d044      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d119      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e067      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4934      	ldr	r1, [pc, #208]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d74:	f7ff f96c 	bl	8003050 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7ff f968 	bl	8003050 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e04f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d20c      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e032      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd8:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4916      	ldr	r1, [pc, #88]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	490e      	ldr	r1, [pc, #56]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e0a:	f000 f821 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	490a      	ldr	r1, [pc, #40]	; (8003e44 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	5ccb      	ldrb	r3, [r1, r3]
 8003e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f8cc 	bl	8002fc8 <HAL_InitTick>

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023c00 	.word	0x40023c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	08007f20 	.word	0x08007f20
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	20000004 	.word	0x20000004

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e54:	b090      	sub	sp, #64	; 0x40
 8003e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e60:	2300      	movs	r3, #0
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e68:	4b59      	ldr	r3, [pc, #356]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d00d      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x40>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	f200 80a1 	bhi.w	8003fbc <HAL_RCC_GetSysClockFreq+0x16c>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x34>
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e82:	e09b      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e88:	e09b      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e8a:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e8e:	e098      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e90:	4b4f      	ldr	r3, [pc, #316]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e9a:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d028      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea6:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	2200      	movs	r2, #0
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	627a      	str	r2, [r7, #36]	; 0x24
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ebc:	fb03 f201 	mul.w	r2, r3, r1
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	fb00 f303 	mul.w	r3, r0, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	4a43      	ldr	r2, [pc, #268]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eca:	fba0 1202 	umull	r1, r2, r0, r2
 8003ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed6:	4413      	add	r3, r2
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	2200      	movs	r2, #0
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	61fa      	str	r2, [r7, #28]
 8003ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003eea:	f7fc f9c9 	bl	8000280 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef6:	e053      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef8:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	099b      	lsrs	r3, r3, #6
 8003efe:	2200      	movs	r2, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	617a      	str	r2, [r7, #20]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f0a:	f04f 0b00 	mov.w	fp, #0
 8003f0e:	4652      	mov	r2, sl
 8003f10:	465b      	mov	r3, fp
 8003f12:	f04f 0000 	mov.w	r0, #0
 8003f16:	f04f 0100 	mov.w	r1, #0
 8003f1a:	0159      	lsls	r1, r3, #5
 8003f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f20:	0150      	lsls	r0, r2, #5
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	ebb2 080a 	subs.w	r8, r2, sl
 8003f2a:	eb63 090b 	sbc.w	r9, r3, fp
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f42:	ebb2 0408 	subs.w	r4, r2, r8
 8003f46:	eb63 0509 	sbc.w	r5, r3, r9
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	00eb      	lsls	r3, r5, #3
 8003f54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f58:	00e2      	lsls	r2, r4, #3
 8003f5a:	4614      	mov	r4, r2
 8003f5c:	461d      	mov	r5, r3
 8003f5e:	eb14 030a 	adds.w	r3, r4, sl
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	eb45 030b 	adc.w	r3, r5, fp
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f76:	4629      	mov	r1, r5
 8003f78:	028b      	lsls	r3, r1, #10
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f80:	4621      	mov	r1, r4
 8003f82:	028a      	lsls	r2, r1, #10
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	60fa      	str	r2, [r7, #12]
 8003f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f94:	f7fc f974 	bl	8000280 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	3301      	adds	r3, #1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fba:	e002      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3740      	adds	r7, #64	; 0x40
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	017d7840 	.word	0x017d7840

08003fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ff8:	f7ff fff0 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0a9b      	lsrs	r3, r3, #10
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40023800 	.word	0x40023800
 8004018:	08007f30 	.word	0x08007f30

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004020:	f7ff ffdc 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	0b5b      	lsrs	r3, r3, #13
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4903      	ldr	r1, [pc, #12]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40023800 	.word	0x40023800
 8004040:	08007f30 	.word	0x08007f30

08004044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e041      	b.n	80040da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe fba2 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 feca 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d001      	beq.n	80040fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e046      	b.n	800418a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a23      	ldr	r2, [pc, #140]	; (8004198 <HAL_TIM_Base_Start+0xb4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d022      	beq.n	8004154 <HAL_TIM_Base_Start+0x70>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d01d      	beq.n	8004154 <HAL_TIM_Base_Start+0x70>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <HAL_TIM_Base_Start+0xb8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <HAL_TIM_Base_Start+0x70>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_TIM_Base_Start+0xbc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <HAL_TIM_Base_Start+0x70>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <HAL_TIM_Base_Start+0xc0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00e      	beq.n	8004154 <HAL_TIM_Base_Start+0x70>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_TIM_Base_Start+0xc4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_TIM_Base_Start+0x70>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_TIM_Base_Start+0xc8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <HAL_TIM_Base_Start+0x70>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_TIM_Base_Start+0xcc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d111      	bne.n	8004178 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b06      	cmp	r3, #6
 8004164:	d010      	beq.n	8004188 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	e007      	b.n	8004188 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40010400 	.word	0x40010400
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40001800 	.word	0x40001800

080041b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e04e      	b.n	800426a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a23      	ldr	r2, [pc, #140]	; (8004278 <HAL_TIM_Base_Start_IT+0xc4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x80>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d01d      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x80>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1f      	ldr	r2, [pc, #124]	; (800427c <HAL_TIM_Base_Start_IT+0xc8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x80>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <HAL_TIM_Base_Start_IT+0xcc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x80>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <HAL_TIM_Base_Start_IT+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x80>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <HAL_TIM_Base_Start_IT+0xd4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x80>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a19      	ldr	r2, [pc, #100]	; (800428c <HAL_TIM_Base_Start_IT+0xd8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x80>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_TIM_Base_Start_IT+0xdc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b06      	cmp	r3, #6
 8004244:	d010      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	e007      	b.n	8004268 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40010400 	.word	0x40010400
 800428c:	40014000 	.word	0x40014000
 8004290:	40001800 	.word	0x40001800

08004294 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e041      	b.n	800432a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f839 	bl	8004332 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f000 fda2 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e041      	b.n	80043dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fe fa9f 	bl	80028b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fd49 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_TIM_PWM_Start+0x24>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e022      	b.n	800444e <HAL_TIM_PWM_Start+0x6a>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d109      	bne.n	8004422 <HAL_TIM_PWM_Start+0x3e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	bf14      	ite	ne
 800441a:	2301      	movne	r3, #1
 800441c:	2300      	moveq	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e015      	b.n	800444e <HAL_TIM_PWM_Start+0x6a>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d109      	bne.n	800443c <HAL_TIM_PWM_Start+0x58>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e008      	b.n	800444e <HAL_TIM_PWM_Start+0x6a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e07c      	b.n	8004550 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <HAL_TIM_PWM_Start+0x82>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004464:	e013      	b.n	800448e <HAL_TIM_PWM_Start+0xaa>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d104      	bne.n	8004476 <HAL_TIM_PWM_Start+0x92>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004474:	e00b      	b.n	800448e <HAL_TIM_PWM_Start+0xaa>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d104      	bne.n	8004486 <HAL_TIM_PWM_Start+0xa2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004484:	e003      	b.n	800448e <HAL_TIM_PWM_Start+0xaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2201      	movs	r2, #1
 8004494:	6839      	ldr	r1, [r7, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 ffaa 	bl	80053f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <HAL_TIM_PWM_Start+0x174>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_PWM_Start+0xcc>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2c      	ldr	r2, [pc, #176]	; (800455c <HAL_TIM_PWM_Start+0x178>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_TIM_PWM_Start+0xd0>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_PWM_Start+0xd2>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_TIM_PWM_Start+0x174>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_TIM_PWM_Start+0x136>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d01d      	beq.n	800451a <HAL_TIM_PWM_Start+0x136>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <HAL_TIM_PWM_Start+0x17c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <HAL_TIM_PWM_Start+0x136>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_TIM_PWM_Start+0x180>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_TIM_PWM_Start+0x136>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_TIM_PWM_Start+0x184>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_TIM_PWM_Start+0x136>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_TIM_PWM_Start+0x178>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_TIM_PWM_Start+0x136>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_TIM_PWM_Start+0x188>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_TIM_PWM_Start+0x136>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_TIM_PWM_Start+0x18c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b06      	cmp	r3, #6
 800452a:	d010      	beq.n	800454e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453c:	e007      	b.n	800454e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40010000 	.word	0x40010000
 800455c:	40010400 	.word	0x40010400
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40014000 	.word	0x40014000
 8004570:	40001800 	.word	0x40001800

08004574 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e097      	b.n	80046b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f88f 	bl	80046c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b8:	f023 0307 	bic.w	r3, r3, #7
 80045bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f000 fc27 	bl	8004e1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f6:	f023 0303 	bic.w	r3, r3, #3
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	4313      	orrs	r3, r2
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004614:	f023 030c 	bic.w	r3, r3, #12
 8004618:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	4313      	orrs	r3, r2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	011a      	lsls	r2, r3, #4
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	031b      	lsls	r3, r3, #12
 8004644:	4313      	orrs	r3, r2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800465a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	4313      	orrs	r3, r2
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d110      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800470a:	7b7b      	ldrb	r3, [r7, #13]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e069      	b.n	80047e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004724:	e031      	b.n	800478a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d110      	bne.n	800474e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d102      	bne.n	8004738 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004732:	7b3b      	ldrb	r3, [r7, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e055      	b.n	80047e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800474c:	e01d      	b.n	800478a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d108      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004754:	7bbb      	ldrb	r3, [r7, #14]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475a:	7b7b      	ldrb	r3, [r7, #13]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d102      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004760:	7b3b      	ldrb	r3, [r7, #12]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d001      	beq.n	800476a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e03e      	b.n	80047e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_TIM_Encoder_Start+0xc4>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b04      	cmp	r3, #4
 8004794:	d008      	beq.n	80047a8 <HAL_TIM_Encoder_Start+0xd4>
 8004796:	e00f      	b.n	80047b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fe25 	bl	80053f0 <TIM_CCxChannelCmd>
      break;
 80047a6:	e016      	b.n	80047d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	2104      	movs	r1, #4
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fe1d 	bl	80053f0 <TIM_CCxChannelCmd>
      break;
 80047b6:	e00e      	b.n	80047d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fe15 	bl	80053f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2201      	movs	r2, #1
 80047cc:	2104      	movs	r1, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fe0e 	bl	80053f0 <TIM_CCxChannelCmd>
      break;
 80047d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b02      	cmp	r3, #2
 8004804:	d122      	bne.n	800484c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d11b      	bne.n	800484c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0202 	mvn.w	r2, #2
 800481c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fad3 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004838:	e005      	b.n	8004846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fac5 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fad6 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d122      	bne.n	80048a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b04      	cmp	r3, #4
 8004866:	d11b      	bne.n	80048a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0204 	mvn.w	r2, #4
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 faa9 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa9b 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 faac 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d122      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0208 	mvn.w	r2, #8
 80048c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2204      	movs	r2, #4
 80048ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa7f 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa71 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa82 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b10      	cmp	r3, #16
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b10      	cmp	r3, #16
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0210 	mvn.w	r2, #16
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2208      	movs	r2, #8
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa55 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa47 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa58 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0201 	mvn.w	r2, #1
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fb fed6 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d10e      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b80      	cmp	r3, #128	; 0x80
 800498e:	d107      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fe26 	bl	80055ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa1d 	bl	8004e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0220 	mvn.w	r2, #32
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fdf0 	bl	80055d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e048      	b.n	8004ab0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	d839      	bhi.n	8004aa0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004aa1 	.word	0x08004aa1
 8004a3c:	08004aa1 	.word	0x08004aa1
 8004a40:	08004aa1 	.word	0x08004aa1
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004aa1 	.word	0x08004aa1
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	08004aa1 	.word	0x08004aa1
 8004a54:	08004a85 	.word	0x08004a85
 8004a58:	08004aa1 	.word	0x08004aa1
 8004a5c:	08004aa1 	.word	0x08004aa1
 8004a60:	08004aa1 	.word	0x08004aa1
 8004a64:	08004a93 	.word	0x08004a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa74 	bl	8004f5c <TIM_OC1_SetConfig>
      break;
 8004a74:	e017      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fadd 	bl	800503c <TIM_OC2_SetConfig>
      break;
 8004a82:	e010      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fb4c 	bl	8005128 <TIM_OC3_SetConfig>
      break;
 8004a90:	e009      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fbb9 	bl	8005210 <TIM_OC4_SetConfig>
      break;
 8004a9e:	e002      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e0ae      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b0c      	cmp	r3, #12
 8004ae2:	f200 809f 	bhi.w	8004c24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004c25 	.word	0x08004c25
 8004af4:	08004c25 	.word	0x08004c25
 8004af8:	08004c25 	.word	0x08004c25
 8004afc:	08004b61 	.word	0x08004b61
 8004b00:	08004c25 	.word	0x08004c25
 8004b04:	08004c25 	.word	0x08004c25
 8004b08:	08004c25 	.word	0x08004c25
 8004b0c:	08004ba3 	.word	0x08004ba3
 8004b10:	08004c25 	.word	0x08004c25
 8004b14:	08004c25 	.word	0x08004c25
 8004b18:	08004c25 	.word	0x08004c25
 8004b1c:	08004be3 	.word	0x08004be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fa18 	bl	8004f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0208 	orr.w	r2, r2, #8
 8004b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0204 	bic.w	r2, r2, #4
 8004b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	619a      	str	r2, [r3, #24]
      break;
 8004b5e:	e064      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa68 	bl	800503c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6999      	ldr	r1, [r3, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]
      break;
 8004ba0:	e043      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fabd 	bl	8005128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0208 	orr.w	r2, r2, #8
 8004bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0204 	bic.w	r2, r2, #4
 8004bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	61da      	str	r2, [r3, #28]
      break;
 8004be0:	e023      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb11 	bl	8005210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	021a      	lsls	r2, r3, #8
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	61da      	str	r2, [r3, #28]
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e0b4      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x186>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d03e      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0xd4>
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c96:	f200 8087 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9e:	f000 8086 	beq.w	8004dae <HAL_TIM_ConfigClockSource+0x172>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d87f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d01a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8004cac:	2b70      	cmp	r3, #112	; 0x70
 8004cae:	d87b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d050      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb4:	2b60      	cmp	r3, #96	; 0x60
 8004cb6:	d877      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b50      	cmp	r3, #80	; 0x50
 8004cba:	d03c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xfa>
 8004cbc:	2b50      	cmp	r3, #80	; 0x50
 8004cbe:	d873      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d058      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d86f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b30      	cmp	r3, #48	; 0x30
 8004cca:	d064      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	2b30      	cmp	r3, #48	; 0x30
 8004cce:	d86b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d060      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d867      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05c      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d05a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	e062      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6899      	ldr	r1, [r3, #8]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f000 fb5d 	bl	80053b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	609a      	str	r2, [r3, #8]
      break;
 8004d0e:	e04f      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6899      	ldr	r1, [r3, #8]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f000 fb46 	bl	80053b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d32:	609a      	str	r2, [r3, #8]
      break;
 8004d34:	e03c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 faba 	bl	80052bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2150      	movs	r1, #80	; 0x50
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fb13 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004d54:	e02c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 fad9 	bl	800531a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2160      	movs	r1, #96	; 0x60
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fb03 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004d74:	e01c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 fa9a 	bl	80052bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 faf3 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004d94:	e00c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f000 faea 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004da6:	e003      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	e000      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a40      	ldr	r2, [pc, #256]	; (8004f30 <TIM_Base_SetConfig+0x114>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d00f      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3d      	ldr	r2, [pc, #244]	; (8004f34 <TIM_Base_SetConfig+0x118>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <TIM_Base_SetConfig+0x11c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <TIM_Base_SetConfig+0x120>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3a      	ldr	r2, [pc, #232]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <TIM_Base_SetConfig+0x114>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d027      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <TIM_Base_SetConfig+0x118>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d023      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2b      	ldr	r2, [pc, #172]	; (8004f38 <TIM_Base_SetConfig+0x11c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <TIM_Base_SetConfig+0x120>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d017      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a28      	ldr	r2, [pc, #160]	; (8004f44 <TIM_Base_SetConfig+0x128>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a27      	ldr	r2, [pc, #156]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <TIM_Base_SetConfig+0x130>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <TIM_Base_SetConfig+0x134>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a24      	ldr	r2, [pc, #144]	; (8004f54 <TIM_Base_SetConfig+0x138>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a23      	ldr	r2, [pc, #140]	; (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <TIM_Base_SetConfig+0x114>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_Base_SetConfig+0xf8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a0c      	ldr	r2, [pc, #48]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d103      	bne.n	8004f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	615a      	str	r2, [r3, #20]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800
 8004f50:	40001800 	.word	0x40001800
 8004f54:	40001c00 	.word	0x40001c00
 8004f58:	40002000 	.word	0x40002000

08004f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0302 	bic.w	r3, r3, #2
 8004fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a20      	ldr	r2, [pc, #128]	; (8005034 <TIM_OC1_SetConfig+0xd8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC1_SetConfig+0x64>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <TIM_OC1_SetConfig+0xdc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10c      	bne.n	8004fda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0308 	bic.w	r3, r3, #8
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	; (8005034 <TIM_OC1_SetConfig+0xd8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC1_SetConfig+0x8e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a14      	ldr	r2, [pc, #80]	; (8005038 <TIM_OC1_SetConfig+0xdc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d111      	bne.n	800500e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	621a      	str	r2, [r3, #32]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40010000 	.word	0x40010000
 8005038:	40010400 	.word	0x40010400

0800503c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0210 	bic.w	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0320 	bic.w	r3, r3, #32
 8005086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a22      	ldr	r2, [pc, #136]	; (8005120 <TIM_OC2_SetConfig+0xe4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_OC2_SetConfig+0x68>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <TIM_OC2_SetConfig+0xe8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10d      	bne.n	80050c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a17      	ldr	r2, [pc, #92]	; (8005120 <TIM_OC2_SetConfig+0xe4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC2_SetConfig+0x94>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a16      	ldr	r2, [pc, #88]	; (8005124 <TIM_OC2_SetConfig+0xe8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d113      	bne.n	80050f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40010400 	.word	0x40010400

08005128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a21      	ldr	r2, [pc, #132]	; (8005208 <TIM_OC3_SetConfig+0xe0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC3_SetConfig+0x66>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a20      	ldr	r2, [pc, #128]	; (800520c <TIM_OC3_SetConfig+0xe4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10d      	bne.n	80051aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a16      	ldr	r2, [pc, #88]	; (8005208 <TIM_OC3_SetConfig+0xe0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_OC3_SetConfig+0x92>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a15      	ldr	r2, [pc, #84]	; (800520c <TIM_OC3_SetConfig+0xe4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d113      	bne.n	80051e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40010000 	.word	0x40010000
 800520c:	40010400 	.word	0x40010400

08005210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800525a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	031b      	lsls	r3, r3, #12
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <TIM_OC4_SetConfig+0xa4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC4_SetConfig+0x68>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <TIM_OC4_SetConfig+0xa8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d109      	bne.n	800528c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800527e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	019b      	lsls	r3, r3, #6
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40010400 	.word	0x40010400

080052bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 030a 	bic.w	r3, r3, #10
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b087      	sub	sp, #28
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0210 	bic.w	r2, r3, #16
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005356:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e05a      	b.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a21      	ldr	r2, [pc, #132]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a0:	d01d      	beq.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1d      	ldr	r2, [pc, #116]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d018      	beq.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d10c      	bne.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40010400 	.word	0x40010400
 800552c:	40014000 	.word	0x40014000
 8005530:	40001800 	.word	0x40001800

08005534 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800554c:	2302      	movs	r3, #2
 800554e:	e03d      	b.n	80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e03f      	b.n	8005692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fd fa82 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fcdf 	bl	8006008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	4613      	mov	r3, r2
 80056a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d11d      	bne.n	80056f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_UART_Receive_IT+0x26>
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e016      	b.n	80056f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_UART_Receive_IT+0x38>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e00f      	b.n	80056f2 <HAL_UART_Receive_IT+0x58>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	461a      	mov	r2, r3
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fab6 	bl	8005c58 <UART_Start_Receive_IT>
 80056ec:	4603      	mov	r3, r0
 80056ee:	e000      	b.n	80056f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b0ba      	sub	sp, #232	; 0xe8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800573a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb99 	bl	8005e92 <UART_Receive_IT>
      return;
 8005760:	e256      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80de 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
 800576c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80d1 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
 80057b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0202 	orr.w	r2, r3, #2
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d011      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
 80057fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0208 	orr.w	r2, r3, #8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 81ed 	beq.w	8005c06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb24 	bl	8005e92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_UART_IRQHandler+0x17a>
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d04f      	beq.n	8005916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa2c 	bl	8005cd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d141      	bne.n	800590e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1d9      	bne.n	800588a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d013      	beq.n	8005906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	4a7d      	ldr	r2, [pc, #500]	; (8005ad8 <HAL_UART_IRQHandler+0x3dc>)
 80058e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd fd61 	bl	80033b2 <HAL_DMA_Abort_IT>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	e00e      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f990 	bl	8005c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	e00a      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f98c 	bl	8005c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e006      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f988 	bl	8005c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005922:	e170      	b.n	8005c06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	bf00      	nop
    return;
 8005926:	e16e      	b.n	8005c06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 814a 	bne.w	8005bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8143 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 813c 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	f040 80b4 	bne.w	8005adc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8140 	beq.w	8005c0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800598e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005992:	429a      	cmp	r2, r3
 8005994:	f080 8139 	bcs.w	8005c0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800599e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	f000 8088 	beq.w	8005abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1d9      	bne.n	80059ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e1      	bne.n	80059fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e3      	bne.n	8005a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005aa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e3      	bne.n	8005a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fd fc0a 	bl	80032d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f8b6 	bl	8005c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ad4:	e099      	b.n	8005c0a <HAL_UART_IRQHandler+0x50e>
 8005ad6:	bf00      	nop
 8005ad8:	08005d9b 	.word	0x08005d9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 808b 	beq.w	8005c0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8086 	beq.w	8005c0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b26:	647a      	str	r2, [r7, #68]	; 0x44
 8005b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e3      	bne.n	8005b02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3314      	adds	r3, #20
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	623b      	str	r3, [r7, #32]
   return(result);
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e3      	bne.n	8005b3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0310 	bic.w	r3, r3, #16
 8005b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ba4:	61fa      	str	r2, [r7, #28]
 8005ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e3      	bne.n	8005b80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f83e 	bl	8005c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bc4:	e023      	b.n	8005c0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_UART_IRQHandler+0x4ea>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f8ef 	bl	8005dc2 <UART_Transmit_IT>
    return;
 8005be4:	e014      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <HAL_UART_IRQHandler+0x514>
 8005bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f92f 	bl	8005e62 <UART_EndTransmit_IT>
    return;
 8005c04:	e004      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
    return;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
      return;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
      return;
 8005c0e:	bf00      	nop
  }
}
 8005c10:	37e8      	adds	r7, #232	; 0xe8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop

08005c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	4613      	mov	r3, r2
 8005c64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2222      	movs	r2, #34	; 0x22
 8005c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ca4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0220 	orr.w	r2, r2, #32
 8005cc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b095      	sub	sp, #84	; 0x54
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cfc:	643a      	str	r2, [r7, #64]	; 0x40
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d119      	bne.n	8005d80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f023 0310 	bic.w	r3, r3, #16
 8005d62:	647b      	str	r3, [r7, #68]	; 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d6c:	61ba      	str	r2, [r7, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6979      	ldr	r1, [r7, #20]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e5      	bne.n	8005d4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d8e:	bf00      	nop
 8005d90:	3754      	adds	r7, #84	; 0x54
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff ff39 	bl	8005c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b21      	cmp	r3, #33	; 0x21
 8005dd4:	d13e      	bne.n	8005e54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dde:	d114      	bne.n	8005e0a <UART_Transmit_IT+0x48>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d110      	bne.n	8005e0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	1c9a      	adds	r2, r3, #2
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]
 8005e08:	e008      	b.n	8005e1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	1c59      	adds	r1, r3, #1
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6211      	str	r1, [r2, #32]
 8005e14:	781a      	ldrb	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10f      	bne.n	8005e50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fec8 	bl	8005c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b08c      	sub	sp, #48	; 0x30
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b22      	cmp	r3, #34	; 0x22
 8005ea4:	f040 80ab 	bne.w	8005ffe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb0:	d117      	bne.n	8005ee2 <UART_Receive_IT+0x50>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d113      	bne.n	8005ee2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	1c9a      	adds	r2, r3, #2
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee0:	e026      	b.n	8005f30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef4:	d007      	beq.n	8005f06 <UART_Receive_IT+0x74>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <UART_Receive_IT+0x82>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e008      	b.n	8005f26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d15a      	bne.n	8005ffa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0220 	bic.w	r2, r2, #32
 8005f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d135      	bne.n	8005ff0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f023 0310 	bic.w	r3, r3, #16
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005faa:	623a      	str	r2, [r7, #32]
 8005fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	69f9      	ldr	r1, [r7, #28]
 8005fb0:	6a3a      	ldr	r2, [r7, #32]
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d10a      	bne.n	8005fe2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fe29 	bl	8005c40 <HAL_UARTEx_RxEventCallback>
 8005fee:	e002      	b.n	8005ff6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fb febf 	bl	8001d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e002      	b.n	8006000 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e000      	b.n	8006000 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	4618      	mov	r0, r3
 8006002:	3730      	adds	r7, #48	; 0x30
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800600c:	b0c0      	sub	sp, #256	; 0x100
 800600e:	af00      	add	r7, sp, #0
 8006010:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	68d9      	ldr	r1, [r3, #12]
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	ea40 0301 	orr.w	r3, r0, r1
 8006030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	431a      	orrs	r2, r3
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	431a      	orrs	r2, r3
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006060:	f021 010c 	bic.w	r1, r1, #12
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800606e:	430b      	orrs	r3, r1
 8006070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	6999      	ldr	r1, [r3, #24]
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	ea40 0301 	orr.w	r3, r0, r1
 800608e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4b8f      	ldr	r3, [pc, #572]	; (80062d4 <UART_SetConfig+0x2cc>)
 8006098:	429a      	cmp	r2, r3
 800609a:	d005      	beq.n	80060a8 <UART_SetConfig+0xa0>
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b8d      	ldr	r3, [pc, #564]	; (80062d8 <UART_SetConfig+0x2d0>)
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d104      	bne.n	80060b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060a8:	f7fd ffb8 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 80060ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060b0:	e003      	b.n	80060ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060b2:	f7fd ff9f 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 80060b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c4:	f040 810c 	bne.w	80062e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060da:	4622      	mov	r2, r4
 80060dc:	462b      	mov	r3, r5
 80060de:	1891      	adds	r1, r2, r2
 80060e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80060e2:	415b      	adcs	r3, r3
 80060e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060ea:	4621      	mov	r1, r4
 80060ec:	eb12 0801 	adds.w	r8, r2, r1
 80060f0:	4629      	mov	r1, r5
 80060f2:	eb43 0901 	adc.w	r9, r3, r1
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800610a:	4690      	mov	r8, r2
 800610c:	4699      	mov	r9, r3
 800610e:	4623      	mov	r3, r4
 8006110:	eb18 0303 	adds.w	r3, r8, r3
 8006114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006118:	462b      	mov	r3, r5
 800611a:	eb49 0303 	adc.w	r3, r9, r3
 800611e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800612e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006136:	460b      	mov	r3, r1
 8006138:	18db      	adds	r3, r3, r3
 800613a:	653b      	str	r3, [r7, #80]	; 0x50
 800613c:	4613      	mov	r3, r2
 800613e:	eb42 0303 	adc.w	r3, r2, r3
 8006142:	657b      	str	r3, [r7, #84]	; 0x54
 8006144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800614c:	f7fa f898 	bl	8000280 <__aeabi_uldivmod>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4b61      	ldr	r3, [pc, #388]	; (80062dc <UART_SetConfig+0x2d4>)
 8006156:	fba3 2302 	umull	r2, r3, r3, r2
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	011c      	lsls	r4, r3, #4
 800615e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006162:	2200      	movs	r2, #0
 8006164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006168:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800616c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	1891      	adds	r1, r2, r2
 8006176:	64b9      	str	r1, [r7, #72]	; 0x48
 8006178:	415b      	adcs	r3, r3
 800617a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800617c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006180:	4641      	mov	r1, r8
 8006182:	eb12 0a01 	adds.w	sl, r2, r1
 8006186:	4649      	mov	r1, r9
 8006188:	eb43 0b01 	adc.w	fp, r3, r1
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800619c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a0:	4692      	mov	sl, r2
 80061a2:	469b      	mov	fp, r3
 80061a4:	4643      	mov	r3, r8
 80061a6:	eb1a 0303 	adds.w	r3, sl, r3
 80061aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ae:	464b      	mov	r3, r9
 80061b0:	eb4b 0303 	adc.w	r3, fp, r3
 80061b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061cc:	460b      	mov	r3, r1
 80061ce:	18db      	adds	r3, r3, r3
 80061d0:	643b      	str	r3, [r7, #64]	; 0x40
 80061d2:	4613      	mov	r3, r2
 80061d4:	eb42 0303 	adc.w	r3, r2, r3
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
 80061da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061e2:	f7fa f84d 	bl	8000280 <__aeabi_uldivmod>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <UART_SetConfig+0x2d4>)
 80061ee:	fba3 2301 	umull	r2, r3, r3, r1
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2264      	movs	r2, #100	; 0x64
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	1acb      	subs	r3, r1, r3
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006202:	4b36      	ldr	r3, [pc, #216]	; (80062dc <UART_SetConfig+0x2d4>)
 8006204:	fba3 2302 	umull	r2, r3, r3, r2
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006210:	441c      	add	r4, r3
 8006212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006216:	2200      	movs	r2, #0
 8006218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800621c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	1891      	adds	r1, r2, r2
 800622a:	63b9      	str	r1, [r7, #56]	; 0x38
 800622c:	415b      	adcs	r3, r3
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006234:	4641      	mov	r1, r8
 8006236:	1851      	adds	r1, r2, r1
 8006238:	6339      	str	r1, [r7, #48]	; 0x30
 800623a:	4649      	mov	r1, r9
 800623c:	414b      	adcs	r3, r1
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800624c:	4659      	mov	r1, fp
 800624e:	00cb      	lsls	r3, r1, #3
 8006250:	4651      	mov	r1, sl
 8006252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006256:	4651      	mov	r1, sl
 8006258:	00ca      	lsls	r2, r1, #3
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	4603      	mov	r3, r0
 8006260:	4642      	mov	r2, r8
 8006262:	189b      	adds	r3, r3, r2
 8006264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006268:	464b      	mov	r3, r9
 800626a:	460a      	mov	r2, r1
 800626c:	eb42 0303 	adc.w	r3, r2, r3
 8006270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006280:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006288:	460b      	mov	r3, r1
 800628a:	18db      	adds	r3, r3, r3
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
 800628e:	4613      	mov	r3, r2
 8006290:	eb42 0303 	adc.w	r3, r2, r3
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800629a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800629e:	f7f9 ffef 	bl	8000280 <__aeabi_uldivmod>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <UART_SetConfig+0x2d4>)
 80062a8:	fba3 1302 	umull	r1, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	2164      	movs	r1, #100	; 0x64
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	3332      	adds	r3, #50	; 0x32
 80062ba:	4a08      	ldr	r2, [pc, #32]	; (80062dc <UART_SetConfig+0x2d4>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	f003 0207 	and.w	r2, r3, #7
 80062c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4422      	add	r2, r4
 80062ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062d0:	e106      	b.n	80064e0 <UART_SetConfig+0x4d8>
 80062d2:	bf00      	nop
 80062d4:	40011000 	.word	0x40011000
 80062d8:	40011400 	.word	0x40011400
 80062dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062f2:	4642      	mov	r2, r8
 80062f4:	464b      	mov	r3, r9
 80062f6:	1891      	adds	r1, r2, r2
 80062f8:	6239      	str	r1, [r7, #32]
 80062fa:	415b      	adcs	r3, r3
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006302:	4641      	mov	r1, r8
 8006304:	1854      	adds	r4, r2, r1
 8006306:	4649      	mov	r1, r9
 8006308:	eb43 0501 	adc.w	r5, r3, r1
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	00eb      	lsls	r3, r5, #3
 8006316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800631a:	00e2      	lsls	r2, r4, #3
 800631c:	4614      	mov	r4, r2
 800631e:	461d      	mov	r5, r3
 8006320:	4643      	mov	r3, r8
 8006322:	18e3      	adds	r3, r4, r3
 8006324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006328:	464b      	mov	r3, r9
 800632a:	eb45 0303 	adc.w	r3, r5, r3
 800632e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800633e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800634e:	4629      	mov	r1, r5
 8006350:	008b      	lsls	r3, r1, #2
 8006352:	4621      	mov	r1, r4
 8006354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006358:	4621      	mov	r1, r4
 800635a:	008a      	lsls	r2, r1, #2
 800635c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006360:	f7f9 ff8e 	bl	8000280 <__aeabi_uldivmod>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4b60      	ldr	r3, [pc, #384]	; (80064ec <UART_SetConfig+0x4e4>)
 800636a:	fba3 2302 	umull	r2, r3, r3, r2
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	011c      	lsls	r4, r3, #4
 8006372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006376:	2200      	movs	r2, #0
 8006378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800637c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	1891      	adds	r1, r2, r2
 800638a:	61b9      	str	r1, [r7, #24]
 800638c:	415b      	adcs	r3, r3
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006394:	4641      	mov	r1, r8
 8006396:	1851      	adds	r1, r2, r1
 8006398:	6139      	str	r1, [r7, #16]
 800639a:	4649      	mov	r1, r9
 800639c:	414b      	adcs	r3, r1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063ac:	4659      	mov	r1, fp
 80063ae:	00cb      	lsls	r3, r1, #3
 80063b0:	4651      	mov	r1, sl
 80063b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063b6:	4651      	mov	r1, sl
 80063b8:	00ca      	lsls	r2, r1, #3
 80063ba:	4610      	mov	r0, r2
 80063bc:	4619      	mov	r1, r3
 80063be:	4603      	mov	r3, r0
 80063c0:	4642      	mov	r2, r8
 80063c2:	189b      	adds	r3, r3, r2
 80063c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063c8:	464b      	mov	r3, r9
 80063ca:	460a      	mov	r2, r1
 80063cc:	eb42 0303 	adc.w	r3, r2, r3
 80063d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80063de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063ec:	4649      	mov	r1, r9
 80063ee:	008b      	lsls	r3, r1, #2
 80063f0:	4641      	mov	r1, r8
 80063f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f6:	4641      	mov	r1, r8
 80063f8:	008a      	lsls	r2, r1, #2
 80063fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063fe:	f7f9 ff3f 	bl	8000280 <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4611      	mov	r1, r2
 8006408:	4b38      	ldr	r3, [pc, #224]	; (80064ec <UART_SetConfig+0x4e4>)
 800640a:	fba3 2301 	umull	r2, r3, r3, r1
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	2264      	movs	r2, #100	; 0x64
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	1acb      	subs	r3, r1, r3
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	3332      	adds	r3, #50	; 0x32
 800641c:	4a33      	ldr	r2, [pc, #204]	; (80064ec <UART_SetConfig+0x4e4>)
 800641e:	fba2 2303 	umull	r2, r3, r2, r3
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006428:	441c      	add	r4, r3
 800642a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800642e:	2200      	movs	r2, #0
 8006430:	673b      	str	r3, [r7, #112]	; 0x70
 8006432:	677a      	str	r2, [r7, #116]	; 0x74
 8006434:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	1891      	adds	r1, r2, r2
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	415b      	adcs	r3, r3
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006448:	4641      	mov	r1, r8
 800644a:	1851      	adds	r1, r2, r1
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	4649      	mov	r1, r9
 8006450:	414b      	adcs	r3, r1
 8006452:	607b      	str	r3, [r7, #4]
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006460:	4659      	mov	r1, fp
 8006462:	00cb      	lsls	r3, r1, #3
 8006464:	4651      	mov	r1, sl
 8006466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646a:	4651      	mov	r1, sl
 800646c:	00ca      	lsls	r2, r1, #3
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	4603      	mov	r3, r0
 8006474:	4642      	mov	r2, r8
 8006476:	189b      	adds	r3, r3, r2
 8006478:	66bb      	str	r3, [r7, #104]	; 0x68
 800647a:	464b      	mov	r3, r9
 800647c:	460a      	mov	r2, r1
 800647e:	eb42 0303 	adc.w	r3, r2, r3
 8006482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	663b      	str	r3, [r7, #96]	; 0x60
 800648e:	667a      	str	r2, [r7, #100]	; 0x64
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800649c:	4649      	mov	r1, r9
 800649e:	008b      	lsls	r3, r1, #2
 80064a0:	4641      	mov	r1, r8
 80064a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064a6:	4641      	mov	r1, r8
 80064a8:	008a      	lsls	r2, r1, #2
 80064aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064ae:	f7f9 fee7 	bl	8000280 <__aeabi_uldivmod>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <UART_SetConfig+0x4e4>)
 80064b8:	fba3 1302 	umull	r1, r3, r3, r2
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	2164      	movs	r1, #100	; 0x64
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	3332      	adds	r3, #50	; 0x32
 80064ca:	4a08      	ldr	r2, [pc, #32]	; (80064ec <UART_SetConfig+0x4e4>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	f003 020f 	and.w	r2, r3, #15
 80064d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4422      	add	r2, r4
 80064de:	609a      	str	r2, [r3, #8]
}
 80064e0:	bf00      	nop
 80064e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064e6:	46bd      	mov	sp, r7
 80064e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ec:	51eb851f 	.word	0x51eb851f

080064f0 <std>:
 80064f0:	2300      	movs	r3, #0
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	e9c0 3300 	strd	r3, r3, [r0]
 80064fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064fe:	6083      	str	r3, [r0, #8]
 8006500:	8181      	strh	r1, [r0, #12]
 8006502:	6643      	str	r3, [r0, #100]	; 0x64
 8006504:	81c2      	strh	r2, [r0, #14]
 8006506:	6183      	str	r3, [r0, #24]
 8006508:	4619      	mov	r1, r3
 800650a:	2208      	movs	r2, #8
 800650c:	305c      	adds	r0, #92	; 0x5c
 800650e:	f000 f922 	bl	8006756 <memset>
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <std+0x58>)
 8006514:	6263      	str	r3, [r4, #36]	; 0x24
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <std+0x5c>)
 8006518:	62a3      	str	r3, [r4, #40]	; 0x28
 800651a:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <std+0x60>)
 800651c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800651e:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <std+0x64>)
 8006520:	6323      	str	r3, [r4, #48]	; 0x30
 8006522:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <std+0x68>)
 8006524:	6224      	str	r4, [r4, #32]
 8006526:	429c      	cmp	r4, r3
 8006528:	d006      	beq.n	8006538 <std+0x48>
 800652a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800652e:	4294      	cmp	r4, r2
 8006530:	d002      	beq.n	8006538 <std+0x48>
 8006532:	33d0      	adds	r3, #208	; 0xd0
 8006534:	429c      	cmp	r4, r3
 8006536:	d105      	bne.n	8006544 <std+0x54>
 8006538:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800653c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006540:	f000 b9de 	b.w	8006900 <__retarget_lock_init_recursive>
 8006544:	bd10      	pop	{r4, pc}
 8006546:	bf00      	nop
 8006548:	080066cd 	.word	0x080066cd
 800654c:	080066f3 	.word	0x080066f3
 8006550:	0800672b 	.word	0x0800672b
 8006554:	0800674f 	.word	0x0800674f
 8006558:	20000088 	.word	0x20000088

0800655c <stdio_exit_handler>:
 800655c:	4a02      	ldr	r2, [pc, #8]	; (8006568 <stdio_exit_handler+0xc>)
 800655e:	4903      	ldr	r1, [pc, #12]	; (800656c <stdio_exit_handler+0x10>)
 8006560:	4803      	ldr	r0, [pc, #12]	; (8006570 <stdio_exit_handler+0x14>)
 8006562:	f000 b869 	b.w	8006638 <_fwalk_sglue>
 8006566:	bf00      	nop
 8006568:	2000000c 	.word	0x2000000c
 800656c:	08007291 	.word	0x08007291
 8006570:	20000018 	.word	0x20000018

08006574 <cleanup_stdio>:
 8006574:	6841      	ldr	r1, [r0, #4]
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <cleanup_stdio+0x34>)
 8006578:	4299      	cmp	r1, r3
 800657a:	b510      	push	{r4, lr}
 800657c:	4604      	mov	r4, r0
 800657e:	d001      	beq.n	8006584 <cleanup_stdio+0x10>
 8006580:	f000 fe86 	bl	8007290 <_fflush_r>
 8006584:	68a1      	ldr	r1, [r4, #8]
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <cleanup_stdio+0x38>)
 8006588:	4299      	cmp	r1, r3
 800658a:	d002      	beq.n	8006592 <cleanup_stdio+0x1e>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 fe7f 	bl	8007290 <_fflush_r>
 8006592:	68e1      	ldr	r1, [r4, #12]
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <cleanup_stdio+0x3c>)
 8006596:	4299      	cmp	r1, r3
 8006598:	d004      	beq.n	80065a4 <cleanup_stdio+0x30>
 800659a:	4620      	mov	r0, r4
 800659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a0:	f000 be76 	b.w	8007290 <_fflush_r>
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	bf00      	nop
 80065a8:	20000088 	.word	0x20000088
 80065ac:	200000f0 	.word	0x200000f0
 80065b0:	20000158 	.word	0x20000158

080065b4 <global_stdio_init.part.0>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <global_stdio_init.part.0+0x30>)
 80065b8:	4c0b      	ldr	r4, [pc, #44]	; (80065e8 <global_stdio_init.part.0+0x34>)
 80065ba:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <global_stdio_init.part.0+0x38>)
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	4620      	mov	r0, r4
 80065c0:	2200      	movs	r2, #0
 80065c2:	2104      	movs	r1, #4
 80065c4:	f7ff ff94 	bl	80064f0 <std>
 80065c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065cc:	2201      	movs	r2, #1
 80065ce:	2109      	movs	r1, #9
 80065d0:	f7ff ff8e 	bl	80064f0 <std>
 80065d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065d8:	2202      	movs	r2, #2
 80065da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065de:	2112      	movs	r1, #18
 80065e0:	f7ff bf86 	b.w	80064f0 <std>
 80065e4:	200001c0 	.word	0x200001c0
 80065e8:	20000088 	.word	0x20000088
 80065ec:	0800655d 	.word	0x0800655d

080065f0 <__sfp_lock_acquire>:
 80065f0:	4801      	ldr	r0, [pc, #4]	; (80065f8 <__sfp_lock_acquire+0x8>)
 80065f2:	f000 b986 	b.w	8006902 <__retarget_lock_acquire_recursive>
 80065f6:	bf00      	nop
 80065f8:	200001c9 	.word	0x200001c9

080065fc <__sfp_lock_release>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__sfp_lock_release+0x8>)
 80065fe:	f000 b981 	b.w	8006904 <__retarget_lock_release_recursive>
 8006602:	bf00      	nop
 8006604:	200001c9 	.word	0x200001c9

08006608 <__sinit>:
 8006608:	b510      	push	{r4, lr}
 800660a:	4604      	mov	r4, r0
 800660c:	f7ff fff0 	bl	80065f0 <__sfp_lock_acquire>
 8006610:	6a23      	ldr	r3, [r4, #32]
 8006612:	b11b      	cbz	r3, 800661c <__sinit+0x14>
 8006614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006618:	f7ff bff0 	b.w	80065fc <__sfp_lock_release>
 800661c:	4b04      	ldr	r3, [pc, #16]	; (8006630 <__sinit+0x28>)
 800661e:	6223      	str	r3, [r4, #32]
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <__sinit+0x2c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f5      	bne.n	8006614 <__sinit+0xc>
 8006628:	f7ff ffc4 	bl	80065b4 <global_stdio_init.part.0>
 800662c:	e7f2      	b.n	8006614 <__sinit+0xc>
 800662e:	bf00      	nop
 8006630:	08006575 	.word	0x08006575
 8006634:	200001c0 	.word	0x200001c0

08006638 <_fwalk_sglue>:
 8006638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800663c:	4607      	mov	r7, r0
 800663e:	4688      	mov	r8, r1
 8006640:	4614      	mov	r4, r2
 8006642:	2600      	movs	r6, #0
 8006644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006648:	f1b9 0901 	subs.w	r9, r9, #1
 800664c:	d505      	bpl.n	800665a <_fwalk_sglue+0x22>
 800664e:	6824      	ldr	r4, [r4, #0]
 8006650:	2c00      	cmp	r4, #0
 8006652:	d1f7      	bne.n	8006644 <_fwalk_sglue+0xc>
 8006654:	4630      	mov	r0, r6
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	89ab      	ldrh	r3, [r5, #12]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d907      	bls.n	8006670 <_fwalk_sglue+0x38>
 8006660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006664:	3301      	adds	r3, #1
 8006666:	d003      	beq.n	8006670 <_fwalk_sglue+0x38>
 8006668:	4629      	mov	r1, r5
 800666a:	4638      	mov	r0, r7
 800666c:	47c0      	blx	r8
 800666e:	4306      	orrs	r6, r0
 8006670:	3568      	adds	r5, #104	; 0x68
 8006672:	e7e9      	b.n	8006648 <_fwalk_sglue+0x10>

08006674 <siscanf>:
 8006674:	b40e      	push	{r1, r2, r3}
 8006676:	b510      	push	{r4, lr}
 8006678:	b09f      	sub	sp, #124	; 0x7c
 800667a:	ac21      	add	r4, sp, #132	; 0x84
 800667c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006680:	f854 2b04 	ldr.w	r2, [r4], #4
 8006684:	9201      	str	r2, [sp, #4]
 8006686:	f8ad 101c 	strh.w	r1, [sp, #28]
 800668a:	9004      	str	r0, [sp, #16]
 800668c:	9008      	str	r0, [sp, #32]
 800668e:	f7f9 fd9f 	bl	80001d0 <strlen>
 8006692:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <siscanf+0x50>)
 8006694:	9005      	str	r0, [sp, #20]
 8006696:	9009      	str	r0, [sp, #36]	; 0x24
 8006698:	930d      	str	r3, [sp, #52]	; 0x34
 800669a:	480b      	ldr	r0, [pc, #44]	; (80066c8 <siscanf+0x54>)
 800669c:	9a01      	ldr	r2, [sp, #4]
 800669e:	6800      	ldr	r0, [r0, #0]
 80066a0:	9403      	str	r4, [sp, #12]
 80066a2:	2300      	movs	r3, #0
 80066a4:	9311      	str	r3, [sp, #68]	; 0x44
 80066a6:	9316      	str	r3, [sp, #88]	; 0x58
 80066a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80066b0:	a904      	add	r1, sp, #16
 80066b2:	4623      	mov	r3, r4
 80066b4:	f000 faa0 	bl	8006bf8 <__ssvfiscanf_r>
 80066b8:	b01f      	add	sp, #124	; 0x7c
 80066ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066be:	b003      	add	sp, #12
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	080066ef 	.word	0x080066ef
 80066c8:	20000064 	.word	0x20000064

080066cc <__sread>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	460c      	mov	r4, r1
 80066d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d4:	f000 f8c6 	bl	8006864 <_read_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	bfab      	itete	ge
 80066dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066de:	89a3      	ldrhlt	r3, [r4, #12]
 80066e0:	181b      	addge	r3, r3, r0
 80066e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066e6:	bfac      	ite	ge
 80066e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ea:	81a3      	strhlt	r3, [r4, #12]
 80066ec:	bd10      	pop	{r4, pc}

080066ee <__seofread>:
 80066ee:	2000      	movs	r0, #0
 80066f0:	4770      	bx	lr

080066f2 <__swrite>:
 80066f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	461f      	mov	r7, r3
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	05db      	lsls	r3, r3, #23
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	4616      	mov	r6, r2
 8006702:	d505      	bpl.n	8006710 <__swrite+0x1e>
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	2302      	movs	r3, #2
 800670a:	2200      	movs	r2, #0
 800670c:	f000 f898 	bl	8006840 <_lseek_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	4632      	mov	r2, r6
 800671e:	463b      	mov	r3, r7
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	f000 b8af 	b.w	8006888 <_write_r>

0800672a <__sseek>:
 800672a:	b510      	push	{r4, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 f885 	bl	8006840 <_lseek_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	bf15      	itete	ne
 800673c:	6560      	strne	r0, [r4, #84]	; 0x54
 800673e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006746:	81a3      	strheq	r3, [r4, #12]
 8006748:	bf18      	it	ne
 800674a:	81a3      	strhne	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__sclose>:
 800674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006752:	f000 b865 	b.w	8006820 <_close_r>

08006756 <memset>:
 8006756:	4402      	add	r2, r0
 8006758:	4603      	mov	r3, r0
 800675a:	4293      	cmp	r3, r2
 800675c:	d100      	bne.n	8006760 <memset+0xa>
 800675e:	4770      	bx	lr
 8006760:	f803 1b01 	strb.w	r1, [r3], #1
 8006764:	e7f9      	b.n	800675a <memset+0x4>
	...

08006768 <strtok>:
 8006768:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <strtok+0x5c>)
 800676a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800676c:	681e      	ldr	r6, [r3, #0]
 800676e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006770:	4605      	mov	r5, r0
 8006772:	b9fc      	cbnz	r4, 80067b4 <strtok+0x4c>
 8006774:	2050      	movs	r0, #80	; 0x50
 8006776:	9101      	str	r1, [sp, #4]
 8006778:	f000 f930 	bl	80069dc <malloc>
 800677c:	9901      	ldr	r1, [sp, #4]
 800677e:	6470      	str	r0, [r6, #68]	; 0x44
 8006780:	4602      	mov	r2, r0
 8006782:	b920      	cbnz	r0, 800678e <strtok+0x26>
 8006784:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <strtok+0x60>)
 8006786:	4811      	ldr	r0, [pc, #68]	; (80067cc <strtok+0x64>)
 8006788:	215b      	movs	r1, #91	; 0x5b
 800678a:	f000 f8bd 	bl	8006908 <__assert_func>
 800678e:	e9c0 4400 	strd	r4, r4, [r0]
 8006792:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006796:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800679a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800679e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80067a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80067a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80067aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80067ae:	6184      	str	r4, [r0, #24]
 80067b0:	7704      	strb	r4, [r0, #28]
 80067b2:	6244      	str	r4, [r0, #36]	; 0x24
 80067b4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80067b6:	2301      	movs	r3, #1
 80067b8:	4628      	mov	r0, r5
 80067ba:	b002      	add	sp, #8
 80067bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067c0:	f000 b806 	b.w	80067d0 <__strtok_r>
 80067c4:	20000064 	.word	0x20000064
 80067c8:	08007f38 	.word	0x08007f38
 80067cc:	08007f4f 	.word	0x08007f4f

080067d0 <__strtok_r>:
 80067d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067d2:	b908      	cbnz	r0, 80067d8 <__strtok_r+0x8>
 80067d4:	6810      	ldr	r0, [r2, #0]
 80067d6:	b188      	cbz	r0, 80067fc <__strtok_r+0x2c>
 80067d8:	4604      	mov	r4, r0
 80067da:	4620      	mov	r0, r4
 80067dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80067e0:	460f      	mov	r7, r1
 80067e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80067e6:	b91e      	cbnz	r6, 80067f0 <__strtok_r+0x20>
 80067e8:	b965      	cbnz	r5, 8006804 <__strtok_r+0x34>
 80067ea:	6015      	str	r5, [r2, #0]
 80067ec:	4628      	mov	r0, r5
 80067ee:	e005      	b.n	80067fc <__strtok_r+0x2c>
 80067f0:	42b5      	cmp	r5, r6
 80067f2:	d1f6      	bne.n	80067e2 <__strtok_r+0x12>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <__strtok_r+0xa>
 80067f8:	6014      	str	r4, [r2, #0]
 80067fa:	7003      	strb	r3, [r0, #0]
 80067fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fe:	461c      	mov	r4, r3
 8006800:	e00c      	b.n	800681c <__strtok_r+0x4c>
 8006802:	b915      	cbnz	r5, 800680a <__strtok_r+0x3a>
 8006804:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006808:	460e      	mov	r6, r1
 800680a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800680e:	42ab      	cmp	r3, r5
 8006810:	d1f7      	bne.n	8006802 <__strtok_r+0x32>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f3      	beq.n	80067fe <__strtok_r+0x2e>
 8006816:	2300      	movs	r3, #0
 8006818:	f804 3c01 	strb.w	r3, [r4, #-1]
 800681c:	6014      	str	r4, [r2, #0]
 800681e:	e7ed      	b.n	80067fc <__strtok_r+0x2c>

08006820 <_close_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d06      	ldr	r5, [pc, #24]	; (800683c <_close_r+0x1c>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	f7fc fb03 	bl	8002e36 <_close>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_close_r+0x1a>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_close_r+0x1a>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	200001c4 	.word	0x200001c4

08006840 <_lseek_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	; (8006860 <_lseek_r+0x20>)
 8006844:	4604      	mov	r4, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fc fb18 	bl	8002e84 <_lseek>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_lseek_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_lseek_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	200001c4 	.word	0x200001c4

08006864 <_read_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d07      	ldr	r5, [pc, #28]	; (8006884 <_read_r+0x20>)
 8006868:	4604      	mov	r4, r0
 800686a:	4608      	mov	r0, r1
 800686c:	4611      	mov	r1, r2
 800686e:	2200      	movs	r2, #0
 8006870:	602a      	str	r2, [r5, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f7fc faa6 	bl	8002dc4 <_read>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_read_r+0x1e>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_read_r+0x1e>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	200001c4 	.word	0x200001c4

08006888 <_write_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4d07      	ldr	r5, [pc, #28]	; (80068a8 <_write_r+0x20>)
 800688c:	4604      	mov	r4, r0
 800688e:	4608      	mov	r0, r1
 8006890:	4611      	mov	r1, r2
 8006892:	2200      	movs	r2, #0
 8006894:	602a      	str	r2, [r5, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	f7fc fab1 	bl	8002dfe <_write>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_write_r+0x1e>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_write_r+0x1e>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	200001c4 	.word	0x200001c4

080068ac <__errno>:
 80068ac:	4b01      	ldr	r3, [pc, #4]	; (80068b4 <__errno+0x8>)
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000064 	.word	0x20000064

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	4d0d      	ldr	r5, [pc, #52]	; (80068f0 <__libc_init_array+0x38>)
 80068bc:	4c0d      	ldr	r4, [pc, #52]	; (80068f4 <__libc_init_array+0x3c>)
 80068be:	1b64      	subs	r4, r4, r5
 80068c0:	10a4      	asrs	r4, r4, #2
 80068c2:	2600      	movs	r6, #0
 80068c4:	42a6      	cmp	r6, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	4d0b      	ldr	r5, [pc, #44]	; (80068f8 <__libc_init_array+0x40>)
 80068ca:	4c0c      	ldr	r4, [pc, #48]	; (80068fc <__libc_init_array+0x44>)
 80068cc:	f001 fb14 	bl	8007ef8 <_init>
 80068d0:	1b64      	subs	r4, r4, r5
 80068d2:	10a4      	asrs	r4, r4, #2
 80068d4:	2600      	movs	r6, #0
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e0:	4798      	blx	r3
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ea:	4798      	blx	r3
 80068ec:	3601      	adds	r6, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	0800813c 	.word	0x0800813c
 80068f4:	0800813c 	.word	0x0800813c
 80068f8:	0800813c 	.word	0x0800813c
 80068fc:	08008140 	.word	0x08008140

08006900 <__retarget_lock_init_recursive>:
 8006900:	4770      	bx	lr

08006902 <__retarget_lock_acquire_recursive>:
 8006902:	4770      	bx	lr

08006904 <__retarget_lock_release_recursive>:
 8006904:	4770      	bx	lr
	...

08006908 <__assert_func>:
 8006908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690a:	4614      	mov	r4, r2
 800690c:	461a      	mov	r2, r3
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <__assert_func+0x2c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4605      	mov	r5, r0
 8006914:	68d8      	ldr	r0, [r3, #12]
 8006916:	b14c      	cbz	r4, 800692c <__assert_func+0x24>
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <__assert_func+0x30>)
 800691a:	9100      	str	r1, [sp, #0]
 800691c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006920:	4906      	ldr	r1, [pc, #24]	; (800693c <__assert_func+0x34>)
 8006922:	462b      	mov	r3, r5
 8006924:	f000 fcdc 	bl	80072e0 <fiprintf>
 8006928:	f000 fd7e 	bl	8007428 <abort>
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <__assert_func+0x38>)
 800692e:	461c      	mov	r4, r3
 8006930:	e7f3      	b.n	800691a <__assert_func+0x12>
 8006932:	bf00      	nop
 8006934:	20000064 	.word	0x20000064
 8006938:	08007fa9 	.word	0x08007fa9
 800693c:	08007fb6 	.word	0x08007fb6
 8006940:	08007fe4 	.word	0x08007fe4

08006944 <_free_r>:
 8006944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006946:	2900      	cmp	r1, #0
 8006948:	d044      	beq.n	80069d4 <_free_r+0x90>
 800694a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800694e:	9001      	str	r0, [sp, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f1a1 0404 	sub.w	r4, r1, #4
 8006956:	bfb8      	it	lt
 8006958:	18e4      	addlt	r4, r4, r3
 800695a:	f000 f8e7 	bl	8006b2c <__malloc_lock>
 800695e:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <_free_r+0x94>)
 8006960:	9801      	ldr	r0, [sp, #4]
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	b933      	cbnz	r3, 8006974 <_free_r+0x30>
 8006966:	6063      	str	r3, [r4, #4]
 8006968:	6014      	str	r4, [r2, #0]
 800696a:	b003      	add	sp, #12
 800696c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006970:	f000 b8e2 	b.w	8006b38 <__malloc_unlock>
 8006974:	42a3      	cmp	r3, r4
 8006976:	d908      	bls.n	800698a <_free_r+0x46>
 8006978:	6825      	ldr	r5, [r4, #0]
 800697a:	1961      	adds	r1, r4, r5
 800697c:	428b      	cmp	r3, r1
 800697e:	bf01      	itttt	eq
 8006980:	6819      	ldreq	r1, [r3, #0]
 8006982:	685b      	ldreq	r3, [r3, #4]
 8006984:	1949      	addeq	r1, r1, r5
 8006986:	6021      	streq	r1, [r4, #0]
 8006988:	e7ed      	b.n	8006966 <_free_r+0x22>
 800698a:	461a      	mov	r2, r3
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	b10b      	cbz	r3, 8006994 <_free_r+0x50>
 8006990:	42a3      	cmp	r3, r4
 8006992:	d9fa      	bls.n	800698a <_free_r+0x46>
 8006994:	6811      	ldr	r1, [r2, #0]
 8006996:	1855      	adds	r5, r2, r1
 8006998:	42a5      	cmp	r5, r4
 800699a:	d10b      	bne.n	80069b4 <_free_r+0x70>
 800699c:	6824      	ldr	r4, [r4, #0]
 800699e:	4421      	add	r1, r4
 80069a0:	1854      	adds	r4, r2, r1
 80069a2:	42a3      	cmp	r3, r4
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	d1e0      	bne.n	800696a <_free_r+0x26>
 80069a8:	681c      	ldr	r4, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	6053      	str	r3, [r2, #4]
 80069ae:	440c      	add	r4, r1
 80069b0:	6014      	str	r4, [r2, #0]
 80069b2:	e7da      	b.n	800696a <_free_r+0x26>
 80069b4:	d902      	bls.n	80069bc <_free_r+0x78>
 80069b6:	230c      	movs	r3, #12
 80069b8:	6003      	str	r3, [r0, #0]
 80069ba:	e7d6      	b.n	800696a <_free_r+0x26>
 80069bc:	6825      	ldr	r5, [r4, #0]
 80069be:	1961      	adds	r1, r4, r5
 80069c0:	428b      	cmp	r3, r1
 80069c2:	bf04      	itt	eq
 80069c4:	6819      	ldreq	r1, [r3, #0]
 80069c6:	685b      	ldreq	r3, [r3, #4]
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	bf04      	itt	eq
 80069cc:	1949      	addeq	r1, r1, r5
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	6054      	str	r4, [r2, #4]
 80069d2:	e7ca      	b.n	800696a <_free_r+0x26>
 80069d4:	b003      	add	sp, #12
 80069d6:	bd30      	pop	{r4, r5, pc}
 80069d8:	200001cc 	.word	0x200001cc

080069dc <malloc>:
 80069dc:	4b02      	ldr	r3, [pc, #8]	; (80069e8 <malloc+0xc>)
 80069de:	4601      	mov	r1, r0
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f000 b823 	b.w	8006a2c <_malloc_r>
 80069e6:	bf00      	nop
 80069e8:	20000064 	.word	0x20000064

080069ec <sbrk_aligned>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4e0e      	ldr	r6, [pc, #56]	; (8006a28 <sbrk_aligned+0x3c>)
 80069f0:	460c      	mov	r4, r1
 80069f2:	6831      	ldr	r1, [r6, #0]
 80069f4:	4605      	mov	r5, r0
 80069f6:	b911      	cbnz	r1, 80069fe <sbrk_aligned+0x12>
 80069f8:	f000 fcf8 	bl	80073ec <_sbrk_r>
 80069fc:	6030      	str	r0, [r6, #0]
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 fcf3 	bl	80073ec <_sbrk_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d00a      	beq.n	8006a20 <sbrk_aligned+0x34>
 8006a0a:	1cc4      	adds	r4, r0, #3
 8006a0c:	f024 0403 	bic.w	r4, r4, #3
 8006a10:	42a0      	cmp	r0, r4
 8006a12:	d007      	beq.n	8006a24 <sbrk_aligned+0x38>
 8006a14:	1a21      	subs	r1, r4, r0
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 fce8 	bl	80073ec <_sbrk_r>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d101      	bne.n	8006a24 <sbrk_aligned+0x38>
 8006a20:	f04f 34ff 	mov.w	r4, #4294967295
 8006a24:	4620      	mov	r0, r4
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	200001d0 	.word	0x200001d0

08006a2c <_malloc_r>:
 8006a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a30:	1ccd      	adds	r5, r1, #3
 8006a32:	f025 0503 	bic.w	r5, r5, #3
 8006a36:	3508      	adds	r5, #8
 8006a38:	2d0c      	cmp	r5, #12
 8006a3a:	bf38      	it	cc
 8006a3c:	250c      	movcc	r5, #12
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	4607      	mov	r7, r0
 8006a42:	db01      	blt.n	8006a48 <_malloc_r+0x1c>
 8006a44:	42a9      	cmp	r1, r5
 8006a46:	d905      	bls.n	8006a54 <_malloc_r+0x28>
 8006a48:	230c      	movs	r3, #12
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	2600      	movs	r6, #0
 8006a4e:	4630      	mov	r0, r6
 8006a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b28 <_malloc_r+0xfc>
 8006a58:	f000 f868 	bl	8006b2c <__malloc_lock>
 8006a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a60:	461c      	mov	r4, r3
 8006a62:	bb5c      	cbnz	r4, 8006abc <_malloc_r+0x90>
 8006a64:	4629      	mov	r1, r5
 8006a66:	4638      	mov	r0, r7
 8006a68:	f7ff ffc0 	bl	80069ec <sbrk_aligned>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	4604      	mov	r4, r0
 8006a70:	d155      	bne.n	8006b1e <_malloc_r+0xf2>
 8006a72:	f8d8 4000 	ldr.w	r4, [r8]
 8006a76:	4626      	mov	r6, r4
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	d145      	bne.n	8006b08 <_malloc_r+0xdc>
 8006a7c:	2c00      	cmp	r4, #0
 8006a7e:	d048      	beq.n	8006b12 <_malloc_r+0xe6>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	4631      	mov	r1, r6
 8006a84:	4638      	mov	r0, r7
 8006a86:	eb04 0903 	add.w	r9, r4, r3
 8006a8a:	f000 fcaf 	bl	80073ec <_sbrk_r>
 8006a8e:	4581      	cmp	r9, r0
 8006a90:	d13f      	bne.n	8006b12 <_malloc_r+0xe6>
 8006a92:	6821      	ldr	r1, [r4, #0]
 8006a94:	1a6d      	subs	r5, r5, r1
 8006a96:	4629      	mov	r1, r5
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f7ff ffa7 	bl	80069ec <sbrk_aligned>
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d037      	beq.n	8006b12 <_malloc_r+0xe6>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	442b      	add	r3, r5
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d038      	beq.n	8006b22 <_malloc_r+0xf6>
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	42a2      	cmp	r2, r4
 8006ab4:	d12b      	bne.n	8006b0e <_malloc_r+0xe2>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	605a      	str	r2, [r3, #4]
 8006aba:	e00f      	b.n	8006adc <_malloc_r+0xb0>
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	1b52      	subs	r2, r2, r5
 8006ac0:	d41f      	bmi.n	8006b02 <_malloc_r+0xd6>
 8006ac2:	2a0b      	cmp	r2, #11
 8006ac4:	d917      	bls.n	8006af6 <_malloc_r+0xca>
 8006ac6:	1961      	adds	r1, r4, r5
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	6025      	str	r5, [r4, #0]
 8006acc:	bf18      	it	ne
 8006ace:	6059      	strne	r1, [r3, #4]
 8006ad0:	6863      	ldr	r3, [r4, #4]
 8006ad2:	bf08      	it	eq
 8006ad4:	f8c8 1000 	streq.w	r1, [r8]
 8006ad8:	5162      	str	r2, [r4, r5]
 8006ada:	604b      	str	r3, [r1, #4]
 8006adc:	4638      	mov	r0, r7
 8006ade:	f104 060b 	add.w	r6, r4, #11
 8006ae2:	f000 f829 	bl	8006b38 <__malloc_unlock>
 8006ae6:	f026 0607 	bic.w	r6, r6, #7
 8006aea:	1d23      	adds	r3, r4, #4
 8006aec:	1af2      	subs	r2, r6, r3
 8006aee:	d0ae      	beq.n	8006a4e <_malloc_r+0x22>
 8006af0:	1b9b      	subs	r3, r3, r6
 8006af2:	50a3      	str	r3, [r4, r2]
 8006af4:	e7ab      	b.n	8006a4e <_malloc_r+0x22>
 8006af6:	42a3      	cmp	r3, r4
 8006af8:	6862      	ldr	r2, [r4, #4]
 8006afa:	d1dd      	bne.n	8006ab8 <_malloc_r+0x8c>
 8006afc:	f8c8 2000 	str.w	r2, [r8]
 8006b00:	e7ec      	b.n	8006adc <_malloc_r+0xb0>
 8006b02:	4623      	mov	r3, r4
 8006b04:	6864      	ldr	r4, [r4, #4]
 8006b06:	e7ac      	b.n	8006a62 <_malloc_r+0x36>
 8006b08:	4634      	mov	r4, r6
 8006b0a:	6876      	ldr	r6, [r6, #4]
 8006b0c:	e7b4      	b.n	8006a78 <_malloc_r+0x4c>
 8006b0e:	4613      	mov	r3, r2
 8006b10:	e7cc      	b.n	8006aac <_malloc_r+0x80>
 8006b12:	230c      	movs	r3, #12
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	4638      	mov	r0, r7
 8006b18:	f000 f80e 	bl	8006b38 <__malloc_unlock>
 8006b1c:	e797      	b.n	8006a4e <_malloc_r+0x22>
 8006b1e:	6025      	str	r5, [r4, #0]
 8006b20:	e7dc      	b.n	8006adc <_malloc_r+0xb0>
 8006b22:	605b      	str	r3, [r3, #4]
 8006b24:	deff      	udf	#255	; 0xff
 8006b26:	bf00      	nop
 8006b28:	200001cc 	.word	0x200001cc

08006b2c <__malloc_lock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__malloc_lock+0x8>)
 8006b2e:	f7ff bee8 	b.w	8006902 <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	200001c8 	.word	0x200001c8

08006b38 <__malloc_unlock>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__malloc_unlock+0x8>)
 8006b3a:	f7ff bee3 	b.w	8006904 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	200001c8 	.word	0x200001c8

08006b44 <_sungetc_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	1c4b      	adds	r3, r1, #1
 8006b48:	4614      	mov	r4, r2
 8006b4a:	d103      	bne.n	8006b54 <_sungetc_r+0x10>
 8006b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8006b50:	4628      	mov	r0, r5
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	8993      	ldrh	r3, [r2, #12]
 8006b56:	f023 0320 	bic.w	r3, r3, #32
 8006b5a:	8193      	strh	r3, [r2, #12]
 8006b5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b5e:	6852      	ldr	r2, [r2, #4]
 8006b60:	b2cd      	uxtb	r5, r1
 8006b62:	b18b      	cbz	r3, 8006b88 <_sungetc_r+0x44>
 8006b64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b66:	4293      	cmp	r3, r2
 8006b68:	dd08      	ble.n	8006b7c <_sungetc_r+0x38>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	1e5a      	subs	r2, r3, #1
 8006b6e:	6022      	str	r2, [r4, #0]
 8006b70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	3301      	adds	r3, #1
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	e7e9      	b.n	8006b50 <_sungetc_r+0xc>
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	f000 fbfa 	bl	8007376 <__submore>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d0f1      	beq.n	8006b6a <_sungetc_r+0x26>
 8006b86:	e7e1      	b.n	8006b4c <_sungetc_r+0x8>
 8006b88:	6921      	ldr	r1, [r4, #16]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	b151      	cbz	r1, 8006ba4 <_sungetc_r+0x60>
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	d208      	bcs.n	8006ba4 <_sungetc_r+0x60>
 8006b92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006b96:	42a9      	cmp	r1, r5
 8006b98:	d104      	bne.n	8006ba4 <_sungetc_r+0x60>
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	3201      	adds	r2, #1
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	6062      	str	r2, [r4, #4]
 8006ba2:	e7d5      	b.n	8006b50 <_sungetc_r+0xc>
 8006ba4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bac:	6363      	str	r3, [r4, #52]	; 0x34
 8006bae:	2303      	movs	r3, #3
 8006bb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e7dc      	b.n	8006b78 <_sungetc_r+0x34>

08006bbe <__ssrefill_r>:
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006bc4:	b169      	cbz	r1, 8006be2 <__ssrefill_r+0x24>
 8006bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	d001      	beq.n	8006bd2 <__ssrefill_r+0x14>
 8006bce:	f7ff feb9 	bl	8006944 <_free_r>
 8006bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8006bda:	b113      	cbz	r3, 8006be2 <__ssrefill_r+0x24>
 8006bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	2300      	movs	r3, #0
 8006be8:	6063      	str	r3, [r4, #4]
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f043 0320 	orr.w	r3, r3, #32
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf6:	e7f3      	b.n	8006be0 <__ssrefill_r+0x22>

08006bf8 <__ssvfiscanf_r>:
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006c02:	2100      	movs	r1, #0
 8006c04:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006c08:	49a6      	ldr	r1, [pc, #664]	; (8006ea4 <__ssvfiscanf_r+0x2ac>)
 8006c0a:	91a0      	str	r1, [sp, #640]	; 0x280
 8006c0c:	f10d 0804 	add.w	r8, sp, #4
 8006c10:	49a5      	ldr	r1, [pc, #660]	; (8006ea8 <__ssvfiscanf_r+0x2b0>)
 8006c12:	4fa6      	ldr	r7, [pc, #664]	; (8006eac <__ssvfiscanf_r+0x2b4>)
 8006c14:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006eb0 <__ssvfiscanf_r+0x2b8>
 8006c18:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	7813      	ldrb	r3, [r2, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 815a 	beq.w	8006ede <__ssvfiscanf_r+0x2e6>
 8006c2a:	5cf9      	ldrb	r1, [r7, r3]
 8006c2c:	f011 0108 	ands.w	r1, r1, #8
 8006c30:	f102 0501 	add.w	r5, r2, #1
 8006c34:	d019      	beq.n	8006c6a <__ssvfiscanf_r+0x72>
 8006c36:	6863      	ldr	r3, [r4, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dd0f      	ble.n	8006c5c <__ssvfiscanf_r+0x64>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	5cba      	ldrb	r2, [r7, r2]
 8006c42:	0712      	lsls	r2, r2, #28
 8006c44:	d401      	bmi.n	8006c4a <__ssvfiscanf_r+0x52>
 8006c46:	462a      	mov	r2, r5
 8006c48:	e7eb      	b.n	8006c22 <__ssvfiscanf_r+0x2a>
 8006c4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006c4c:	3201      	adds	r2, #1
 8006c4e:	9245      	str	r2, [sp, #276]	; 0x114
 8006c50:	6862      	ldr	r2, [r4, #4]
 8006c52:	3301      	adds	r3, #1
 8006c54:	3a01      	subs	r2, #1
 8006c56:	6062      	str	r2, [r4, #4]
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	e7ec      	b.n	8006c36 <__ssvfiscanf_r+0x3e>
 8006c5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4630      	mov	r0, r6
 8006c62:	4798      	blx	r3
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d0e9      	beq.n	8006c3c <__ssvfiscanf_r+0x44>
 8006c68:	e7ed      	b.n	8006c46 <__ssvfiscanf_r+0x4e>
 8006c6a:	2b25      	cmp	r3, #37	; 0x25
 8006c6c:	d012      	beq.n	8006c94 <__ssvfiscanf_r+0x9c>
 8006c6e:	469a      	mov	sl, r3
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f340 8091 	ble.w	8006d9a <__ssvfiscanf_r+0x1a2>
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	7813      	ldrb	r3, [r2, #0]
 8006c7c:	4553      	cmp	r3, sl
 8006c7e:	f040 812e 	bne.w	8006ede <__ssvfiscanf_r+0x2e6>
 8006c82:	6863      	ldr	r3, [r4, #4]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	6063      	str	r3, [r4, #4]
 8006c88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	9345      	str	r3, [sp, #276]	; 0x114
 8006c92:	e7d8      	b.n	8006c46 <__ssvfiscanf_r+0x4e>
 8006c94:	9141      	str	r1, [sp, #260]	; 0x104
 8006c96:	9143      	str	r1, [sp, #268]	; 0x10c
 8006c98:	7853      	ldrb	r3, [r2, #1]
 8006c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9c:	bf02      	ittt	eq
 8006c9e:	2310      	moveq	r3, #16
 8006ca0:	1c95      	addeq	r5, r2, #2
 8006ca2:	9341      	streq	r3, [sp, #260]	; 0x104
 8006ca4:	220a      	movs	r2, #10
 8006ca6:	46aa      	mov	sl, r5
 8006ca8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006cac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006cb0:	2b09      	cmp	r3, #9
 8006cb2:	d91c      	bls.n	8006cee <__ssvfiscanf_r+0xf6>
 8006cb4:	487e      	ldr	r0, [pc, #504]	; (8006eb0 <__ssvfiscanf_r+0x2b8>)
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	f7f9 fa92 	bl	80001e0 <memchr>
 8006cbc:	b138      	cbz	r0, 8006cce <__ssvfiscanf_r+0xd6>
 8006cbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006cc0:	eba0 0009 	sub.w	r0, r0, r9
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4083      	lsls	r3, r0
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	9341      	str	r3, [sp, #260]	; 0x104
 8006ccc:	4655      	mov	r5, sl
 8006cce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cd2:	2b78      	cmp	r3, #120	; 0x78
 8006cd4:	d806      	bhi.n	8006ce4 <__ssvfiscanf_r+0xec>
 8006cd6:	2b57      	cmp	r3, #87	; 0x57
 8006cd8:	d810      	bhi.n	8006cfc <__ssvfiscanf_r+0x104>
 8006cda:	2b25      	cmp	r3, #37	; 0x25
 8006cdc:	d0c7      	beq.n	8006c6e <__ssvfiscanf_r+0x76>
 8006cde:	d857      	bhi.n	8006d90 <__ssvfiscanf_r+0x198>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d065      	beq.n	8006db0 <__ssvfiscanf_r+0x1b8>
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ce8:	230a      	movs	r3, #10
 8006cea:	9342      	str	r3, [sp, #264]	; 0x108
 8006cec:	e076      	b.n	8006ddc <__ssvfiscanf_r+0x1e4>
 8006cee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006cf0:	fb02 1103 	mla	r1, r2, r3, r1
 8006cf4:	3930      	subs	r1, #48	; 0x30
 8006cf6:	9143      	str	r1, [sp, #268]	; 0x10c
 8006cf8:	4655      	mov	r5, sl
 8006cfa:	e7d4      	b.n	8006ca6 <__ssvfiscanf_r+0xae>
 8006cfc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006d00:	2a20      	cmp	r2, #32
 8006d02:	d8ef      	bhi.n	8006ce4 <__ssvfiscanf_r+0xec>
 8006d04:	a101      	add	r1, pc, #4	; (adr r1, 8006d0c <__ssvfiscanf_r+0x114>)
 8006d06:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006dbf 	.word	0x08006dbf
 8006d10:	08006ce5 	.word	0x08006ce5
 8006d14:	08006ce5 	.word	0x08006ce5
 8006d18:	08006e1d 	.word	0x08006e1d
 8006d1c:	08006ce5 	.word	0x08006ce5
 8006d20:	08006ce5 	.word	0x08006ce5
 8006d24:	08006ce5 	.word	0x08006ce5
 8006d28:	08006ce5 	.word	0x08006ce5
 8006d2c:	08006ce5 	.word	0x08006ce5
 8006d30:	08006ce5 	.word	0x08006ce5
 8006d34:	08006ce5 	.word	0x08006ce5
 8006d38:	08006e33 	.word	0x08006e33
 8006d3c:	08006e19 	.word	0x08006e19
 8006d40:	08006d97 	.word	0x08006d97
 8006d44:	08006d97 	.word	0x08006d97
 8006d48:	08006d97 	.word	0x08006d97
 8006d4c:	08006ce5 	.word	0x08006ce5
 8006d50:	08006dd5 	.word	0x08006dd5
 8006d54:	08006ce5 	.word	0x08006ce5
 8006d58:	08006ce5 	.word	0x08006ce5
 8006d5c:	08006ce5 	.word	0x08006ce5
 8006d60:	08006ce5 	.word	0x08006ce5
 8006d64:	08006e43 	.word	0x08006e43
 8006d68:	08006e11 	.word	0x08006e11
 8006d6c:	08006db7 	.word	0x08006db7
 8006d70:	08006ce5 	.word	0x08006ce5
 8006d74:	08006ce5 	.word	0x08006ce5
 8006d78:	08006e3f 	.word	0x08006e3f
 8006d7c:	08006ce5 	.word	0x08006ce5
 8006d80:	08006e19 	.word	0x08006e19
 8006d84:	08006ce5 	.word	0x08006ce5
 8006d88:	08006ce5 	.word	0x08006ce5
 8006d8c:	08006dbf 	.word	0x08006dbf
 8006d90:	3b45      	subs	r3, #69	; 0x45
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d8a6      	bhi.n	8006ce4 <__ssvfiscanf_r+0xec>
 8006d96:	2305      	movs	r3, #5
 8006d98:	e01f      	b.n	8006dda <__ssvfiscanf_r+0x1e2>
 8006d9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4630      	mov	r0, r6
 8006da0:	4798      	blx	r3
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f43f af68 	beq.w	8006c78 <__ssvfiscanf_r+0x80>
 8006da8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f040 808d 	bne.w	8006eca <__ssvfiscanf_r+0x2d2>
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	e08f      	b.n	8006ed6 <__ssvfiscanf_r+0x2de>
 8006db6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006db8:	f042 0220 	orr.w	r2, r2, #32
 8006dbc:	9241      	str	r2, [sp, #260]	; 0x104
 8006dbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc4:	9241      	str	r2, [sp, #260]	; 0x104
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	2b6f      	cmp	r3, #111	; 0x6f
 8006dca:	9242      	str	r2, [sp, #264]	; 0x108
 8006dcc:	bf34      	ite	cc
 8006dce:	2303      	movcc	r3, #3
 8006dd0:	2304      	movcs	r3, #4
 8006dd2:	e002      	b.n	8006dda <__ssvfiscanf_r+0x1e2>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9342      	str	r3, [sp, #264]	; 0x108
 8006dd8:	2303      	movs	r3, #3
 8006dda:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd3d      	ble.n	8006e5e <__ssvfiscanf_r+0x266>
 8006de2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006de4:	0659      	lsls	r1, r3, #25
 8006de6:	d404      	bmi.n	8006df2 <__ssvfiscanf_r+0x1fa>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	5cba      	ldrb	r2, [r7, r2]
 8006dee:	0712      	lsls	r2, r2, #28
 8006df0:	d43c      	bmi.n	8006e6c <__ssvfiscanf_r+0x274>
 8006df2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	dc4b      	bgt.n	8006e90 <__ssvfiscanf_r+0x298>
 8006df8:	466b      	mov	r3, sp
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	a941      	add	r1, sp, #260	; 0x104
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f000 f872 	bl	8006ee8 <_scanf_chars>
 8006e04:	2801      	cmp	r0, #1
 8006e06:	d06a      	beq.n	8006ede <__ssvfiscanf_r+0x2e6>
 8006e08:	2802      	cmp	r0, #2
 8006e0a:	f47f af1c 	bne.w	8006c46 <__ssvfiscanf_r+0x4e>
 8006e0e:	e7cb      	b.n	8006da8 <__ssvfiscanf_r+0x1b0>
 8006e10:	2308      	movs	r3, #8
 8006e12:	9342      	str	r3, [sp, #264]	; 0x108
 8006e14:	2304      	movs	r3, #4
 8006e16:	e7e0      	b.n	8006dda <__ssvfiscanf_r+0x1e2>
 8006e18:	220a      	movs	r2, #10
 8006e1a:	e7d5      	b.n	8006dc8 <__ssvfiscanf_r+0x1d0>
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4640      	mov	r0, r8
 8006e20:	f000 fa70 	bl	8007304 <__sccl>
 8006e24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e2a:	9341      	str	r3, [sp, #260]	; 0x104
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e7d3      	b.n	8006dda <__ssvfiscanf_r+0x1e2>
 8006e32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e38:	9341      	str	r3, [sp, #260]	; 0x104
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e7cd      	b.n	8006dda <__ssvfiscanf_r+0x1e2>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e7cb      	b.n	8006dda <__ssvfiscanf_r+0x1e2>
 8006e42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006e44:	06c3      	lsls	r3, r0, #27
 8006e46:	f53f aefe 	bmi.w	8006c46 <__ssvfiscanf_r+0x4e>
 8006e4a:	9b00      	ldr	r3, [sp, #0]
 8006e4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e4e:	1d19      	adds	r1, r3, #4
 8006e50:	9100      	str	r1, [sp, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	07c0      	lsls	r0, r0, #31
 8006e56:	bf4c      	ite	mi
 8006e58:	801a      	strhmi	r2, [r3, #0]
 8006e5a:	601a      	strpl	r2, [r3, #0]
 8006e5c:	e6f3      	b.n	8006c46 <__ssvfiscanf_r+0x4e>
 8006e5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e60:	4621      	mov	r1, r4
 8006e62:	4630      	mov	r0, r6
 8006e64:	4798      	blx	r3
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d0bb      	beq.n	8006de2 <__ssvfiscanf_r+0x1ea>
 8006e6a:	e79d      	b.n	8006da8 <__ssvfiscanf_r+0x1b0>
 8006e6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e6e:	3201      	adds	r2, #1
 8006e70:	9245      	str	r2, [sp, #276]	; 0x114
 8006e72:	6862      	ldr	r2, [r4, #4]
 8006e74:	3a01      	subs	r2, #1
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	6062      	str	r2, [r4, #4]
 8006e7a:	dd02      	ble.n	8006e82 <__ssvfiscanf_r+0x28a>
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	e7b2      	b.n	8006de8 <__ssvfiscanf_r+0x1f0>
 8006e82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e84:	4621      	mov	r1, r4
 8006e86:	4630      	mov	r0, r6
 8006e88:	4798      	blx	r3
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d0ac      	beq.n	8006de8 <__ssvfiscanf_r+0x1f0>
 8006e8e:	e78b      	b.n	8006da8 <__ssvfiscanf_r+0x1b0>
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	dc0f      	bgt.n	8006eb4 <__ssvfiscanf_r+0x2bc>
 8006e94:	466b      	mov	r3, sp
 8006e96:	4622      	mov	r2, r4
 8006e98:	a941      	add	r1, sp, #260	; 0x104
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f000 f87e 	bl	8006f9c <_scanf_i>
 8006ea0:	e7b0      	b.n	8006e04 <__ssvfiscanf_r+0x20c>
 8006ea2:	bf00      	nop
 8006ea4:	08006b45 	.word	0x08006b45
 8006ea8:	08006bbf 	.word	0x08006bbf
 8006eac:	08008005 	.word	0x08008005
 8006eb0:	08007fe5 	.word	0x08007fe5
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <__ssvfiscanf_r+0x2ec>)
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f43f aec5 	beq.w	8006c46 <__ssvfiscanf_r+0x4e>
 8006ebc:	466b      	mov	r3, sp
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	a941      	add	r1, sp, #260	; 0x104
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	e79c      	b.n	8006e04 <__ssvfiscanf_r+0x20c>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ed0:	bf18      	it	ne
 8006ed2:	f04f 30ff 	movne.w	r0, #4294967295
 8006ed6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006ee0:	e7f9      	b.n	8006ed6 <__ssvfiscanf_r+0x2de>
 8006ee2:	bf00      	nop
 8006ee4:	00000000 	.word	0x00000000

08006ee8 <_scanf_chars>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	4615      	mov	r5, r2
 8006eee:	688a      	ldr	r2, [r1, #8]
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	b932      	cbnz	r2, 8006f04 <_scanf_chars+0x1c>
 8006ef6:	698a      	ldr	r2, [r1, #24]
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	bf0c      	ite	eq
 8006efc:	2201      	moveq	r2, #1
 8006efe:	f04f 32ff 	movne.w	r2, #4294967295
 8006f02:	608a      	str	r2, [r1, #8]
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006f98 <_scanf_chars+0xb0>
 8006f0a:	06d1      	lsls	r1, r2, #27
 8006f0c:	bf5f      	itttt	pl
 8006f0e:	681a      	ldrpl	r2, [r3, #0]
 8006f10:	1d11      	addpl	r1, r2, #4
 8006f12:	6019      	strpl	r1, [r3, #0]
 8006f14:	6816      	ldrpl	r6, [r2, #0]
 8006f16:	2700      	movs	r7, #0
 8006f18:	69a0      	ldr	r0, [r4, #24]
 8006f1a:	b188      	cbz	r0, 8006f40 <_scanf_chars+0x58>
 8006f1c:	2801      	cmp	r0, #1
 8006f1e:	d107      	bne.n	8006f30 <_scanf_chars+0x48>
 8006f20:	682a      	ldr	r2, [r5, #0]
 8006f22:	7811      	ldrb	r1, [r2, #0]
 8006f24:	6962      	ldr	r2, [r4, #20]
 8006f26:	5c52      	ldrb	r2, [r2, r1]
 8006f28:	b952      	cbnz	r2, 8006f40 <_scanf_chars+0x58>
 8006f2a:	2f00      	cmp	r7, #0
 8006f2c:	d031      	beq.n	8006f92 <_scanf_chars+0xaa>
 8006f2e:	e022      	b.n	8006f76 <_scanf_chars+0x8e>
 8006f30:	2802      	cmp	r0, #2
 8006f32:	d120      	bne.n	8006f76 <_scanf_chars+0x8e>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006f3c:	071b      	lsls	r3, r3, #28
 8006f3e:	d41a      	bmi.n	8006f76 <_scanf_chars+0x8e>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	06da      	lsls	r2, r3, #27
 8006f44:	bf5e      	ittt	pl
 8006f46:	682b      	ldrpl	r3, [r5, #0]
 8006f48:	781b      	ldrbpl	r3, [r3, #0]
 8006f4a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006f4e:	682a      	ldr	r2, [r5, #0]
 8006f50:	686b      	ldr	r3, [r5, #4]
 8006f52:	3201      	adds	r2, #1
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	68a2      	ldr	r2, [r4, #8]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	3a01      	subs	r2, #1
 8006f5c:	606b      	str	r3, [r5, #4]
 8006f5e:	3701      	adds	r7, #1
 8006f60:	60a2      	str	r2, [r4, #8]
 8006f62:	b142      	cbz	r2, 8006f76 <_scanf_chars+0x8e>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dcd7      	bgt.n	8006f18 <_scanf_chars+0x30>
 8006f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	4640      	mov	r0, r8
 8006f70:	4798      	blx	r3
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0d0      	beq.n	8006f18 <_scanf_chars+0x30>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	f013 0310 	ands.w	r3, r3, #16
 8006f7c:	d105      	bne.n	8006f8a <_scanf_chars+0xa2>
 8006f7e:	68e2      	ldr	r2, [r4, #12]
 8006f80:	3201      	adds	r2, #1
 8006f82:	60e2      	str	r2, [r4, #12]
 8006f84:	69a2      	ldr	r2, [r4, #24]
 8006f86:	b102      	cbz	r2, 8006f8a <_scanf_chars+0xa2>
 8006f88:	7033      	strb	r3, [r6, #0]
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	443b      	add	r3, r7
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	2000      	movs	r0, #0
 8006f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f96:	bf00      	nop
 8006f98:	08008005 	.word	0x08008005

08006f9c <_scanf_i>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	4698      	mov	r8, r3
 8006fa2:	4b74      	ldr	r3, [pc, #464]	; (8007174 <_scanf_i+0x1d8>)
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	4682      	mov	sl, r0
 8006fa8:	4616      	mov	r6, r2
 8006faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	ab03      	add	r3, sp, #12
 8006fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006fb6:	4b70      	ldr	r3, [pc, #448]	; (8007178 <_scanf_i+0x1dc>)
 8006fb8:	69a1      	ldr	r1, [r4, #24]
 8006fba:	4a70      	ldr	r2, [pc, #448]	; (800717c <_scanf_i+0x1e0>)
 8006fbc:	2903      	cmp	r1, #3
 8006fbe:	bf18      	it	ne
 8006fc0:	461a      	movne	r2, r3
 8006fc2:	68a3      	ldr	r3, [r4, #8]
 8006fc4:	9201      	str	r2, [sp, #4]
 8006fc6:	1e5a      	subs	r2, r3, #1
 8006fc8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006fcc:	bf88      	it	hi
 8006fce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006fd2:	4627      	mov	r7, r4
 8006fd4:	bf82      	ittt	hi
 8006fd6:	eb03 0905 	addhi.w	r9, r3, r5
 8006fda:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006fde:	60a3      	strhi	r3, [r4, #8]
 8006fe0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006fe4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006fe8:	bf98      	it	ls
 8006fea:	f04f 0900 	movls.w	r9, #0
 8006fee:	6023      	str	r3, [r4, #0]
 8006ff0:	463d      	mov	r5, r7
 8006ff2:	f04f 0b00 	mov.w	fp, #0
 8006ff6:	6831      	ldr	r1, [r6, #0]
 8006ff8:	ab03      	add	r3, sp, #12
 8006ffa:	7809      	ldrb	r1, [r1, #0]
 8006ffc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007000:	2202      	movs	r2, #2
 8007002:	f7f9 f8ed 	bl	80001e0 <memchr>
 8007006:	b328      	cbz	r0, 8007054 <_scanf_i+0xb8>
 8007008:	f1bb 0f01 	cmp.w	fp, #1
 800700c:	d159      	bne.n	80070c2 <_scanf_i+0x126>
 800700e:	6862      	ldr	r2, [r4, #4]
 8007010:	b92a      	cbnz	r2, 800701e <_scanf_i+0x82>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	2308      	movs	r3, #8
 8007016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800701a:	6063      	str	r3, [r4, #4]
 800701c:	6022      	str	r2, [r4, #0]
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007024:	6022      	str	r2, [r4, #0]
 8007026:	68a2      	ldr	r2, [r4, #8]
 8007028:	1e51      	subs	r1, r2, #1
 800702a:	60a1      	str	r1, [r4, #8]
 800702c:	b192      	cbz	r2, 8007054 <_scanf_i+0xb8>
 800702e:	6832      	ldr	r2, [r6, #0]
 8007030:	1c51      	adds	r1, r2, #1
 8007032:	6031      	str	r1, [r6, #0]
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	f805 2b01 	strb.w	r2, [r5], #1
 800703a:	6872      	ldr	r2, [r6, #4]
 800703c:	3a01      	subs	r2, #1
 800703e:	2a00      	cmp	r2, #0
 8007040:	6072      	str	r2, [r6, #4]
 8007042:	dc07      	bgt.n	8007054 <_scanf_i+0xb8>
 8007044:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007048:	4631      	mov	r1, r6
 800704a:	4650      	mov	r0, sl
 800704c:	4790      	blx	r2
 800704e:	2800      	cmp	r0, #0
 8007050:	f040 8085 	bne.w	800715e <_scanf_i+0x1c2>
 8007054:	f10b 0b01 	add.w	fp, fp, #1
 8007058:	f1bb 0f03 	cmp.w	fp, #3
 800705c:	d1cb      	bne.n	8006ff6 <_scanf_i+0x5a>
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	b90b      	cbnz	r3, 8007066 <_scanf_i+0xca>
 8007062:	230a      	movs	r3, #10
 8007064:	6063      	str	r3, [r4, #4]
 8007066:	6863      	ldr	r3, [r4, #4]
 8007068:	4945      	ldr	r1, [pc, #276]	; (8007180 <_scanf_i+0x1e4>)
 800706a:	6960      	ldr	r0, [r4, #20]
 800706c:	1ac9      	subs	r1, r1, r3
 800706e:	f000 f949 	bl	8007304 <__sccl>
 8007072:	f04f 0b00 	mov.w	fp, #0
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d03d      	beq.n	80070fa <_scanf_i+0x15e>
 800707e:	6831      	ldr	r1, [r6, #0]
 8007080:	6960      	ldr	r0, [r4, #20]
 8007082:	f891 c000 	ldrb.w	ip, [r1]
 8007086:	f810 000c 	ldrb.w	r0, [r0, ip]
 800708a:	2800      	cmp	r0, #0
 800708c:	d035      	beq.n	80070fa <_scanf_i+0x15e>
 800708e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007092:	d124      	bne.n	80070de <_scanf_i+0x142>
 8007094:	0510      	lsls	r0, r2, #20
 8007096:	d522      	bpl.n	80070de <_scanf_i+0x142>
 8007098:	f10b 0b01 	add.w	fp, fp, #1
 800709c:	f1b9 0f00 	cmp.w	r9, #0
 80070a0:	d003      	beq.n	80070aa <_scanf_i+0x10e>
 80070a2:	3301      	adds	r3, #1
 80070a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80070a8:	60a3      	str	r3, [r4, #8]
 80070aa:	6873      	ldr	r3, [r6, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	6073      	str	r3, [r6, #4]
 80070b2:	dd1b      	ble.n	80070ec <_scanf_i+0x150>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	6033      	str	r3, [r6, #0]
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	3b01      	subs	r3, #1
 80070be:	60a3      	str	r3, [r4, #8]
 80070c0:	e7d9      	b.n	8007076 <_scanf_i+0xda>
 80070c2:	f1bb 0f02 	cmp.w	fp, #2
 80070c6:	d1ae      	bne.n	8007026 <_scanf_i+0x8a>
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80070ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80070d2:	d1bf      	bne.n	8007054 <_scanf_i+0xb8>
 80070d4:	2310      	movs	r3, #16
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070dc:	e7a2      	b.n	8007024 <_scanf_i+0x88>
 80070de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	780b      	ldrb	r3, [r1, #0]
 80070e6:	f805 3b01 	strb.w	r3, [r5], #1
 80070ea:	e7de      	b.n	80070aa <_scanf_i+0x10e>
 80070ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070f0:	4631      	mov	r1, r6
 80070f2:	4650      	mov	r0, sl
 80070f4:	4798      	blx	r3
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d0df      	beq.n	80070ba <_scanf_i+0x11e>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	05d9      	lsls	r1, r3, #23
 80070fe:	d50d      	bpl.n	800711c <_scanf_i+0x180>
 8007100:	42bd      	cmp	r5, r7
 8007102:	d909      	bls.n	8007118 <_scanf_i+0x17c>
 8007104:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800710c:	4632      	mov	r2, r6
 800710e:	4650      	mov	r0, sl
 8007110:	4798      	blx	r3
 8007112:	f105 39ff 	add.w	r9, r5, #4294967295
 8007116:	464d      	mov	r5, r9
 8007118:	42bd      	cmp	r5, r7
 800711a:	d028      	beq.n	800716e <_scanf_i+0x1d2>
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	f012 0210 	ands.w	r2, r2, #16
 8007122:	d113      	bne.n	800714c <_scanf_i+0x1b0>
 8007124:	702a      	strb	r2, [r5, #0]
 8007126:	6863      	ldr	r3, [r4, #4]
 8007128:	9e01      	ldr	r6, [sp, #4]
 800712a:	4639      	mov	r1, r7
 800712c:	4650      	mov	r0, sl
 800712e:	47b0      	blx	r6
 8007130:	f8d8 3000 	ldr.w	r3, [r8]
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	1d1a      	adds	r2, r3, #4
 8007138:	f8c8 2000 	str.w	r2, [r8]
 800713c:	f011 0f20 	tst.w	r1, #32
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	d00f      	beq.n	8007164 <_scanf_i+0x1c8>
 8007144:	6018      	str	r0, [r3, #0]
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	60e3      	str	r3, [r4, #12]
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	1bed      	subs	r5, r5, r7
 8007150:	445d      	add	r5, fp
 8007152:	442b      	add	r3, r5
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	2000      	movs	r0, #0
 8007158:	b007      	add	sp, #28
 800715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715e:	f04f 0b00 	mov.w	fp, #0
 8007162:	e7ca      	b.n	80070fa <_scanf_i+0x15e>
 8007164:	07ca      	lsls	r2, r1, #31
 8007166:	bf4c      	ite	mi
 8007168:	8018      	strhmi	r0, [r3, #0]
 800716a:	6018      	strpl	r0, [r3, #0]
 800716c:	e7eb      	b.n	8007146 <_scanf_i+0x1aa>
 800716e:	2001      	movs	r0, #1
 8007170:	e7f2      	b.n	8007158 <_scanf_i+0x1bc>
 8007172:	bf00      	nop
 8007174:	08007f14 	.word	0x08007f14
 8007178:	08007681 	.word	0x08007681
 800717c:	08007599 	.word	0x08007599
 8007180:	08007ff9 	.word	0x08007ff9

08007184 <__sflush_r>:
 8007184:	898a      	ldrh	r2, [r1, #12]
 8007186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718a:	4605      	mov	r5, r0
 800718c:	0710      	lsls	r0, r2, #28
 800718e:	460c      	mov	r4, r1
 8007190:	d458      	bmi.n	8007244 <__sflush_r+0xc0>
 8007192:	684b      	ldr	r3, [r1, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	dc05      	bgt.n	80071a4 <__sflush_r+0x20>
 8007198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	dc02      	bgt.n	80071a4 <__sflush_r+0x20>
 800719e:	2000      	movs	r0, #0
 80071a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	d0f9      	beq.n	800719e <__sflush_r+0x1a>
 80071aa:	2300      	movs	r3, #0
 80071ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071b0:	682f      	ldr	r7, [r5, #0]
 80071b2:	6a21      	ldr	r1, [r4, #32]
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	d032      	beq.n	800721e <__sflush_r+0x9a>
 80071b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	075a      	lsls	r2, r3, #29
 80071be:	d505      	bpl.n	80071cc <__sflush_r+0x48>
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	1ac0      	subs	r0, r0, r3
 80071c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071c6:	b10b      	cbz	r3, 80071cc <__sflush_r+0x48>
 80071c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ca:	1ac0      	subs	r0, r0, r3
 80071cc:	2300      	movs	r3, #0
 80071ce:	4602      	mov	r2, r0
 80071d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071d2:	6a21      	ldr	r1, [r4, #32]
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b0      	blx	r6
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	d106      	bne.n	80071ec <__sflush_r+0x68>
 80071de:	6829      	ldr	r1, [r5, #0]
 80071e0:	291d      	cmp	r1, #29
 80071e2:	d82b      	bhi.n	800723c <__sflush_r+0xb8>
 80071e4:	4a29      	ldr	r2, [pc, #164]	; (800728c <__sflush_r+0x108>)
 80071e6:	410a      	asrs	r2, r1
 80071e8:	07d6      	lsls	r6, r2, #31
 80071ea:	d427      	bmi.n	800723c <__sflush_r+0xb8>
 80071ec:	2200      	movs	r2, #0
 80071ee:	6062      	str	r2, [r4, #4]
 80071f0:	04d9      	lsls	r1, r3, #19
 80071f2:	6922      	ldr	r2, [r4, #16]
 80071f4:	6022      	str	r2, [r4, #0]
 80071f6:	d504      	bpl.n	8007202 <__sflush_r+0x7e>
 80071f8:	1c42      	adds	r2, r0, #1
 80071fa:	d101      	bne.n	8007200 <__sflush_r+0x7c>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b903      	cbnz	r3, 8007202 <__sflush_r+0x7e>
 8007200:	6560      	str	r0, [r4, #84]	; 0x54
 8007202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007204:	602f      	str	r7, [r5, #0]
 8007206:	2900      	cmp	r1, #0
 8007208:	d0c9      	beq.n	800719e <__sflush_r+0x1a>
 800720a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800720e:	4299      	cmp	r1, r3
 8007210:	d002      	beq.n	8007218 <__sflush_r+0x94>
 8007212:	4628      	mov	r0, r5
 8007214:	f7ff fb96 	bl	8006944 <_free_r>
 8007218:	2000      	movs	r0, #0
 800721a:	6360      	str	r0, [r4, #52]	; 0x34
 800721c:	e7c0      	b.n	80071a0 <__sflush_r+0x1c>
 800721e:	2301      	movs	r3, #1
 8007220:	4628      	mov	r0, r5
 8007222:	47b0      	blx	r6
 8007224:	1c41      	adds	r1, r0, #1
 8007226:	d1c8      	bne.n	80071ba <__sflush_r+0x36>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0c5      	beq.n	80071ba <__sflush_r+0x36>
 800722e:	2b1d      	cmp	r3, #29
 8007230:	d001      	beq.n	8007236 <__sflush_r+0xb2>
 8007232:	2b16      	cmp	r3, #22
 8007234:	d101      	bne.n	800723a <__sflush_r+0xb6>
 8007236:	602f      	str	r7, [r5, #0]
 8007238:	e7b1      	b.n	800719e <__sflush_r+0x1a>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	e7ad      	b.n	80071a0 <__sflush_r+0x1c>
 8007244:	690f      	ldr	r7, [r1, #16]
 8007246:	2f00      	cmp	r7, #0
 8007248:	d0a9      	beq.n	800719e <__sflush_r+0x1a>
 800724a:	0793      	lsls	r3, r2, #30
 800724c:	680e      	ldr	r6, [r1, #0]
 800724e:	bf08      	it	eq
 8007250:	694b      	ldreq	r3, [r1, #20]
 8007252:	600f      	str	r7, [r1, #0]
 8007254:	bf18      	it	ne
 8007256:	2300      	movne	r3, #0
 8007258:	eba6 0807 	sub.w	r8, r6, r7
 800725c:	608b      	str	r3, [r1, #8]
 800725e:	f1b8 0f00 	cmp.w	r8, #0
 8007262:	dd9c      	ble.n	800719e <__sflush_r+0x1a>
 8007264:	6a21      	ldr	r1, [r4, #32]
 8007266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007268:	4643      	mov	r3, r8
 800726a:	463a      	mov	r2, r7
 800726c:	4628      	mov	r0, r5
 800726e:	47b0      	blx	r6
 8007270:	2800      	cmp	r0, #0
 8007272:	dc06      	bgt.n	8007282 <__sflush_r+0xfe>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	e78e      	b.n	80071a0 <__sflush_r+0x1c>
 8007282:	4407      	add	r7, r0
 8007284:	eba8 0800 	sub.w	r8, r8, r0
 8007288:	e7e9      	b.n	800725e <__sflush_r+0xda>
 800728a:	bf00      	nop
 800728c:	dfbffffe 	.word	0xdfbffffe

08007290 <_fflush_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	690b      	ldr	r3, [r1, #16]
 8007294:	4605      	mov	r5, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b913      	cbnz	r3, 80072a0 <_fflush_r+0x10>
 800729a:	2500      	movs	r5, #0
 800729c:	4628      	mov	r0, r5
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	b118      	cbz	r0, 80072aa <_fflush_r+0x1a>
 80072a2:	6a03      	ldr	r3, [r0, #32]
 80072a4:	b90b      	cbnz	r3, 80072aa <_fflush_r+0x1a>
 80072a6:	f7ff f9af 	bl	8006608 <__sinit>
 80072aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f3      	beq.n	800729a <_fflush_r+0xa>
 80072b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072b4:	07d0      	lsls	r0, r2, #31
 80072b6:	d404      	bmi.n	80072c2 <_fflush_r+0x32>
 80072b8:	0599      	lsls	r1, r3, #22
 80072ba:	d402      	bmi.n	80072c2 <_fflush_r+0x32>
 80072bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072be:	f7ff fb20 	bl	8006902 <__retarget_lock_acquire_recursive>
 80072c2:	4628      	mov	r0, r5
 80072c4:	4621      	mov	r1, r4
 80072c6:	f7ff ff5d 	bl	8007184 <__sflush_r>
 80072ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072cc:	07da      	lsls	r2, r3, #31
 80072ce:	4605      	mov	r5, r0
 80072d0:	d4e4      	bmi.n	800729c <_fflush_r+0xc>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	059b      	lsls	r3, r3, #22
 80072d6:	d4e1      	bmi.n	800729c <_fflush_r+0xc>
 80072d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072da:	f7ff fb13 	bl	8006904 <__retarget_lock_release_recursive>
 80072de:	e7dd      	b.n	800729c <_fflush_r+0xc>

080072e0 <fiprintf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b503      	push	{r0, r1, lr}
 80072e4:	4601      	mov	r1, r0
 80072e6:	ab03      	add	r3, sp, #12
 80072e8:	4805      	ldr	r0, [pc, #20]	; (8007300 <fiprintf+0x20>)
 80072ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ee:	6800      	ldr	r0, [r0, #0]
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	f000 f9f1 	bl	80076d8 <_vfiprintf_r>
 80072f6:	b002      	add	sp, #8
 80072f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072fc:	b003      	add	sp, #12
 80072fe:	4770      	bx	lr
 8007300:	20000064 	.word	0x20000064

08007304 <__sccl>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	780b      	ldrb	r3, [r1, #0]
 8007308:	4604      	mov	r4, r0
 800730a:	2b5e      	cmp	r3, #94	; 0x5e
 800730c:	bf0b      	itete	eq
 800730e:	784b      	ldrbeq	r3, [r1, #1]
 8007310:	1c4a      	addne	r2, r1, #1
 8007312:	1c8a      	addeq	r2, r1, #2
 8007314:	2100      	movne	r1, #0
 8007316:	bf08      	it	eq
 8007318:	2101      	moveq	r1, #1
 800731a:	3801      	subs	r0, #1
 800731c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007320:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007324:	42a8      	cmp	r0, r5
 8007326:	d1fb      	bne.n	8007320 <__sccl+0x1c>
 8007328:	b90b      	cbnz	r3, 800732e <__sccl+0x2a>
 800732a:	1e50      	subs	r0, r2, #1
 800732c:	bd70      	pop	{r4, r5, r6, pc}
 800732e:	f081 0101 	eor.w	r1, r1, #1
 8007332:	54e1      	strb	r1, [r4, r3]
 8007334:	4610      	mov	r0, r2
 8007336:	4602      	mov	r2, r0
 8007338:	f812 5b01 	ldrb.w	r5, [r2], #1
 800733c:	2d2d      	cmp	r5, #45	; 0x2d
 800733e:	d005      	beq.n	800734c <__sccl+0x48>
 8007340:	2d5d      	cmp	r5, #93	; 0x5d
 8007342:	d016      	beq.n	8007372 <__sccl+0x6e>
 8007344:	2d00      	cmp	r5, #0
 8007346:	d0f1      	beq.n	800732c <__sccl+0x28>
 8007348:	462b      	mov	r3, r5
 800734a:	e7f2      	b.n	8007332 <__sccl+0x2e>
 800734c:	7846      	ldrb	r6, [r0, #1]
 800734e:	2e5d      	cmp	r6, #93	; 0x5d
 8007350:	d0fa      	beq.n	8007348 <__sccl+0x44>
 8007352:	42b3      	cmp	r3, r6
 8007354:	dcf8      	bgt.n	8007348 <__sccl+0x44>
 8007356:	3002      	adds	r0, #2
 8007358:	461a      	mov	r2, r3
 800735a:	3201      	adds	r2, #1
 800735c:	4296      	cmp	r6, r2
 800735e:	54a1      	strb	r1, [r4, r2]
 8007360:	dcfb      	bgt.n	800735a <__sccl+0x56>
 8007362:	1af2      	subs	r2, r6, r3
 8007364:	3a01      	subs	r2, #1
 8007366:	1c5d      	adds	r5, r3, #1
 8007368:	42b3      	cmp	r3, r6
 800736a:	bfa8      	it	ge
 800736c:	2200      	movge	r2, #0
 800736e:	18ab      	adds	r3, r5, r2
 8007370:	e7e1      	b.n	8007336 <__sccl+0x32>
 8007372:	4610      	mov	r0, r2
 8007374:	e7da      	b.n	800732c <__sccl+0x28>

08007376 <__submore>:
 8007376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800737a:	460c      	mov	r4, r1
 800737c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800737e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007382:	4299      	cmp	r1, r3
 8007384:	d11d      	bne.n	80073c2 <__submore+0x4c>
 8007386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800738a:	f7ff fb4f 	bl	8006a2c <_malloc_r>
 800738e:	b918      	cbnz	r0, 8007398 <__submore+0x22>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800739c:	63a3      	str	r3, [r4, #56]	; 0x38
 800739e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80073a2:	6360      	str	r0, [r4, #52]	; 0x34
 80073a4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80073a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80073ac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80073b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80073b4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80073b8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80073bc:	6020      	str	r0, [r4, #0]
 80073be:	2000      	movs	r0, #0
 80073c0:	e7e8      	b.n	8007394 <__submore+0x1e>
 80073c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80073c4:	0077      	lsls	r7, r6, #1
 80073c6:	463a      	mov	r2, r7
 80073c8:	f000 f835 	bl	8007436 <_realloc_r>
 80073cc:	4605      	mov	r5, r0
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d0de      	beq.n	8007390 <__submore+0x1a>
 80073d2:	eb00 0806 	add.w	r8, r0, r6
 80073d6:	4601      	mov	r1, r0
 80073d8:	4632      	mov	r2, r6
 80073da:	4640      	mov	r0, r8
 80073dc:	f000 f816 	bl	800740c <memcpy>
 80073e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80073e4:	f8c4 8000 	str.w	r8, [r4]
 80073e8:	e7e9      	b.n	80073be <__submore+0x48>
	...

080073ec <_sbrk_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d06      	ldr	r5, [pc, #24]	; (8007408 <_sbrk_r+0x1c>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	f7fb fd52 	bl	8002ea0 <_sbrk>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_sbrk_r+0x1a>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_sbrk_r+0x1a>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	200001c4 	.word	0x200001c4

0800740c <memcpy>:
 800740c:	440a      	add	r2, r1
 800740e:	4291      	cmp	r1, r2
 8007410:	f100 33ff 	add.w	r3, r0, #4294967295
 8007414:	d100      	bne.n	8007418 <memcpy+0xc>
 8007416:	4770      	bx	lr
 8007418:	b510      	push	{r4, lr}
 800741a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800741e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007422:	4291      	cmp	r1, r2
 8007424:	d1f9      	bne.n	800741a <memcpy+0xe>
 8007426:	bd10      	pop	{r4, pc}

08007428 <abort>:
 8007428:	b508      	push	{r3, lr}
 800742a:	2006      	movs	r0, #6
 800742c:	f000 fcbc 	bl	8007da8 <raise>
 8007430:	2001      	movs	r0, #1
 8007432:	f7fb fcbd 	bl	8002db0 <_exit>

08007436 <_realloc_r>:
 8007436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743a:	4680      	mov	r8, r0
 800743c:	4614      	mov	r4, r2
 800743e:	460e      	mov	r6, r1
 8007440:	b921      	cbnz	r1, 800744c <_realloc_r+0x16>
 8007442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	4611      	mov	r1, r2
 8007448:	f7ff baf0 	b.w	8006a2c <_malloc_r>
 800744c:	b92a      	cbnz	r2, 800745a <_realloc_r+0x24>
 800744e:	f7ff fa79 	bl	8006944 <_free_r>
 8007452:	4625      	mov	r5, r4
 8007454:	4628      	mov	r0, r5
 8007456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745a:	f000 fcc1 	bl	8007de0 <_malloc_usable_size_r>
 800745e:	4284      	cmp	r4, r0
 8007460:	4607      	mov	r7, r0
 8007462:	d802      	bhi.n	800746a <_realloc_r+0x34>
 8007464:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007468:	d812      	bhi.n	8007490 <_realloc_r+0x5a>
 800746a:	4621      	mov	r1, r4
 800746c:	4640      	mov	r0, r8
 800746e:	f7ff fadd 	bl	8006a2c <_malloc_r>
 8007472:	4605      	mov	r5, r0
 8007474:	2800      	cmp	r0, #0
 8007476:	d0ed      	beq.n	8007454 <_realloc_r+0x1e>
 8007478:	42bc      	cmp	r4, r7
 800747a:	4622      	mov	r2, r4
 800747c:	4631      	mov	r1, r6
 800747e:	bf28      	it	cs
 8007480:	463a      	movcs	r2, r7
 8007482:	f7ff ffc3 	bl	800740c <memcpy>
 8007486:	4631      	mov	r1, r6
 8007488:	4640      	mov	r0, r8
 800748a:	f7ff fa5b 	bl	8006944 <_free_r>
 800748e:	e7e1      	b.n	8007454 <_realloc_r+0x1e>
 8007490:	4635      	mov	r5, r6
 8007492:	e7df      	b.n	8007454 <_realloc_r+0x1e>

08007494 <_strtol_l.constprop.0>:
 8007494:	2b01      	cmp	r3, #1
 8007496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749a:	d001      	beq.n	80074a0 <_strtol_l.constprop.0+0xc>
 800749c:	2b24      	cmp	r3, #36	; 0x24
 800749e:	d906      	bls.n	80074ae <_strtol_l.constprop.0+0x1a>
 80074a0:	f7ff fa04 	bl	80068ac <__errno>
 80074a4:	2316      	movs	r3, #22
 80074a6:	6003      	str	r3, [r0, #0]
 80074a8:	2000      	movs	r0, #0
 80074aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007594 <_strtol_l.constprop.0+0x100>
 80074b2:	460d      	mov	r5, r1
 80074b4:	462e      	mov	r6, r5
 80074b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80074be:	f017 0708 	ands.w	r7, r7, #8
 80074c2:	d1f7      	bne.n	80074b4 <_strtol_l.constprop.0+0x20>
 80074c4:	2c2d      	cmp	r4, #45	; 0x2d
 80074c6:	d132      	bne.n	800752e <_strtol_l.constprop.0+0x9a>
 80074c8:	782c      	ldrb	r4, [r5, #0]
 80074ca:	2701      	movs	r7, #1
 80074cc:	1cb5      	adds	r5, r6, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d05b      	beq.n	800758a <_strtol_l.constprop.0+0xf6>
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d109      	bne.n	80074ea <_strtol_l.constprop.0+0x56>
 80074d6:	2c30      	cmp	r4, #48	; 0x30
 80074d8:	d107      	bne.n	80074ea <_strtol_l.constprop.0+0x56>
 80074da:	782c      	ldrb	r4, [r5, #0]
 80074dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074e0:	2c58      	cmp	r4, #88	; 0x58
 80074e2:	d14d      	bne.n	8007580 <_strtol_l.constprop.0+0xec>
 80074e4:	786c      	ldrb	r4, [r5, #1]
 80074e6:	2310      	movs	r3, #16
 80074e8:	3502      	adds	r5, #2
 80074ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80074ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80074f2:	f04f 0e00 	mov.w	lr, #0
 80074f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80074fa:	4676      	mov	r6, lr
 80074fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8007500:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007504:	f1bc 0f09 	cmp.w	ip, #9
 8007508:	d816      	bhi.n	8007538 <_strtol_l.constprop.0+0xa4>
 800750a:	4664      	mov	r4, ip
 800750c:	42a3      	cmp	r3, r4
 800750e:	dd24      	ble.n	800755a <_strtol_l.constprop.0+0xc6>
 8007510:	f1be 3fff 	cmp.w	lr, #4294967295
 8007514:	d008      	beq.n	8007528 <_strtol_l.constprop.0+0x94>
 8007516:	45b1      	cmp	r9, r6
 8007518:	d31c      	bcc.n	8007554 <_strtol_l.constprop.0+0xc0>
 800751a:	d101      	bne.n	8007520 <_strtol_l.constprop.0+0x8c>
 800751c:	45a2      	cmp	sl, r4
 800751e:	db19      	blt.n	8007554 <_strtol_l.constprop.0+0xc0>
 8007520:	fb06 4603 	mla	r6, r6, r3, r4
 8007524:	f04f 0e01 	mov.w	lr, #1
 8007528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800752c:	e7e8      	b.n	8007500 <_strtol_l.constprop.0+0x6c>
 800752e:	2c2b      	cmp	r4, #43	; 0x2b
 8007530:	bf04      	itt	eq
 8007532:	782c      	ldrbeq	r4, [r5, #0]
 8007534:	1cb5      	addeq	r5, r6, #2
 8007536:	e7ca      	b.n	80074ce <_strtol_l.constprop.0+0x3a>
 8007538:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800753c:	f1bc 0f19 	cmp.w	ip, #25
 8007540:	d801      	bhi.n	8007546 <_strtol_l.constprop.0+0xb2>
 8007542:	3c37      	subs	r4, #55	; 0x37
 8007544:	e7e2      	b.n	800750c <_strtol_l.constprop.0+0x78>
 8007546:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800754a:	f1bc 0f19 	cmp.w	ip, #25
 800754e:	d804      	bhi.n	800755a <_strtol_l.constprop.0+0xc6>
 8007550:	3c57      	subs	r4, #87	; 0x57
 8007552:	e7db      	b.n	800750c <_strtol_l.constprop.0+0x78>
 8007554:	f04f 3eff 	mov.w	lr, #4294967295
 8007558:	e7e6      	b.n	8007528 <_strtol_l.constprop.0+0x94>
 800755a:	f1be 3fff 	cmp.w	lr, #4294967295
 800755e:	d105      	bne.n	800756c <_strtol_l.constprop.0+0xd8>
 8007560:	2322      	movs	r3, #34	; 0x22
 8007562:	6003      	str	r3, [r0, #0]
 8007564:	4646      	mov	r6, r8
 8007566:	b942      	cbnz	r2, 800757a <_strtol_l.constprop.0+0xe6>
 8007568:	4630      	mov	r0, r6
 800756a:	e79e      	b.n	80074aa <_strtol_l.constprop.0+0x16>
 800756c:	b107      	cbz	r7, 8007570 <_strtol_l.constprop.0+0xdc>
 800756e:	4276      	negs	r6, r6
 8007570:	2a00      	cmp	r2, #0
 8007572:	d0f9      	beq.n	8007568 <_strtol_l.constprop.0+0xd4>
 8007574:	f1be 0f00 	cmp.w	lr, #0
 8007578:	d000      	beq.n	800757c <_strtol_l.constprop.0+0xe8>
 800757a:	1e69      	subs	r1, r5, #1
 800757c:	6011      	str	r1, [r2, #0]
 800757e:	e7f3      	b.n	8007568 <_strtol_l.constprop.0+0xd4>
 8007580:	2430      	movs	r4, #48	; 0x30
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1b1      	bne.n	80074ea <_strtol_l.constprop.0+0x56>
 8007586:	2308      	movs	r3, #8
 8007588:	e7af      	b.n	80074ea <_strtol_l.constprop.0+0x56>
 800758a:	2c30      	cmp	r4, #48	; 0x30
 800758c:	d0a5      	beq.n	80074da <_strtol_l.constprop.0+0x46>
 800758e:	230a      	movs	r3, #10
 8007590:	e7ab      	b.n	80074ea <_strtol_l.constprop.0+0x56>
 8007592:	bf00      	nop
 8007594:	08008005 	.word	0x08008005

08007598 <_strtol_r>:
 8007598:	f7ff bf7c 	b.w	8007494 <_strtol_l.constprop.0>

0800759c <_strtoul_l.constprop.0>:
 800759c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075a0:	4f36      	ldr	r7, [pc, #216]	; (800767c <_strtoul_l.constprop.0+0xe0>)
 80075a2:	4686      	mov	lr, r0
 80075a4:	460d      	mov	r5, r1
 80075a6:	4628      	mov	r0, r5
 80075a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075ac:	5d3e      	ldrb	r6, [r7, r4]
 80075ae:	f016 0608 	ands.w	r6, r6, #8
 80075b2:	d1f8      	bne.n	80075a6 <_strtoul_l.constprop.0+0xa>
 80075b4:	2c2d      	cmp	r4, #45	; 0x2d
 80075b6:	d130      	bne.n	800761a <_strtoul_l.constprop.0+0x7e>
 80075b8:	782c      	ldrb	r4, [r5, #0]
 80075ba:	2601      	movs	r6, #1
 80075bc:	1c85      	adds	r5, r0, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d057      	beq.n	8007672 <_strtoul_l.constprop.0+0xd6>
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d109      	bne.n	80075da <_strtoul_l.constprop.0+0x3e>
 80075c6:	2c30      	cmp	r4, #48	; 0x30
 80075c8:	d107      	bne.n	80075da <_strtoul_l.constprop.0+0x3e>
 80075ca:	7828      	ldrb	r0, [r5, #0]
 80075cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80075d0:	2858      	cmp	r0, #88	; 0x58
 80075d2:	d149      	bne.n	8007668 <_strtoul_l.constprop.0+0xcc>
 80075d4:	786c      	ldrb	r4, [r5, #1]
 80075d6:	2310      	movs	r3, #16
 80075d8:	3502      	adds	r5, #2
 80075da:	f04f 38ff 	mov.w	r8, #4294967295
 80075de:	2700      	movs	r7, #0
 80075e0:	fbb8 f8f3 	udiv	r8, r8, r3
 80075e4:	fb03 f908 	mul.w	r9, r3, r8
 80075e8:	ea6f 0909 	mvn.w	r9, r9
 80075ec:	4638      	mov	r0, r7
 80075ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80075f2:	f1bc 0f09 	cmp.w	ip, #9
 80075f6:	d815      	bhi.n	8007624 <_strtoul_l.constprop.0+0x88>
 80075f8:	4664      	mov	r4, ip
 80075fa:	42a3      	cmp	r3, r4
 80075fc:	dd23      	ble.n	8007646 <_strtoul_l.constprop.0+0xaa>
 80075fe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007602:	d007      	beq.n	8007614 <_strtoul_l.constprop.0+0x78>
 8007604:	4580      	cmp	r8, r0
 8007606:	d31b      	bcc.n	8007640 <_strtoul_l.constprop.0+0xa4>
 8007608:	d101      	bne.n	800760e <_strtoul_l.constprop.0+0x72>
 800760a:	45a1      	cmp	r9, r4
 800760c:	db18      	blt.n	8007640 <_strtoul_l.constprop.0+0xa4>
 800760e:	fb00 4003 	mla	r0, r0, r3, r4
 8007612:	2701      	movs	r7, #1
 8007614:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007618:	e7e9      	b.n	80075ee <_strtoul_l.constprop.0+0x52>
 800761a:	2c2b      	cmp	r4, #43	; 0x2b
 800761c:	bf04      	itt	eq
 800761e:	782c      	ldrbeq	r4, [r5, #0]
 8007620:	1c85      	addeq	r5, r0, #2
 8007622:	e7cc      	b.n	80075be <_strtoul_l.constprop.0+0x22>
 8007624:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007628:	f1bc 0f19 	cmp.w	ip, #25
 800762c:	d801      	bhi.n	8007632 <_strtoul_l.constprop.0+0x96>
 800762e:	3c37      	subs	r4, #55	; 0x37
 8007630:	e7e3      	b.n	80075fa <_strtoul_l.constprop.0+0x5e>
 8007632:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007636:	f1bc 0f19 	cmp.w	ip, #25
 800763a:	d804      	bhi.n	8007646 <_strtoul_l.constprop.0+0xaa>
 800763c:	3c57      	subs	r4, #87	; 0x57
 800763e:	e7dc      	b.n	80075fa <_strtoul_l.constprop.0+0x5e>
 8007640:	f04f 37ff 	mov.w	r7, #4294967295
 8007644:	e7e6      	b.n	8007614 <_strtoul_l.constprop.0+0x78>
 8007646:	1c7b      	adds	r3, r7, #1
 8007648:	d106      	bne.n	8007658 <_strtoul_l.constprop.0+0xbc>
 800764a:	2322      	movs	r3, #34	; 0x22
 800764c:	f8ce 3000 	str.w	r3, [lr]
 8007650:	4638      	mov	r0, r7
 8007652:	b932      	cbnz	r2, 8007662 <_strtoul_l.constprop.0+0xc6>
 8007654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007658:	b106      	cbz	r6, 800765c <_strtoul_l.constprop.0+0xc0>
 800765a:	4240      	negs	r0, r0
 800765c:	2a00      	cmp	r2, #0
 800765e:	d0f9      	beq.n	8007654 <_strtoul_l.constprop.0+0xb8>
 8007660:	b107      	cbz	r7, 8007664 <_strtoul_l.constprop.0+0xc8>
 8007662:	1e69      	subs	r1, r5, #1
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	e7f5      	b.n	8007654 <_strtoul_l.constprop.0+0xb8>
 8007668:	2430      	movs	r4, #48	; 0x30
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1b5      	bne.n	80075da <_strtoul_l.constprop.0+0x3e>
 800766e:	2308      	movs	r3, #8
 8007670:	e7b3      	b.n	80075da <_strtoul_l.constprop.0+0x3e>
 8007672:	2c30      	cmp	r4, #48	; 0x30
 8007674:	d0a9      	beq.n	80075ca <_strtoul_l.constprop.0+0x2e>
 8007676:	230a      	movs	r3, #10
 8007678:	e7af      	b.n	80075da <_strtoul_l.constprop.0+0x3e>
 800767a:	bf00      	nop
 800767c:	08008005 	.word	0x08008005

08007680 <_strtoul_r>:
 8007680:	f7ff bf8c 	b.w	800759c <_strtoul_l.constprop.0>

08007684 <__sfputc_r>:
 8007684:	6893      	ldr	r3, [r2, #8]
 8007686:	3b01      	subs	r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	b410      	push	{r4}
 800768c:	6093      	str	r3, [r2, #8]
 800768e:	da08      	bge.n	80076a2 <__sfputc_r+0x1e>
 8007690:	6994      	ldr	r4, [r2, #24]
 8007692:	42a3      	cmp	r3, r4
 8007694:	db01      	blt.n	800769a <__sfputc_r+0x16>
 8007696:	290a      	cmp	r1, #10
 8007698:	d103      	bne.n	80076a2 <__sfputc_r+0x1e>
 800769a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800769e:	f000 bac5 	b.w	8007c2c <__swbuf_r>
 80076a2:	6813      	ldr	r3, [r2, #0]
 80076a4:	1c58      	adds	r0, r3, #1
 80076a6:	6010      	str	r0, [r2, #0]
 80076a8:	7019      	strb	r1, [r3, #0]
 80076aa:	4608      	mov	r0, r1
 80076ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <__sfputs_r>:
 80076b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b4:	4606      	mov	r6, r0
 80076b6:	460f      	mov	r7, r1
 80076b8:	4614      	mov	r4, r2
 80076ba:	18d5      	adds	r5, r2, r3
 80076bc:	42ac      	cmp	r4, r5
 80076be:	d101      	bne.n	80076c4 <__sfputs_r+0x12>
 80076c0:	2000      	movs	r0, #0
 80076c2:	e007      	b.n	80076d4 <__sfputs_r+0x22>
 80076c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c8:	463a      	mov	r2, r7
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ffda 	bl	8007684 <__sfputc_r>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d1f3      	bne.n	80076bc <__sfputs_r+0xa>
 80076d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076d8 <_vfiprintf_r>:
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	460d      	mov	r5, r1
 80076de:	b09d      	sub	sp, #116	; 0x74
 80076e0:	4614      	mov	r4, r2
 80076e2:	4698      	mov	r8, r3
 80076e4:	4606      	mov	r6, r0
 80076e6:	b118      	cbz	r0, 80076f0 <_vfiprintf_r+0x18>
 80076e8:	6a03      	ldr	r3, [r0, #32]
 80076ea:	b90b      	cbnz	r3, 80076f0 <_vfiprintf_r+0x18>
 80076ec:	f7fe ff8c 	bl	8006608 <__sinit>
 80076f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076f2:	07d9      	lsls	r1, r3, #31
 80076f4:	d405      	bmi.n	8007702 <_vfiprintf_r+0x2a>
 80076f6:	89ab      	ldrh	r3, [r5, #12]
 80076f8:	059a      	lsls	r2, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_vfiprintf_r+0x2a>
 80076fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076fe:	f7ff f900 	bl	8006902 <__retarget_lock_acquire_recursive>
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	071b      	lsls	r3, r3, #28
 8007706:	d501      	bpl.n	800770c <_vfiprintf_r+0x34>
 8007708:	692b      	ldr	r3, [r5, #16]
 800770a:	b99b      	cbnz	r3, 8007734 <_vfiprintf_r+0x5c>
 800770c:	4629      	mov	r1, r5
 800770e:	4630      	mov	r0, r6
 8007710:	f000 faca 	bl	8007ca8 <__swsetup_r>
 8007714:	b170      	cbz	r0, 8007734 <_vfiprintf_r+0x5c>
 8007716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007718:	07dc      	lsls	r4, r3, #31
 800771a:	d504      	bpl.n	8007726 <_vfiprintf_r+0x4e>
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	b01d      	add	sp, #116	; 0x74
 8007722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	0598      	lsls	r0, r3, #22
 800772a:	d4f7      	bmi.n	800771c <_vfiprintf_r+0x44>
 800772c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800772e:	f7ff f8e9 	bl	8006904 <__retarget_lock_release_recursive>
 8007732:	e7f3      	b.n	800771c <_vfiprintf_r+0x44>
 8007734:	2300      	movs	r3, #0
 8007736:	9309      	str	r3, [sp, #36]	; 0x24
 8007738:	2320      	movs	r3, #32
 800773a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800773e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007742:	2330      	movs	r3, #48	; 0x30
 8007744:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078f8 <_vfiprintf_r+0x220>
 8007748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800774c:	f04f 0901 	mov.w	r9, #1
 8007750:	4623      	mov	r3, r4
 8007752:	469a      	mov	sl, r3
 8007754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007758:	b10a      	cbz	r2, 800775e <_vfiprintf_r+0x86>
 800775a:	2a25      	cmp	r2, #37	; 0x25
 800775c:	d1f9      	bne.n	8007752 <_vfiprintf_r+0x7a>
 800775e:	ebba 0b04 	subs.w	fp, sl, r4
 8007762:	d00b      	beq.n	800777c <_vfiprintf_r+0xa4>
 8007764:	465b      	mov	r3, fp
 8007766:	4622      	mov	r2, r4
 8007768:	4629      	mov	r1, r5
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ffa1 	bl	80076b2 <__sfputs_r>
 8007770:	3001      	adds	r0, #1
 8007772:	f000 80a9 	beq.w	80078c8 <_vfiprintf_r+0x1f0>
 8007776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007778:	445a      	add	r2, fp
 800777a:	9209      	str	r2, [sp, #36]	; 0x24
 800777c:	f89a 3000 	ldrb.w	r3, [sl]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80a1 	beq.w	80078c8 <_vfiprintf_r+0x1f0>
 8007786:	2300      	movs	r3, #0
 8007788:	f04f 32ff 	mov.w	r2, #4294967295
 800778c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007790:	f10a 0a01 	add.w	sl, sl, #1
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800779c:	931a      	str	r3, [sp, #104]	; 0x68
 800779e:	4654      	mov	r4, sl
 80077a0:	2205      	movs	r2, #5
 80077a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a6:	4854      	ldr	r0, [pc, #336]	; (80078f8 <_vfiprintf_r+0x220>)
 80077a8:	f7f8 fd1a 	bl	80001e0 <memchr>
 80077ac:	9a04      	ldr	r2, [sp, #16]
 80077ae:	b9d8      	cbnz	r0, 80077e8 <_vfiprintf_r+0x110>
 80077b0:	06d1      	lsls	r1, r2, #27
 80077b2:	bf44      	itt	mi
 80077b4:	2320      	movmi	r3, #32
 80077b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ba:	0713      	lsls	r3, r2, #28
 80077bc:	bf44      	itt	mi
 80077be:	232b      	movmi	r3, #43	; 0x2b
 80077c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c4:	f89a 3000 	ldrb.w	r3, [sl]
 80077c8:	2b2a      	cmp	r3, #42	; 0x2a
 80077ca:	d015      	beq.n	80077f8 <_vfiprintf_r+0x120>
 80077cc:	9a07      	ldr	r2, [sp, #28]
 80077ce:	4654      	mov	r4, sl
 80077d0:	2000      	movs	r0, #0
 80077d2:	f04f 0c0a 	mov.w	ip, #10
 80077d6:	4621      	mov	r1, r4
 80077d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077dc:	3b30      	subs	r3, #48	; 0x30
 80077de:	2b09      	cmp	r3, #9
 80077e0:	d94d      	bls.n	800787e <_vfiprintf_r+0x1a6>
 80077e2:	b1b0      	cbz	r0, 8007812 <_vfiprintf_r+0x13a>
 80077e4:	9207      	str	r2, [sp, #28]
 80077e6:	e014      	b.n	8007812 <_vfiprintf_r+0x13a>
 80077e8:	eba0 0308 	sub.w	r3, r0, r8
 80077ec:	fa09 f303 	lsl.w	r3, r9, r3
 80077f0:	4313      	orrs	r3, r2
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	46a2      	mov	sl, r4
 80077f6:	e7d2      	b.n	800779e <_vfiprintf_r+0xc6>
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	1d19      	adds	r1, r3, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	9103      	str	r1, [sp, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfbb      	ittet	lt
 8007804:	425b      	neglt	r3, r3
 8007806:	f042 0202 	orrlt.w	r2, r2, #2
 800780a:	9307      	strge	r3, [sp, #28]
 800780c:	9307      	strlt	r3, [sp, #28]
 800780e:	bfb8      	it	lt
 8007810:	9204      	strlt	r2, [sp, #16]
 8007812:	7823      	ldrb	r3, [r4, #0]
 8007814:	2b2e      	cmp	r3, #46	; 0x2e
 8007816:	d10c      	bne.n	8007832 <_vfiprintf_r+0x15a>
 8007818:	7863      	ldrb	r3, [r4, #1]
 800781a:	2b2a      	cmp	r3, #42	; 0x2a
 800781c:	d134      	bne.n	8007888 <_vfiprintf_r+0x1b0>
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	1d1a      	adds	r2, r3, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	9203      	str	r2, [sp, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfb8      	it	lt
 800782a:	f04f 33ff 	movlt.w	r3, #4294967295
 800782e:	3402      	adds	r4, #2
 8007830:	9305      	str	r3, [sp, #20]
 8007832:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007908 <_vfiprintf_r+0x230>
 8007836:	7821      	ldrb	r1, [r4, #0]
 8007838:	2203      	movs	r2, #3
 800783a:	4650      	mov	r0, sl
 800783c:	f7f8 fcd0 	bl	80001e0 <memchr>
 8007840:	b138      	cbz	r0, 8007852 <_vfiprintf_r+0x17a>
 8007842:	9b04      	ldr	r3, [sp, #16]
 8007844:	eba0 000a 	sub.w	r0, r0, sl
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	4082      	lsls	r2, r0
 800784c:	4313      	orrs	r3, r2
 800784e:	3401      	adds	r4, #1
 8007850:	9304      	str	r3, [sp, #16]
 8007852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007856:	4829      	ldr	r0, [pc, #164]	; (80078fc <_vfiprintf_r+0x224>)
 8007858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800785c:	2206      	movs	r2, #6
 800785e:	f7f8 fcbf 	bl	80001e0 <memchr>
 8007862:	2800      	cmp	r0, #0
 8007864:	d03f      	beq.n	80078e6 <_vfiprintf_r+0x20e>
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <_vfiprintf_r+0x228>)
 8007868:	bb1b      	cbnz	r3, 80078b2 <_vfiprintf_r+0x1da>
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	3307      	adds	r3, #7
 800786e:	f023 0307 	bic.w	r3, r3, #7
 8007872:	3308      	adds	r3, #8
 8007874:	9303      	str	r3, [sp, #12]
 8007876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007878:	443b      	add	r3, r7
 800787a:	9309      	str	r3, [sp, #36]	; 0x24
 800787c:	e768      	b.n	8007750 <_vfiprintf_r+0x78>
 800787e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007882:	460c      	mov	r4, r1
 8007884:	2001      	movs	r0, #1
 8007886:	e7a6      	b.n	80077d6 <_vfiprintf_r+0xfe>
 8007888:	2300      	movs	r3, #0
 800788a:	3401      	adds	r4, #1
 800788c:	9305      	str	r3, [sp, #20]
 800788e:	4619      	mov	r1, r3
 8007890:	f04f 0c0a 	mov.w	ip, #10
 8007894:	4620      	mov	r0, r4
 8007896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800789a:	3a30      	subs	r2, #48	; 0x30
 800789c:	2a09      	cmp	r2, #9
 800789e:	d903      	bls.n	80078a8 <_vfiprintf_r+0x1d0>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0c6      	beq.n	8007832 <_vfiprintf_r+0x15a>
 80078a4:	9105      	str	r1, [sp, #20]
 80078a6:	e7c4      	b.n	8007832 <_vfiprintf_r+0x15a>
 80078a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ac:	4604      	mov	r4, r0
 80078ae:	2301      	movs	r3, #1
 80078b0:	e7f0      	b.n	8007894 <_vfiprintf_r+0x1bc>
 80078b2:	ab03      	add	r3, sp, #12
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	462a      	mov	r2, r5
 80078b8:	4b12      	ldr	r3, [pc, #72]	; (8007904 <_vfiprintf_r+0x22c>)
 80078ba:	a904      	add	r1, sp, #16
 80078bc:	4630      	mov	r0, r6
 80078be:	f3af 8000 	nop.w
 80078c2:	4607      	mov	r7, r0
 80078c4:	1c78      	adds	r0, r7, #1
 80078c6:	d1d6      	bne.n	8007876 <_vfiprintf_r+0x19e>
 80078c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ca:	07d9      	lsls	r1, r3, #31
 80078cc:	d405      	bmi.n	80078da <_vfiprintf_r+0x202>
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	059a      	lsls	r2, r3, #22
 80078d2:	d402      	bmi.n	80078da <_vfiprintf_r+0x202>
 80078d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078d6:	f7ff f815 	bl	8006904 <__retarget_lock_release_recursive>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	065b      	lsls	r3, r3, #25
 80078de:	f53f af1d 	bmi.w	800771c <_vfiprintf_r+0x44>
 80078e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e4:	e71c      	b.n	8007720 <_vfiprintf_r+0x48>
 80078e6:	ab03      	add	r3, sp, #12
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	462a      	mov	r2, r5
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <_vfiprintf_r+0x22c>)
 80078ee:	a904      	add	r1, sp, #16
 80078f0:	4630      	mov	r0, r6
 80078f2:	f000 f879 	bl	80079e8 <_printf_i>
 80078f6:	e7e4      	b.n	80078c2 <_vfiprintf_r+0x1ea>
 80078f8:	08008105 	.word	0x08008105
 80078fc:	0800810b 	.word	0x0800810b
 8007900:	00000000 	.word	0x00000000
 8007904:	080076b3 	.word	0x080076b3
 8007908:	08007fe5 	.word	0x08007fe5

0800790c <_printf_common>:
 800790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	4616      	mov	r6, r2
 8007912:	4699      	mov	r9, r3
 8007914:	688a      	ldr	r2, [r1, #8]
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800791c:	4293      	cmp	r3, r2
 800791e:	bfb8      	it	lt
 8007920:	4613      	movlt	r3, r2
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007928:	4607      	mov	r7, r0
 800792a:	460c      	mov	r4, r1
 800792c:	b10a      	cbz	r2, 8007932 <_printf_common+0x26>
 800792e:	3301      	adds	r3, #1
 8007930:	6033      	str	r3, [r6, #0]
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	0699      	lsls	r1, r3, #26
 8007936:	bf42      	ittt	mi
 8007938:	6833      	ldrmi	r3, [r6, #0]
 800793a:	3302      	addmi	r3, #2
 800793c:	6033      	strmi	r3, [r6, #0]
 800793e:	6825      	ldr	r5, [r4, #0]
 8007940:	f015 0506 	ands.w	r5, r5, #6
 8007944:	d106      	bne.n	8007954 <_printf_common+0x48>
 8007946:	f104 0a19 	add.w	sl, r4, #25
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	6832      	ldr	r2, [r6, #0]
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	42ab      	cmp	r3, r5
 8007952:	dc26      	bgt.n	80079a2 <_printf_common+0x96>
 8007954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007958:	1e13      	subs	r3, r2, #0
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	bf18      	it	ne
 800795e:	2301      	movne	r3, #1
 8007960:	0692      	lsls	r2, r2, #26
 8007962:	d42b      	bmi.n	80079bc <_printf_common+0xb0>
 8007964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007968:	4649      	mov	r1, r9
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d01e      	beq.n	80079b0 <_printf_common+0xa4>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	6922      	ldr	r2, [r4, #16]
 8007976:	f003 0306 	and.w	r3, r3, #6
 800797a:	2b04      	cmp	r3, #4
 800797c:	bf02      	ittt	eq
 800797e:	68e5      	ldreq	r5, [r4, #12]
 8007980:	6833      	ldreq	r3, [r6, #0]
 8007982:	1aed      	subeq	r5, r5, r3
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	bf0c      	ite	eq
 8007988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800798c:	2500      	movne	r5, #0
 800798e:	4293      	cmp	r3, r2
 8007990:	bfc4      	itt	gt
 8007992:	1a9b      	subgt	r3, r3, r2
 8007994:	18ed      	addgt	r5, r5, r3
 8007996:	2600      	movs	r6, #0
 8007998:	341a      	adds	r4, #26
 800799a:	42b5      	cmp	r5, r6
 800799c:	d11a      	bne.n	80079d4 <_printf_common+0xc8>
 800799e:	2000      	movs	r0, #0
 80079a0:	e008      	b.n	80079b4 <_printf_common+0xa8>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4652      	mov	r2, sl
 80079a6:	4649      	mov	r1, r9
 80079a8:	4638      	mov	r0, r7
 80079aa:	47c0      	blx	r8
 80079ac:	3001      	adds	r0, #1
 80079ae:	d103      	bne.n	80079b8 <_printf_common+0xac>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b8:	3501      	adds	r5, #1
 80079ba:	e7c6      	b.n	800794a <_printf_common+0x3e>
 80079bc:	18e1      	adds	r1, r4, r3
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	2030      	movs	r0, #48	; 0x30
 80079c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079c6:	4422      	add	r2, r4
 80079c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079d0:	3302      	adds	r3, #2
 80079d2:	e7c7      	b.n	8007964 <_printf_common+0x58>
 80079d4:	2301      	movs	r3, #1
 80079d6:	4622      	mov	r2, r4
 80079d8:	4649      	mov	r1, r9
 80079da:	4638      	mov	r0, r7
 80079dc:	47c0      	blx	r8
 80079de:	3001      	adds	r0, #1
 80079e0:	d0e6      	beq.n	80079b0 <_printf_common+0xa4>
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7d9      	b.n	800799a <_printf_common+0x8e>
	...

080079e8 <_printf_i>:
 80079e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	7e0f      	ldrb	r7, [r1, #24]
 80079ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079f0:	2f78      	cmp	r7, #120	; 0x78
 80079f2:	4691      	mov	r9, r2
 80079f4:	4680      	mov	r8, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	469a      	mov	sl, r3
 80079fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079fe:	d807      	bhi.n	8007a10 <_printf_i+0x28>
 8007a00:	2f62      	cmp	r7, #98	; 0x62
 8007a02:	d80a      	bhi.n	8007a1a <_printf_i+0x32>
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	f000 80d4 	beq.w	8007bb2 <_printf_i+0x1ca>
 8007a0a:	2f58      	cmp	r7, #88	; 0x58
 8007a0c:	f000 80c0 	beq.w	8007b90 <_printf_i+0x1a8>
 8007a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a18:	e03a      	b.n	8007a90 <_printf_i+0xa8>
 8007a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a1e:	2b15      	cmp	r3, #21
 8007a20:	d8f6      	bhi.n	8007a10 <_printf_i+0x28>
 8007a22:	a101      	add	r1, pc, #4	; (adr r1, 8007a28 <_printf_i+0x40>)
 8007a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a95 	.word	0x08007a95
 8007a30:	08007a11 	.word	0x08007a11
 8007a34:	08007a11 	.word	0x08007a11
 8007a38:	08007a11 	.word	0x08007a11
 8007a3c:	08007a11 	.word	0x08007a11
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a11 	.word	0x08007a11
 8007a48:	08007a11 	.word	0x08007a11
 8007a4c:	08007a11 	.word	0x08007a11
 8007a50:	08007a11 	.word	0x08007a11
 8007a54:	08007b99 	.word	0x08007b99
 8007a58:	08007ac1 	.word	0x08007ac1
 8007a5c:	08007b53 	.word	0x08007b53
 8007a60:	08007a11 	.word	0x08007a11
 8007a64:	08007a11 	.word	0x08007a11
 8007a68:	08007bbb 	.word	0x08007bbb
 8007a6c:	08007a11 	.word	0x08007a11
 8007a70:	08007ac1 	.word	0x08007ac1
 8007a74:	08007a11 	.word	0x08007a11
 8007a78:	08007a11 	.word	0x08007a11
 8007a7c:	08007b5b 	.word	0x08007b5b
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	602a      	str	r2, [r5, #0]
 8007a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a90:	2301      	movs	r3, #1
 8007a92:	e09f      	b.n	8007bd4 <_printf_i+0x1ec>
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	0607      	lsls	r7, r0, #24
 8007a9a:	f103 0104 	add.w	r1, r3, #4
 8007a9e:	6029      	str	r1, [r5, #0]
 8007aa0:	d501      	bpl.n	8007aa6 <_printf_i+0xbe>
 8007aa2:	681e      	ldr	r6, [r3, #0]
 8007aa4:	e003      	b.n	8007aae <_printf_i+0xc6>
 8007aa6:	0646      	lsls	r6, r0, #25
 8007aa8:	d5fb      	bpl.n	8007aa2 <_printf_i+0xba>
 8007aaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	da03      	bge.n	8007aba <_printf_i+0xd2>
 8007ab2:	232d      	movs	r3, #45	; 0x2d
 8007ab4:	4276      	negs	r6, r6
 8007ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aba:	485a      	ldr	r0, [pc, #360]	; (8007c24 <_printf_i+0x23c>)
 8007abc:	230a      	movs	r3, #10
 8007abe:	e012      	b.n	8007ae6 <_printf_i+0xfe>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	6820      	ldr	r0, [r4, #0]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	6029      	str	r1, [r5, #0]
 8007ac8:	0605      	lsls	r5, r0, #24
 8007aca:	d501      	bpl.n	8007ad0 <_printf_i+0xe8>
 8007acc:	681e      	ldr	r6, [r3, #0]
 8007ace:	e002      	b.n	8007ad6 <_printf_i+0xee>
 8007ad0:	0641      	lsls	r1, r0, #25
 8007ad2:	d5fb      	bpl.n	8007acc <_printf_i+0xe4>
 8007ad4:	881e      	ldrh	r6, [r3, #0]
 8007ad6:	4853      	ldr	r0, [pc, #332]	; (8007c24 <_printf_i+0x23c>)
 8007ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8007ada:	bf0c      	ite	eq
 8007adc:	2308      	moveq	r3, #8
 8007ade:	230a      	movne	r3, #10
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ae6:	6865      	ldr	r5, [r4, #4]
 8007ae8:	60a5      	str	r5, [r4, #8]
 8007aea:	2d00      	cmp	r5, #0
 8007aec:	bfa2      	ittt	ge
 8007aee:	6821      	ldrge	r1, [r4, #0]
 8007af0:	f021 0104 	bicge.w	r1, r1, #4
 8007af4:	6021      	strge	r1, [r4, #0]
 8007af6:	b90e      	cbnz	r6, 8007afc <_printf_i+0x114>
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	d04b      	beq.n	8007b94 <_printf_i+0x1ac>
 8007afc:	4615      	mov	r5, r2
 8007afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b02:	fb03 6711 	mls	r7, r3, r1, r6
 8007b06:	5dc7      	ldrb	r7, [r0, r7]
 8007b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b0c:	4637      	mov	r7, r6
 8007b0e:	42bb      	cmp	r3, r7
 8007b10:	460e      	mov	r6, r1
 8007b12:	d9f4      	bls.n	8007afe <_printf_i+0x116>
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d10b      	bne.n	8007b30 <_printf_i+0x148>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	07de      	lsls	r6, r3, #31
 8007b1c:	d508      	bpl.n	8007b30 <_printf_i+0x148>
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	6861      	ldr	r1, [r4, #4]
 8007b22:	4299      	cmp	r1, r3
 8007b24:	bfde      	ittt	le
 8007b26:	2330      	movle	r3, #48	; 0x30
 8007b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b30:	1b52      	subs	r2, r2, r5
 8007b32:	6122      	str	r2, [r4, #16]
 8007b34:	f8cd a000 	str.w	sl, [sp]
 8007b38:	464b      	mov	r3, r9
 8007b3a:	aa03      	add	r2, sp, #12
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4640      	mov	r0, r8
 8007b40:	f7ff fee4 	bl	800790c <_printf_common>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d14a      	bne.n	8007bde <_printf_i+0x1f6>
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	b004      	add	sp, #16
 8007b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	f043 0320 	orr.w	r3, r3, #32
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	4833      	ldr	r0, [pc, #204]	; (8007c28 <_printf_i+0x240>)
 8007b5c:	2778      	movs	r7, #120	; 0x78
 8007b5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6829      	ldr	r1, [r5, #0]
 8007b66:	061f      	lsls	r7, r3, #24
 8007b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b6c:	d402      	bmi.n	8007b74 <_printf_i+0x18c>
 8007b6e:	065f      	lsls	r7, r3, #25
 8007b70:	bf48      	it	mi
 8007b72:	b2b6      	uxthmi	r6, r6
 8007b74:	07df      	lsls	r7, r3, #31
 8007b76:	bf48      	it	mi
 8007b78:	f043 0320 	orrmi.w	r3, r3, #32
 8007b7c:	6029      	str	r1, [r5, #0]
 8007b7e:	bf48      	it	mi
 8007b80:	6023      	strmi	r3, [r4, #0]
 8007b82:	b91e      	cbnz	r6, 8007b8c <_printf_i+0x1a4>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	e7a7      	b.n	8007ae0 <_printf_i+0xf8>
 8007b90:	4824      	ldr	r0, [pc, #144]	; (8007c24 <_printf_i+0x23c>)
 8007b92:	e7e4      	b.n	8007b5e <_printf_i+0x176>
 8007b94:	4615      	mov	r5, r2
 8007b96:	e7bd      	b.n	8007b14 <_printf_i+0x12c>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	6826      	ldr	r6, [r4, #0]
 8007b9c:	6961      	ldr	r1, [r4, #20]
 8007b9e:	1d18      	adds	r0, r3, #4
 8007ba0:	6028      	str	r0, [r5, #0]
 8007ba2:	0635      	lsls	r5, r6, #24
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	d501      	bpl.n	8007bac <_printf_i+0x1c4>
 8007ba8:	6019      	str	r1, [r3, #0]
 8007baa:	e002      	b.n	8007bb2 <_printf_i+0x1ca>
 8007bac:	0670      	lsls	r0, r6, #25
 8007bae:	d5fb      	bpl.n	8007ba8 <_printf_i+0x1c0>
 8007bb0:	8019      	strh	r1, [r3, #0]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	4615      	mov	r5, r2
 8007bb8:	e7bc      	b.n	8007b34 <_printf_i+0x14c>
 8007bba:	682b      	ldr	r3, [r5, #0]
 8007bbc:	1d1a      	adds	r2, r3, #4
 8007bbe:	602a      	str	r2, [r5, #0]
 8007bc0:	681d      	ldr	r5, [r3, #0]
 8007bc2:	6862      	ldr	r2, [r4, #4]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f7f8 fb0a 	bl	80001e0 <memchr>
 8007bcc:	b108      	cbz	r0, 8007bd2 <_printf_i+0x1ea>
 8007bce:	1b40      	subs	r0, r0, r5
 8007bd0:	6060      	str	r0, [r4, #4]
 8007bd2:	6863      	ldr	r3, [r4, #4]
 8007bd4:	6123      	str	r3, [r4, #16]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bdc:	e7aa      	b.n	8007b34 <_printf_i+0x14c>
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	462a      	mov	r2, r5
 8007be2:	4649      	mov	r1, r9
 8007be4:	4640      	mov	r0, r8
 8007be6:	47d0      	blx	sl
 8007be8:	3001      	adds	r0, #1
 8007bea:	d0ad      	beq.n	8007b48 <_printf_i+0x160>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	079b      	lsls	r3, r3, #30
 8007bf0:	d413      	bmi.n	8007c1a <_printf_i+0x232>
 8007bf2:	68e0      	ldr	r0, [r4, #12]
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	4298      	cmp	r0, r3
 8007bf8:	bfb8      	it	lt
 8007bfa:	4618      	movlt	r0, r3
 8007bfc:	e7a6      	b.n	8007b4c <_printf_i+0x164>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4632      	mov	r2, r6
 8007c02:	4649      	mov	r1, r9
 8007c04:	4640      	mov	r0, r8
 8007c06:	47d0      	blx	sl
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d09d      	beq.n	8007b48 <_printf_i+0x160>
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	68e3      	ldr	r3, [r4, #12]
 8007c10:	9903      	ldr	r1, [sp, #12]
 8007c12:	1a5b      	subs	r3, r3, r1
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dcf2      	bgt.n	8007bfe <_printf_i+0x216>
 8007c18:	e7eb      	b.n	8007bf2 <_printf_i+0x20a>
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	f104 0619 	add.w	r6, r4, #25
 8007c20:	e7f5      	b.n	8007c0e <_printf_i+0x226>
 8007c22:	bf00      	nop
 8007c24:	08008112 	.word	0x08008112
 8007c28:	08008123 	.word	0x08008123

08007c2c <__swbuf_r>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	460e      	mov	r6, r1
 8007c30:	4614      	mov	r4, r2
 8007c32:	4605      	mov	r5, r0
 8007c34:	b118      	cbz	r0, 8007c3e <__swbuf_r+0x12>
 8007c36:	6a03      	ldr	r3, [r0, #32]
 8007c38:	b90b      	cbnz	r3, 8007c3e <__swbuf_r+0x12>
 8007c3a:	f7fe fce5 	bl	8006608 <__sinit>
 8007c3e:	69a3      	ldr	r3, [r4, #24]
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	071a      	lsls	r2, r3, #28
 8007c46:	d525      	bpl.n	8007c94 <__swbuf_r+0x68>
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	b31b      	cbz	r3, 8007c94 <__swbuf_r+0x68>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	1a98      	subs	r0, r3, r2
 8007c52:	6963      	ldr	r3, [r4, #20]
 8007c54:	b2f6      	uxtb	r6, r6
 8007c56:	4283      	cmp	r3, r0
 8007c58:	4637      	mov	r7, r6
 8007c5a:	dc04      	bgt.n	8007c66 <__swbuf_r+0x3a>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f7ff fb16 	bl	8007290 <_fflush_r>
 8007c64:	b9e0      	cbnz	r0, 8007ca0 <__swbuf_r+0x74>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	701e      	strb	r6, [r3, #0]
 8007c74:	6962      	ldr	r2, [r4, #20]
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d004      	beq.n	8007c86 <__swbuf_r+0x5a>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d506      	bpl.n	8007c90 <__swbuf_r+0x64>
 8007c82:	2e0a      	cmp	r6, #10
 8007c84:	d104      	bne.n	8007c90 <__swbuf_r+0x64>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff fb01 	bl	8007290 <_fflush_r>
 8007c8e:	b938      	cbnz	r0, 8007ca0 <__swbuf_r+0x74>
 8007c90:	4638      	mov	r0, r7
 8007c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 f806 	bl	8007ca8 <__swsetup_r>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d0d5      	beq.n	8007c4c <__swbuf_r+0x20>
 8007ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ca4:	e7f4      	b.n	8007c90 <__swbuf_r+0x64>
	...

08007ca8 <__swsetup_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4b2a      	ldr	r3, [pc, #168]	; (8007d54 <__swsetup_r+0xac>)
 8007cac:	4605      	mov	r5, r0
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	b118      	cbz	r0, 8007cbc <__swsetup_r+0x14>
 8007cb4:	6a03      	ldr	r3, [r0, #32]
 8007cb6:	b90b      	cbnz	r3, 8007cbc <__swsetup_r+0x14>
 8007cb8:	f7fe fca6 	bl	8006608 <__sinit>
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc2:	0718      	lsls	r0, r3, #28
 8007cc4:	d422      	bmi.n	8007d0c <__swsetup_r+0x64>
 8007cc6:	06d9      	lsls	r1, r3, #27
 8007cc8:	d407      	bmi.n	8007cda <__swsetup_r+0x32>
 8007cca:	2309      	movs	r3, #9
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	e034      	b.n	8007d44 <__swsetup_r+0x9c>
 8007cda:	0758      	lsls	r0, r3, #29
 8007cdc:	d512      	bpl.n	8007d04 <__swsetup_r+0x5c>
 8007cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ce0:	b141      	cbz	r1, 8007cf4 <__swsetup_r+0x4c>
 8007ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce6:	4299      	cmp	r1, r3
 8007ce8:	d002      	beq.n	8007cf0 <__swsetup_r+0x48>
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7fe fe2a 	bl	8006944 <_free_r>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0308 	orr.w	r3, r3, #8
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	b94b      	cbnz	r3, 8007d24 <__swsetup_r+0x7c>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1a:	d003      	beq.n	8007d24 <__swsetup_r+0x7c>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f88c 	bl	8007e3c <__smakebuf_r>
 8007d24:	89a0      	ldrh	r0, [r4, #12]
 8007d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d2a:	f010 0301 	ands.w	r3, r0, #1
 8007d2e:	d00a      	beq.n	8007d46 <__swsetup_r+0x9e>
 8007d30:	2300      	movs	r3, #0
 8007d32:	60a3      	str	r3, [r4, #8]
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	425b      	negs	r3, r3
 8007d38:	61a3      	str	r3, [r4, #24]
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	b943      	cbnz	r3, 8007d50 <__swsetup_r+0xa8>
 8007d3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d42:	d1c4      	bne.n	8007cce <__swsetup_r+0x26>
 8007d44:	bd38      	pop	{r3, r4, r5, pc}
 8007d46:	0781      	lsls	r1, r0, #30
 8007d48:	bf58      	it	pl
 8007d4a:	6963      	ldrpl	r3, [r4, #20]
 8007d4c:	60a3      	str	r3, [r4, #8]
 8007d4e:	e7f4      	b.n	8007d3a <__swsetup_r+0x92>
 8007d50:	2000      	movs	r0, #0
 8007d52:	e7f7      	b.n	8007d44 <__swsetup_r+0x9c>
 8007d54:	20000064 	.word	0x20000064

08007d58 <_raise_r>:
 8007d58:	291f      	cmp	r1, #31
 8007d5a:	b538      	push	{r3, r4, r5, lr}
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	460d      	mov	r5, r1
 8007d60:	d904      	bls.n	8007d6c <_raise_r+0x14>
 8007d62:	2316      	movs	r3, #22
 8007d64:	6003      	str	r3, [r0, #0]
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d6e:	b112      	cbz	r2, 8007d76 <_raise_r+0x1e>
 8007d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d74:	b94b      	cbnz	r3, 8007d8a <_raise_r+0x32>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 f830 	bl	8007ddc <_getpid_r>
 8007d7c:	462a      	mov	r2, r5
 8007d7e:	4601      	mov	r1, r0
 8007d80:	4620      	mov	r0, r4
 8007d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d86:	f000 b817 	b.w	8007db8 <_kill_r>
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d00a      	beq.n	8007da4 <_raise_r+0x4c>
 8007d8e:	1c59      	adds	r1, r3, #1
 8007d90:	d103      	bne.n	8007d9a <_raise_r+0x42>
 8007d92:	2316      	movs	r3, #22
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	2001      	movs	r0, #1
 8007d98:	e7e7      	b.n	8007d6a <_raise_r+0x12>
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007da0:	4628      	mov	r0, r5
 8007da2:	4798      	blx	r3
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7e0      	b.n	8007d6a <_raise_r+0x12>

08007da8 <raise>:
 8007da8:	4b02      	ldr	r3, [pc, #8]	; (8007db4 <raise+0xc>)
 8007daa:	4601      	mov	r1, r0
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	f7ff bfd3 	b.w	8007d58 <_raise_r>
 8007db2:	bf00      	nop
 8007db4:	20000064 	.word	0x20000064

08007db8 <_kill_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	; (8007dd8 <_kill_r+0x20>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	f7fa ffe3 	bl	8002d90 <_kill>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	d102      	bne.n	8007dd4 <_kill_r+0x1c>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	b103      	cbz	r3, 8007dd4 <_kill_r+0x1c>
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200001c4 	.word	0x200001c4

08007ddc <_getpid_r>:
 8007ddc:	f7fa bfd0 	b.w	8002d80 <_getpid>

08007de0 <_malloc_usable_size_r>:
 8007de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de4:	1f18      	subs	r0, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfbc      	itt	lt
 8007dea:	580b      	ldrlt	r3, [r1, r0]
 8007dec:	18c0      	addlt	r0, r0, r3
 8007dee:	4770      	bx	lr

08007df0 <__swhatbuf_r>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	460c      	mov	r4, r1
 8007df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	b096      	sub	sp, #88	; 0x58
 8007dfc:	4615      	mov	r5, r2
 8007dfe:	461e      	mov	r6, r3
 8007e00:	da0d      	bge.n	8007e1e <__swhatbuf_r+0x2e>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e08:	f04f 0100 	mov.w	r1, #0
 8007e0c:	bf0c      	ite	eq
 8007e0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e12:	2340      	movne	r3, #64	; 0x40
 8007e14:	2000      	movs	r0, #0
 8007e16:	6031      	str	r1, [r6, #0]
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	b016      	add	sp, #88	; 0x58
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
 8007e1e:	466a      	mov	r2, sp
 8007e20:	f000 f848 	bl	8007eb4 <_fstat_r>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	dbec      	blt.n	8007e02 <__swhatbuf_r+0x12>
 8007e28:	9901      	ldr	r1, [sp, #4]
 8007e2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007e2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007e32:	4259      	negs	r1, r3
 8007e34:	4159      	adcs	r1, r3
 8007e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e3a:	e7eb      	b.n	8007e14 <__swhatbuf_r+0x24>

08007e3c <__smakebuf_r>:
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e40:	079d      	lsls	r5, r3, #30
 8007e42:	4606      	mov	r6, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	d507      	bpl.n	8007e58 <__smakebuf_r+0x1c>
 8007e48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	6123      	str	r3, [r4, #16]
 8007e50:	2301      	movs	r3, #1
 8007e52:	6163      	str	r3, [r4, #20]
 8007e54:	b002      	add	sp, #8
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	ab01      	add	r3, sp, #4
 8007e5a:	466a      	mov	r2, sp
 8007e5c:	f7ff ffc8 	bl	8007df0 <__swhatbuf_r>
 8007e60:	9900      	ldr	r1, [sp, #0]
 8007e62:	4605      	mov	r5, r0
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7fe fde1 	bl	8006a2c <_malloc_r>
 8007e6a:	b948      	cbnz	r0, 8007e80 <__smakebuf_r+0x44>
 8007e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e70:	059a      	lsls	r2, r3, #22
 8007e72:	d4ef      	bmi.n	8007e54 <__smakebuf_r+0x18>
 8007e74:	f023 0303 	bic.w	r3, r3, #3
 8007e78:	f043 0302 	orr.w	r3, r3, #2
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	e7e3      	b.n	8007e48 <__smakebuf_r+0xc>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	6020      	str	r0, [r4, #0]
 8007e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	9b00      	ldr	r3, [sp, #0]
 8007e8c:	6163      	str	r3, [r4, #20]
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	6120      	str	r0, [r4, #16]
 8007e92:	b15b      	cbz	r3, 8007eac <__smakebuf_r+0x70>
 8007e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f81d 	bl	8007ed8 <_isatty_r>
 8007e9e:	b128      	cbz	r0, 8007eac <__smakebuf_r+0x70>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	f043 0301 	orr.w	r3, r3, #1
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	431d      	orrs	r5, r3
 8007eb0:	81a5      	strh	r5, [r4, #12]
 8007eb2:	e7cf      	b.n	8007e54 <__smakebuf_r+0x18>

08007eb4 <_fstat_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4d07      	ldr	r5, [pc, #28]	; (8007ed4 <_fstat_r+0x20>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	f7fa ffc4 	bl	8002e4e <_fstat>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	d102      	bne.n	8007ed0 <_fstat_r+0x1c>
 8007eca:	682b      	ldr	r3, [r5, #0]
 8007ecc:	b103      	cbz	r3, 8007ed0 <_fstat_r+0x1c>
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	bd38      	pop	{r3, r4, r5, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200001c4 	.word	0x200001c4

08007ed8 <_isatty_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d06      	ldr	r5, [pc, #24]	; (8007ef4 <_isatty_r+0x1c>)
 8007edc:	2300      	movs	r3, #0
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	602b      	str	r3, [r5, #0]
 8007ee4:	f7fa ffc3 	bl	8002e6e <_isatty>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_isatty_r+0x1a>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_isatty_r+0x1a>
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	200001c4 	.word	0x200001c4

08007ef8 <_init>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr

08007f04 <_fini>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr
