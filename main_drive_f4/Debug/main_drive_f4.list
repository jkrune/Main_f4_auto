
main_drive_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dbc  08006dbc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc4  08006dc4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000005f0  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000065c  2000065c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011bae  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000284e  00000000  00000000  00031c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e38  00000000  00000000  000344e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b08  00000000  00000000  00035318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024be1  00000000  00000000  00035e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012935  00000000  00000000  0005aa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd959  00000000  00000000  0006d336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004740  00000000  00000000  0014ac90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0014f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b80 	.word	0x08006b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006b80 	.word	0x08006b80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <TIM3_Init>:

volatile int temp_x,temp_y;
volatile uint8_t temp1 = 100,temp2 = 100;

void TIM3_Init(void)	///50Hz PWM (4 pin: 2 BLDC, !
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]


  htim3.Instance = TIM3;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <TIM3_Init+0x148>)
 80005ae:	4a46      	ldr	r2, [pc, #280]	; (80006c8 <TIM3_Init+0x14c>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80005b2:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <TIM3_Init+0x148>)
 80005b4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80005b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <TIM3_Init+0x148>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80005c0:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <TIM3_Init+0x148>)
 80005c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <TIM3_Init+0x148>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <TIM3_Init+0x148>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d4:	483b      	ldr	r0, [pc, #236]	; (80006c4 <TIM3_Init+0x148>)
 80005d6:	f002 fd99 	bl	800310c <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <TIM3_Init+0x68>
	  {
		Error_Handler();
 80005e0:	f000 fc1a 	bl	8000e18 <Error_Handler>
	  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4834      	ldr	r0, [pc, #208]	; (80006c4 <TIM3_Init+0x148>)
 80005f2:	f003 f971 	bl	80038d8 <HAL_TIM_ConfigClockSource>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <TIM3_Init+0x84>
	  {
		Error_Handler();
 80005fc:	f000 fc0c 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000600:	4830      	ldr	r0, [pc, #192]	; (80006c4 <TIM3_Init+0x148>)
 8000602:	f002 fe2b 	bl	800325c <HAL_TIM_PWM_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <TIM3_Init+0x94>
	  {
		Error_Handler();
 800060c:	f000 fc04 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000610:	482c      	ldr	r0, [pc, #176]	; (80006c4 <TIM3_Init+0x148>)
 8000612:	f002 fdca 	bl	80031aa <HAL_TIM_OC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <TIM3_Init+0xa4>
	  {
		Error_Handler();
 800061c:	f000 fbfc 	bl	8000e18 <Error_Handler>
	  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4619      	mov	r1, r3
 800062e:	4825      	ldr	r0, [pc, #148]	; (80006c4 <TIM3_Init+0x148>)
 8000630:	f003 fd48 	bl	80040c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <TIM3_Init+0xc2>
	  {
		Error_Handler();
 800063a:	f000 fbed 	bl	8000e18 <Error_Handler>
	  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063e:	2360      	movs	r3, #96	; 0x60
 8000640:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0; /// 100 200(min max)
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <TIM3_Init+0x148>)
 8000656:	f003 f87d 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <TIM3_Init+0xe8>
	  {
		Error_Handler();
 8000660:	f000 fbda 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2204      	movs	r2, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4816      	ldr	r0, [pc, #88]	; (80006c4 <TIM3_Init+0x148>)
 800066c:	f003 f816 	bl	800369c <HAL_TIM_OC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <TIM3_Init+0xfe>
	  {
		Error_Handler();
 8000676:	f000 fbcf 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2208      	movs	r2, #8
 800067e:	4619      	mov	r1, r3
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <TIM3_Init+0x148>)
 8000682:	f003 f867 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <TIM3_Init+0x114>
	  {
		Error_Handler();
 800068c:	f000 fbc4 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	220c      	movs	r2, #12
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <TIM3_Init+0x148>)
 8000698:	f003 f800 	bl	800369c <HAL_TIM_OC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <TIM3_Init+0x12a>
	  {
		Error_Handler();
 80006a2:	f000 fbb9 	bl	8000e18 <Error_Handler>
	  }

  HAL_TIM_MspPostInit(&htim3);
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <TIM3_Init+0x148>)
 80006a8:	f001 f984 	bl	80019b4 <HAL_TIM_MspPostInit>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <TIM3_Init+0x148>)
 80006b0:	f002 fe24 	bl	80032fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006b4:	2104      	movs	r1, #4
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <TIM3_Init+0x148>)
 80006b8:	f002 fe20 	bl	80032fc <HAL_TIM_PWM_Start>
}
 80006bc:	bf00      	nop
 80006be:	3738      	adds	r7, #56	; 0x38
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000394 	.word	0x20000394
 80006c8:	40000400 	.word	0x40000400

080006cc <TIM2_Init>:

void TIM2_Init(void)	///dong co goc tam
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	619a      	str	r2, [r3, #24]


  htim2.Instance = TIM2;
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <TIM2_Init+0x11c>)
 80006fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <TIM2_Init+0x11c>)
 8000706:	2247      	movs	r2, #71	; 0x47
 8000708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <TIM2_Init+0x11c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000710:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <TIM2_Init+0x11c>)
 8000712:	2264      	movs	r2, #100	; 0x64
 8000714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <TIM2_Init+0x11c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <TIM2_Init+0x11c>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000722:	4831      	ldr	r0, [pc, #196]	; (80007e8 <TIM2_Init+0x11c>)
 8000724:	f002 fcf2 	bl	800310c <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <TIM2_Init+0x66>
	  {
		Error_Handler();
 800072e:	f000 fb73 	bl	8000e18 <Error_Handler>
	  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073c:	4619      	mov	r1, r3
 800073e:	482a      	ldr	r0, [pc, #168]	; (80007e8 <TIM2_Init+0x11c>)
 8000740:	f003 f8ca 	bl	80038d8 <HAL_TIM_ConfigClockSource>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <TIM2_Init+0x82>
	  {
		Error_Handler();
 800074a:	f000 fb65 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800074e:	4826      	ldr	r0, [pc, #152]	; (80007e8 <TIM2_Init+0x11c>)
 8000750:	f002 fd84 	bl	800325c <HAL_TIM_PWM_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <TIM2_Init+0x92>
	  {
		Error_Handler();
 800075a:	f000 fb5d 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800075e:	4822      	ldr	r0, [pc, #136]	; (80007e8 <TIM2_Init+0x11c>)
 8000760:	f002 fd23 	bl	80031aa <HAL_TIM_OC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <TIM2_Init+0xa2>
	  {
		Error_Handler();
 800076a:	f000 fb55 	bl	8000e18 <Error_Handler>
	  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	4619      	mov	r1, r3
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <TIM2_Init+0x11c>)
 800077e:	f003 fca1 	bl	80040c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <TIM2_Init+0xc0>
	  {
		Error_Handler();
 8000788:	f000 fb46 	bl	8000e18 <Error_Handler>
	  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	4619      	mov	r1, r3
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <TIM2_Init+0x11c>)
 80007a4:	f002 ffd6 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <TIM2_Init+0xe6>
	  {
		Error_Handler();
 80007ae:	f000 fb33 	bl	8000e18 <Error_Handler>
	  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2204      	movs	r2, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <TIM2_Init+0x11c>)
 80007ba:	f002 ff6f 	bl	800369c <HAL_TIM_OC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <TIM2_Init+0xfc>
	  {
		Error_Handler();
 80007c4:	f000 fb28 	bl	8000e18 <Error_Handler>
//  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
//	  {
//		Error_Handler();
//	  }

  HAL_TIM_MspPostInit(&htim2);
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <TIM2_Init+0x11c>)
 80007ca:	f001 f8f3 	bl	80019b4 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <TIM2_Init+0x11c>)
 80007d2:	f002 fd93 	bl	80032fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007d6:	2104      	movs	r1, #4
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <TIM2_Init+0x11c>)
 80007da:	f002 fd8f 	bl	80032fc <HAL_TIM_PWM_Start>
}
 80007de:	bf00      	nop
 80007e0:	3738      	adds	r7, #56	; 0x38
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200004b0 	.word	0x200004b0

080007ec <angle_adjust>:
void angle_adjust(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	temp_y = values[3];
 80007f0:	4b7d      	ldr	r3, [pc, #500]	; (80009e8 <angle_adjust+0x1fc>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	4a7d      	ldr	r2, [pc, #500]	; (80009ec <angle_adjust+0x200>)
 80007f6:	6013      	str	r3, [r2, #0]


	if (abs(temp_y) < 63 ) temp_y = 0;
 80007f8:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <angle_adjust+0x200>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bfb8      	it	lt
 8000800:	425b      	neglt	r3, r3
 8000802:	2b3e      	cmp	r3, #62	; 0x3e
 8000804:	dc02      	bgt.n	800080c <angle_adjust+0x20>
 8000806:	4b79      	ldr	r3, [pc, #484]	; (80009ec <angle_adjust+0x200>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]

	if(values[13]  && temp_y > 65)
 800080c:	4b76      	ldr	r3, [pc, #472]	; (80009e8 <angle_adjust+0x1fc>)
 800080e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00c      	beq.n	800082e <angle_adjust+0x42>
 8000814:	4b75      	ldr	r3, [pc, #468]	; (80009ec <angle_adjust+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b41      	cmp	r3, #65	; 0x41
 800081a:	dd08      	ble.n	800082e <angle_adjust+0x42>
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,90);
 800081c:	4b74      	ldr	r3, [pc, #464]	; (80009f0 <angle_adjust+0x204>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	225a      	movs	r2, #90	; 0x5a
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8000824:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <angle_adjust+0x204>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	639a      	str	r2, [r3, #56]	; 0x38
 800082c:	e019      	b.n	8000862 <angle_adjust+0x76>

	}else if (values[13]  && temp_y < -65)
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <angle_adjust+0x1fc>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00d      	beq.n	8000852 <angle_adjust+0x66>
 8000836:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <angle_adjust+0x200>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f113 0f41 	cmn.w	r3, #65	; 0x41
 800083e:	da08      	bge.n	8000852 <angle_adjust+0x66>
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000840:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <angle_adjust+0x204>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,90);
 8000848:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <angle_adjust+0x204>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	225a      	movs	r2, #90	; 0x5a
 800084e:	639a      	str	r2, [r3, #56]	; 0x38
 8000850:	e007      	b.n	8000862 <angle_adjust+0x76>
	}  else
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000852:	4b67      	ldr	r3, [pc, #412]	; (80009f0 <angle_adjust+0x204>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 800085a:	4b65      	ldr	r3, [pc, #404]	; (80009f0 <angle_adjust+0x204>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2200      	movs	r2, #0
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
	}

		if(values[4])
 8000862:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <angle_adjust+0x1fc>)
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d025      	beq.n	80008b6 <angle_adjust+0xca>
		{
			if(temp1 >= 100 && temp1 <= 160)
 800086a:	4b62      	ldr	r3, [pc, #392]	; (80009f4 <angle_adjust+0x208>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b63      	cmp	r3, #99	; 0x63
 8000872:	d929      	bls.n	80008c8 <angle_adjust+0xdc>
 8000874:	4b5f      	ldr	r3, [pc, #380]	; (80009f4 <angle_adjust+0x208>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2ba0      	cmp	r3, #160	; 0xa0
 800087c:	d824      	bhi.n	80008c8 <angle_adjust+0xdc>
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,temp1);
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <angle_adjust+0x208>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <angle_adjust+0x20c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	635a      	str	r2, [r3, #52]	; 0x34

					temp1 = temp1 + 5;
 800088a:	4b5a      	ldr	r3, [pc, #360]	; (80009f4 <angle_adjust+0x208>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	3305      	adds	r3, #5
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <angle_adjust+0x208>)
 8000896:	701a      	strb	r2, [r3, #0]
					if (temp1 > 160)
 8000898:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <angle_adjust+0x208>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2ba0      	cmp	r3, #160	; 0xa0
 80008a0:	d912      	bls.n	80008c8 <angle_adjust+0xdc>
					{
						temp1 = 160;
 80008a2:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <angle_adjust+0x208>)
 80008a4:	22a0      	movs	r2, #160	; 0xa0
 80008a6:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,temp1);
 80008a8:	4b52      	ldr	r3, [pc, #328]	; (80009f4 <angle_adjust+0x208>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <angle_adjust+0x20c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
 80008b4:	e008      	b.n	80008c8 <angle_adjust+0xdc>
					}
				}
		}else
		{
			temp1 = 100;
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <angle_adjust+0x208>)
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,temp1);
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <angle_adjust+0x208>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <angle_adjust+0x20c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
		}

	if(values[15] && values[4])
 80008c8:	4b47      	ldr	r3, [pc, #284]	; (80009e8 <angle_adjust+0x1fc>)
 80008ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00a      	beq.n	80008e6 <angle_adjust+0xfa>
 80008d0:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <angle_adjust+0x1fc>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d006      	beq.n	80008e6 <angle_adjust+0xfa>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008de:	4847      	ldr	r0, [pc, #284]	; (80009fc <angle_adjust+0x210>)
 80008e0:	f001 ffa2 	bl	8002828 <HAL_GPIO_WritePin>
 80008e4:	e005      	b.n	80008f2 <angle_adjust+0x106>
		}else {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);}
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ec:	4843      	ldr	r0, [pc, #268]	; (80009fc <angle_adjust+0x210>)
 80008ee:	f001 ff9b 	bl	8002828 <HAL_GPIO_WritePin>

	if(values[8])
 80008f2:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <angle_adjust+0x1fc>)
 80008f4:	6a1b      	ldr	r3, [r3, #32]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d014      	beq.n	8000924 <angle_adjust+0x138>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2101      	movs	r1, #1
 80008fe:	4840      	ldr	r0, [pc, #256]	; (8000a00 <angle_adjust+0x214>)
 8000900:	f001 ff92 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2102      	movs	r1, #2
 8000908:	483d      	ldr	r0, [pc, #244]	; (8000a00 <angle_adjust+0x214>)
 800090a:	f001 ff8d 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	483c      	ldr	r0, [pc, #240]	; (8000a04 <angle_adjust+0x218>)
 8000914:	f001 ff88 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2120      	movs	r1, #32
 800091c:	4839      	ldr	r0, [pc, #228]	; (8000a04 <angle_adjust+0x218>)
 800091e:	f001 ff83 	bl	8002828 <HAL_GPIO_WritePin>
			}




}
 8000922:	e05e      	b.n	80009e2 <angle_adjust+0x1f6>
		}else if(values[11])
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <angle_adjust+0x1fc>)
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	2b00      	cmp	r3, #0
 800092a:	d014      	beq.n	8000956 <angle_adjust+0x16a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2101      	movs	r1, #1
 8000930:	4833      	ldr	r0, [pc, #204]	; (8000a00 <angle_adjust+0x214>)
 8000932:	f001 ff79 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	2102      	movs	r1, #2
 800093a:	4831      	ldr	r0, [pc, #196]	; (8000a00 <angle_adjust+0x214>)
 800093c:	f001 ff74 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2110      	movs	r1, #16
 8000944:	482f      	ldr	r0, [pc, #188]	; (8000a04 <angle_adjust+0x218>)
 8000946:	f001 ff6f 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	482d      	ldr	r0, [pc, #180]	; (8000a04 <angle_adjust+0x218>)
 8000950:	f001 ff6a 	bl	8002828 <HAL_GPIO_WritePin>
}
 8000954:	e045      	b.n	80009e2 <angle_adjust+0x1f6>
		}else if(values[10])
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <angle_adjust+0x1fc>)
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	2b00      	cmp	r3, #0
 800095c:	d014      	beq.n	8000988 <angle_adjust+0x19c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2101      	movs	r1, #1
 8000962:	4827      	ldr	r0, [pc, #156]	; (8000a00 <angle_adjust+0x214>)
 8000964:	f001 ff60 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <angle_adjust+0x214>)
 800096e:	f001 ff5b 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8000972:	2201      	movs	r2, #1
 8000974:	2110      	movs	r1, #16
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <angle_adjust+0x218>)
 8000978:	f001 ff56 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2120      	movs	r1, #32
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <angle_adjust+0x218>)
 8000982:	f001 ff51 	bl	8002828 <HAL_GPIO_WritePin>
}
 8000986:	e02c      	b.n	80009e2 <angle_adjust+0x1f6>
		}else if(values[9])
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <angle_adjust+0x1fc>)
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	2b00      	cmp	r3, #0
 800098e:	d014      	beq.n	80009ba <angle_adjust+0x1ce>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <angle_adjust+0x214>)
 8000996:	f001 ff47 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2102      	movs	r1, #2
 800099e:	4818      	ldr	r0, [pc, #96]	; (8000a00 <angle_adjust+0x214>)
 80009a0:	f001 ff42 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2110      	movs	r1, #16
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <angle_adjust+0x218>)
 80009aa:	f001 ff3d 	bl	8002828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2120      	movs	r1, #32
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <angle_adjust+0x218>)
 80009b4:	f001 ff38 	bl	8002828 <HAL_GPIO_WritePin>
}
 80009b8:	e013      	b.n	80009e2 <angle_adjust+0x1f6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2101      	movs	r1, #1
 80009be:	4810      	ldr	r0, [pc, #64]	; (8000a00 <angle_adjust+0x214>)
 80009c0:	f001 ff32 	bl	8002828 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2102      	movs	r1, #2
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <angle_adjust+0x214>)
 80009ca:	f001 ff2d 	bl	8002828 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2110      	movs	r1, #16
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <angle_adjust+0x218>)
 80009d4:	f001 ff28 	bl	8002828 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <angle_adjust+0x218>)
 80009de:	f001 ff23 	bl	8002828 <HAL_GPIO_WritePin>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200005b4 	.word	0x200005b4
 80009ec:	20000258 	.word	0x20000258
 80009f0:	200004b0 	.word	0x200004b0
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000394 	.word	0x20000394
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020800 	.word	0x40020800

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d104      	bne.n	8000a24 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		time_run++;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a22:	6013      	str	r3, [r2, #0]
	}
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40000800 	.word	0x40000800
 8000a34:	200002b0 	.word	0x200002b0

08000a38 <main>:

//static void MX_USART2_UART_Init(void);
//static void MX_USART3_UART_Init(void);

int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

	HAL_Init();
 8000a3c:	f001 fb42 	bl	80020c4 <HAL_Init>


	SystemClock_Config();
 8000a40:	f000 f88e 	bl	8000b60 <SystemClock_Config>

	MX_GPIO_Init();
 8000a44:	f000 f8f6 	bl	8000c34 <MX_GPIO_Init>


	MX_USART5_UART_Init();
 8000a48:	f000 fce2 	bl	8001410 <MX_USART5_UART_Init>

	PWM_Init();
 8000a4c:	f000 fb60 	bl	8001110 <PWM_Init>
	TIM3_Init();
 8000a50:	f7ff fd94 	bl	800057c <TIM3_Init>
	TIM2_Init();
 8000a54:	f7ff fe3a 	bl	80006cc <TIM2_Init>


	if(flag != 1)
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <main+0x4c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d009      	beq.n	8000a74 <main+0x3c>
	{
		memset(&data, 0, sizeof(data));
 8000a60:	223c      	movs	r2, #60	; 0x3c
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <main+0x50>)
 8000a66:	f004 fcba 	bl	80053de <memset>
		HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <main+0x54>)
 8000a6e:	4808      	ldr	r0, [pc, #32]	; (8000a90 <main+0x58>)
 8000a70:	f003 fc57 	bl	8004322 <HAL_UART_Receive_IT>
	}
	while (1)
	{
//	  Hand_Control();
//	  flag =0;
		if(flag)
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <main+0x4c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0fb      	beq.n	8000a74 <main+0x3c>
		{
			Hand_Control();
 8000a7c:	f000 fe32 	bl	80016e4 <Hand_Control>
		if(flag)
 8000a80:	e7f8      	b.n	8000a74 <main+0x3c>
 8000a82:	bf00      	nop
 8000a84:	20000090 	.word	0x20000090
 8000a88:	20000618 	.word	0x20000618
 8000a8c:	200005b0 	.word	0x200005b0
 8000a90:	200003dc 	.word	0x200003dc

08000a94 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <HAL_UART_RxCpltCallback+0xa0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d142      	bne.n	8000b2c <HAL_UART_RxCpltCallback+0x98>
	{

		if ((rcv_buffer == 'd') & (flag != 1))
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <HAL_UART_RxCpltCallback+0xa4>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b64      	cmp	r3, #100	; 0x64
 8000aac:	bf0c      	ite	eq
 8000aae:	2301      	moveq	r3, #1
 8000ab0:	2300      	movne	r3, #0
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <HAL_UART_RxCpltCallback+0xa8>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <HAL_UART_RxCpltCallback+0x4e>
		{
			count = 0;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_UART_RxCpltCallback+0xac>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_UART_RxCpltCallback+0xa8>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4917      	ldr	r1, [pc, #92]	; (8000b38 <HAL_UART_RxCpltCallback+0xa4>)
 8000ada:	481a      	ldr	r0, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0xb0>)
 8000adc:	f003 fc21 	bl	8004322 <HAL_UART_Receive_IT>

		}


	}
}
 8000ae0:	e024      	b.n	8000b2c <HAL_UART_RxCpltCallback+0x98>
		}else if ((rcv_buffer != 'd') & (flag != 1))
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_RxCpltCallback+0xa4>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b64      	cmp	r3, #100	; 0x64
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_UART_RxCpltCallback+0xa8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	bf14      	ite	ne
 8000af8:	2301      	movne	r3, #1
 8000afa:	2300      	moveq	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4013      	ands	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d012      	beq.n	8000b2c <HAL_UART_RxCpltCallback+0x98>
			data[count++] = rcv_buffer;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_UART_RxCpltCallback+0xac>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	b2d1      	uxtb	r1, r2
 8000b0e:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <HAL_UART_RxCpltCallback+0xac>)
 8000b10:	7011      	strb	r1, [r2, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_UART_RxCpltCallback+0xa4>)
 8000b16:	7819      	ldrb	r1, [r3, #0]
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_UART_RxCpltCallback+0xb4>)
 8000b1a:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4906      	ldr	r1, [pc, #24]	; (8000b38 <HAL_UART_RxCpltCallback+0xa4>)
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <HAL_UART_RxCpltCallback+0xb0>)
 8000b22:	f003 fbfe 	bl	8004322 <HAL_UART_Receive_IT>
			flag = 0;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_UART_RxCpltCallback+0xa8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40005000 	.word	0x40005000
 8000b38:	200005b0 	.word	0x200005b0
 8000b3c:	20000090 	.word	0x20000090
 8000b40:	20000654 	.word	0x20000654
 8000b44:	200003dc 	.word	0x200003dc
 8000b48:	20000618 	.word	0x20000618

08000b4c <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint16_t count;
	if(htim->Instance == TIM3)
	{

	}
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0
//  {
//    Error_Handler();
//  }


	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 fc35 	bl	80053de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <SystemClock_Config+0xcc>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <SystemClock_Config+0xcc>)
 8000b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <SystemClock_Config+0xcc>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <SystemClock_Config+0xd0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <SystemClock_Config+0xd0>)
 8000baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <SystemClock_Config+0xd0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000bd4:	2390      	movs	r3, #144	; 0x90
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fe39 	bl	800285c <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x94>
	{
	Error_Handler();
 8000bf0:	f000 f912 	bl	8000e18 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c04:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2104      	movs	r1, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 f89a 	bl	8002d4c <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xc2>
	{
	Error_Handler();
 8000c1e:	f000 f8fb 	bl	8000e18 <Error_Handler>
//
//	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }
}
 8000c22:	bf00      	nop
 8000c24:	3750      	adds	r7, #80	; 0x50
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b6c      	ldr	r3, [pc, #432]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a6b      	ldr	r2, [pc, #428]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b69      	ldr	r3, [pc, #420]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b65      	ldr	r3, [pc, #404]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a64      	ldr	r2, [pc, #400]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b5e      	ldr	r3, [pc, #376]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a5d      	ldr	r2, [pc, #372]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b5b      	ldr	r3, [pc, #364]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b57      	ldr	r3, [pc, #348]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a56      	ldr	r2, [pc, #344]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b54      	ldr	r3, [pc, #336]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a4f      	ldr	r2, [pc, #316]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <MX_GPIO_Init+0x1cc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000cd6:	237f      	movs	r3, #127	; 0x7f
 8000cd8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4845      	ldr	r0, [pc, #276]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000cee:	f001 fbff 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000cf2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000cf6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	483f      	ldr	r0, [pc, #252]	; (8000e08 <MX_GPIO_Init+0x1d4>)
 8000d0c:	f001 fbf0 	bl	80024f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d10:	2303      	movs	r3, #3
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4839      	ldr	r0, [pc, #228]	; (8000e0c <MX_GPIO_Init+0x1d8>)
 8000d28:	f001 fbe2 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d2c:	23f0      	movs	r3, #240	; 0xf0
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4832      	ldr	r0, [pc, #200]	; (8000e10 <MX_GPIO_Init+0x1dc>)
 8000d48:	f001 fbd2 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000d4c:	f24f 0304 	movw	r3, #61444	; 0xf004
 8000d50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	482a      	ldr	r0, [pc, #168]	; (8000e0c <MX_GPIO_Init+0x1d8>)
 8000d62:	f001 fbc5 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d66:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d6a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4822      	ldr	r0, [pc, #136]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000d7c:	f001 fbb8 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 8000d80:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000d84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	481f      	ldr	r0, [pc, #124]	; (8000e14 <MX_GPIO_Init+0x1e0>)
 8000d96:	f001 fbab 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD15 PD2
                           PD3 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_2
 8000d9a:	f64e 430f 	movw	r3, #60431	; 0xec0f
 8000d9e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3 | GPIO_PIN_14|GPIO_PIN_0 | GPIO_PIN_1| GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4818      	ldr	r0, [pc, #96]	; (8000e14 <MX_GPIO_Init+0x1e0>)
 8000db4:	f001 fb9c 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480f      	ldr	r0, [pc, #60]	; (8000e14 <MX_GPIO_Init+0x1e0>)
 8000dd6:	f001 fb8b 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_GPIO_Init+0x1dc>)
 8000df4:	f001 fb7c 	bl	80024f0 <HAL_GPIO_Init>



/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020c00 	.word	0x40020c00

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1,htim8,htim5;


void MX_TIM1_Init(void)//5kHz
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b096      	sub	sp, #88	; 0x58
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	615a      	str	r2, [r3, #20]
 8000e54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2220      	movs	r2, #32
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f004 fabe 	bl	80053de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e62:	4b50      	ldr	r3, [pc, #320]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <MX_TIM1_Init+0x184>)
 8000e66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000e68:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e6a:	2247      	movs	r2, #71	; 0x47
 8000e6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8000e74:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8e:	4845      	ldr	r0, [pc, #276]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000e90:	f002 f93c 	bl	800310c <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e9a:	f7ff ffbd 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	483e      	ldr	r0, [pc, #248]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000eac:	f002 fd14 	bl	80038d8 <HAL_TIM_ConfigClockSource>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eb6:	f7ff ffaf 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eba:	483a      	ldr	r0, [pc, #232]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000ebc:	f002 f9ce 	bl	800325c <HAL_TIM_PWM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ec6:	f7ff ffa7 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4832      	ldr	r0, [pc, #200]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000eda:	f003 f8f3 	bl	80040c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ee4:	f7ff ff98 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee8:	2360      	movs	r3, #96	; 0x60
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4825      	ldr	r0, [pc, #148]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000f0e:	f002 fc21 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f18:	f7ff ff7e 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	2204      	movs	r2, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000f26:	f002 fc15 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000f30:	f7ff ff72 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	2208      	movs	r2, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000f3e:	f002 fc09 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f48:	f7ff ff66 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	220c      	movs	r2, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000f56:	f002 fbfd 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000f60:	f7ff ff5a 	bl	8000e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000f88:	f003 f918 	bl	80041bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000f92:	f7ff ff41 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <MX_TIM1_Init+0x180>)
 8000f98:	f000 fd0c 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 8000f9c:	bf00      	nop
 8000f9e:	3758      	adds	r7, #88	; 0x58
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000468 	.word	0x20000468
 8000fa8:	40010000 	.word	0x40010000

08000fac <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b092      	sub	sp, #72	; 0x48
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fa01 	bl	80053de <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <MX_TIM8_Init+0x15c>)
 8000fde:	4a4b      	ldr	r2, [pc, #300]	; (800110c <MX_TIM8_Init+0x160>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 8000fe2:	4b49      	ldr	r3, [pc, #292]	; (8001108 <MX_TIM8_Init+0x15c>)
 8000fe4:	2247      	movs	r2, #71	; 0x47
 8000fe6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b47      	ldr	r3, [pc, #284]	; (8001108 <MX_TIM8_Init+0x15c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 400;
 8000fee:	4b46      	ldr	r3, [pc, #280]	; (8001108 <MX_TIM8_Init+0x15c>)
 8000ff0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ff4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b44      	ldr	r3, [pc, #272]	; (8001108 <MX_TIM8_Init+0x15c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <MX_TIM8_Init+0x15c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <MX_TIM8_Init+0x15c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001008:	483f      	ldr	r0, [pc, #252]	; (8001108 <MX_TIM8_Init+0x15c>)
 800100a:	f002 f927 	bl	800325c <HAL_TIM_PWM_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001014:	f7ff ff00 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001018:	483b      	ldr	r0, [pc, #236]	; (8001108 <MX_TIM8_Init+0x15c>)
 800101a:	f002 f8c6 	bl	80031aa <HAL_TIM_OC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001024:	f7ff fef8 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001034:	4619      	mov	r1, r3
 8001036:	4834      	ldr	r0, [pc, #208]	; (8001108 <MX_TIM8_Init+0x15c>)
 8001038:	f003 f844 	bl	80040c4 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001042:	f7ff fee9 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001046:	2360      	movs	r3, #96	; 0x60
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4827      	ldr	r0, [pc, #156]	; (8001108 <MX_TIM8_Init+0x15c>)
 800106c:	f002 fb72 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 8001076:	f7ff fecf 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	2204      	movs	r2, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4821      	ldr	r0, [pc, #132]	; (8001108 <MX_TIM8_Init+0x15c>)
 8001084:	f002 fb66 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 800108e:	f7ff fec3 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	2208      	movs	r2, #8
 8001098:	4619      	mov	r1, r3
 800109a:	481b      	ldr	r0, [pc, #108]	; (8001108 <MX_TIM8_Init+0x15c>)
 800109c:	f002 fb5a 	bl	8003754 <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80010a6:	f7ff feb7 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	220c      	movs	r2, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <MX_TIM8_Init+0x15c>)
 80010b8:	f002 faf0 	bl	800369c <HAL_TIM_OC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 80010c2:	f7ff fea9 	bl	8000e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <MX_TIM8_Init+0x15c>)
 80010ea:	f003 f867 	bl	80041bc <HAL_TIMEx_ConfigBreakDeadTime>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 80010f4:	f7ff fe90 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <MX_TIM8_Init+0x15c>)
 80010fa:	f000 fc5b 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 80010fe:	bf00      	nop
 8001100:	3748      	adds	r7, #72	; 0x48
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000564 	.word	0x20000564
 800110c:	40010400 	.word	0x40010400

08001110 <PWM_Init>:




void PWM_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 8001114:	f7ff fe86 	bl	8000e24 <MX_TIM1_Init>
	MX_TIM8_Init();
 8001118:	f7ff ff48 	bl	8000fac <MX_TIM8_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800111c:	2100      	movs	r1, #0
 800111e:	4810      	ldr	r0, [pc, #64]	; (8001160 <PWM_Init+0x50>)
 8001120:	f002 f8ec 	bl	80032fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001124:	2104      	movs	r1, #4
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <PWM_Init+0x50>)
 8001128:	f002 f8e8 	bl	80032fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800112c:	2108      	movs	r1, #8
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <PWM_Init+0x50>)
 8001130:	f002 f8e4 	bl	80032fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001134:	210c      	movs	r1, #12
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <PWM_Init+0x50>)
 8001138:	f002 f8e0 	bl	80032fc <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800113c:	2100      	movs	r1, #0
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <PWM_Init+0x54>)
 8001140:	f002 f8dc 	bl	80032fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001144:	2104      	movs	r1, #4
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <PWM_Init+0x54>)
 8001148:	f002 f8d8 	bl	80032fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800114c:	2108      	movs	r1, #8
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <PWM_Init+0x54>)
 8001150:	f002 f8d4 	bl	80032fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001154:	210c      	movs	r1, #12
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <PWM_Init+0x54>)
 8001158:	f002 f8d0 	bl	80032fc <HAL_TIM_PWM_Start>
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000468 	.word	0x20000468
 8001164:	20000564 	.word	0x20000564

08001168 <st_motor1>:

void st_motor1(int speed)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);}
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f935 	bl	80013e0 <speed_shift>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd05      	ble.n	8001188 <st_motor1+0x20>
 800117c:	2201      	movs	r2, #1
 800117e:	2101      	movs	r1, #1
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <st_motor1+0x58>)
 8001182:	f001 fb51 	bl	8002828 <HAL_GPIO_WritePin>
 8001186:	e00a      	b.n	800119e <st_motor1+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);}
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f929 	bl	80013e0 <speed_shift>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	da04      	bge.n	800119e <st_motor1+0x36>
 8001194:	2200      	movs	r2, #0
 8001196:	2101      	movs	r1, #1
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <st_motor1+0x58>)
 800119a:	f001 fb45 	bl	8002828 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(speed_shift(speed))-12);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f91e 	bl	80013e0 <speed_shift>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bfb8      	it	lt
 80011aa:	425b      	neglt	r3, r3
 80011ac:	f1a3 020c 	sub.w	r2, r3, #12
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <st_motor1+0x5c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	20000468 	.word	0x20000468

080011c8 <st_motor2>:

void st_motor2(int speed)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);}
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f905 	bl	80013e0 <speed_shift>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dd06      	ble.n	80011ea <st_motor2+0x22>
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e2:	4810      	ldr	r0, [pc, #64]	; (8001224 <st_motor2+0x5c>)
 80011e4:	f001 fb20 	bl	8002828 <HAL_GPIO_WritePin>
 80011e8:	e00b      	b.n	8001202 <st_motor2+0x3a>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);}
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f8f8 	bl	80013e0 <speed_shift>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	da05      	bge.n	8001202 <st_motor2+0x3a>
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <st_motor2+0x5c>)
 80011fe:	f001 fb13 	bl	8002828 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,abs(speed_shift(speed))-12);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f8ec 	bl	80013e0 <speed_shift>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	bfb8      	it	lt
 800120e:	425b      	neglt	r3, r3
 8001210:	f1a3 020c 	sub.w	r2, r3, #12
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <st_motor2+0x60>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	639a      	str	r2, [r3, #56]	; 0x38

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020000 	.word	0x40020000
 8001228:	20000468 	.word	0x20000468

0800122c <st_motor3>:

void st_motor3(int speed)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);}
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f8d3 	bl	80013e0 <speed_shift>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd05      	ble.n	800124c <st_motor3+0x20>
 8001240:	2201      	movs	r2, #1
 8001242:	2108      	movs	r1, #8
 8001244:	480f      	ldr	r0, [pc, #60]	; (8001284 <st_motor3+0x58>)
 8001246:	f001 faef 	bl	8002828 <HAL_GPIO_WritePin>
 800124a:	e00a      	b.n	8001262 <st_motor3+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);}
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f8c7 	bl	80013e0 <speed_shift>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	da04      	bge.n	8001262 <st_motor3+0x36>
 8001258:	2200      	movs	r2, #0
 800125a:	2108      	movs	r1, #8
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <st_motor3+0x58>)
 800125e:	f001 fae3 	bl	8002828 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,abs(speed_shift(speed))-12);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8bc 	bl	80013e0 <speed_shift>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfb8      	it	lt
 800126e:	425b      	neglt	r3, r3
 8001270:	f1a3 020c 	sub.w	r2, r3, #12
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <st_motor3+0x5c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40020c00 	.word	0x40020c00
 8001288:	20000468 	.word	0x20000468

0800128c <st_motor4>:

void st_motor4(int speed)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);}
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f8a3 	bl	80013e0 <speed_shift>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd05      	ble.n	80012ac <st_motor4+0x20>
 80012a0:	2201      	movs	r2, #1
 80012a2:	2102      	movs	r1, #2
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <st_motor4+0x58>)
 80012a6:	f001 fabf 	bl	8002828 <HAL_GPIO_WritePin>
 80012aa:	e00a      	b.n	80012c2 <st_motor4+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);}
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f897 	bl	80013e0 <speed_shift>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da04      	bge.n	80012c2 <st_motor4+0x36>
 80012b8:	2200      	movs	r2, #0
 80012ba:	2102      	movs	r1, #2
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <st_motor4+0x58>)
 80012be:	f001 fab3 	bl	8002828 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,abs(speed_shift(speed))-12);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f88c 	bl	80013e0 <speed_shift>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bfb8      	it	lt
 80012ce:	425b      	neglt	r3, r3
 80012d0:	f1a3 020c 	sub.w	r2, r3, #12
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <st_motor4+0x5c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40

}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	20000468 	.word	0x20000468

080012ec <chay_thang>:

//////////**************************************************************////////////////////////

void chay_thang(int speed)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	st_motor1(speed);//DC 1
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff37 	bl	8001168 <st_motor1>
	st_motor2(speed);//DC 2
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff64 	bl	80011c8 <st_motor2>
	st_motor3(-speed);//DC 3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	425b      	negs	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff91 	bl	800122c <st_motor3>
	st_motor4(-speed);//DC 4
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	425b      	negs	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffbc 	bl	800128c <st_motor4>

}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <chay_phai>:
	st_motor3(speed);//DC 3
	st_motor4(speed);//DC 4
}

void chay_phai(int speed)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	st_motor1(-speed);//DC 1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	425b      	negs	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff1d 	bl	8001168 <st_motor1>
	st_motor2(speed);//DC 2
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff4a 	bl	80011c8 <st_motor2>
	st_motor3(speed);//DC 3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff79 	bl	800122c <st_motor3>
	st_motor4(-speed);//DC 4
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	425b      	negs	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ffa4 	bl	800128c <st_motor4>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <xoay_phai>:
	st_motor3(8);//DC 3
	st_motor4(-speed);//DC 4
}

void xoay_phai(int speed)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	st_motor1(speed);//DC 1
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff07 	bl	8001168 <st_motor1>
	st_motor2(speed);//DC 2
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff34 	bl	80011c8 <st_motor2>
	st_motor3(speed);//DC 3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff63 	bl	800122c <st_motor3>
	st_motor4(speed);//DC 4
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff90 	bl	800128c <st_motor4>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <xoay_trai>:

void xoay_trai(int speed)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	st_motor1(-speed);//DC 1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	425b      	negs	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fef1 	bl	8001168 <st_motor1>
	st_motor2(-speed);//DC 2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	425b      	negs	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff1c 	bl	80011c8 <st_motor2>
	st_motor3(-speed);//DC 3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	425b      	negs	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff49 	bl	800122c <st_motor3>
	st_motor4(-speed);//DC 4
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	425b      	negs	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff74 	bl	800128c <st_motor4>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <stop>:
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,8);
}
void stop(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,12);
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <stop+0x30>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	220c      	movs	r2, #12
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,12);
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <stop+0x30>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	220c      	movs	r2, #12
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,12);
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <stop+0x30>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	220c      	movs	r2, #12
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,12);
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <stop+0x30>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	220c      	movs	r2, #12
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38

}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000468 	.word	0x20000468

080013e0 <speed_shift>:
///////////////////////////////////////Loai truong hop khoa cung dong co/////////////////////////////////

int speed_shift(int speed)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	if(speed <0){return (speed - 12);}
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da02      	bge.n	80013f4 <speed_shift+0x14>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3b0c      	subs	r3, #12
 80013f2:	e007      	b.n	8001404 <speed_shift+0x24>
	if(speed >0){return (speed + 12);}
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd02      	ble.n	8001400 <speed_shift+0x20>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	330c      	adds	r3, #12
 80013fe:	e001      	b.n	8001404 <speed_shift+0x24>
	else {return (speed + 12);}
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	330c      	adds	r3, #12

}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <MX_USART5_UART_Init>:
					16: Share		| 17: Option 		| 18: PS_Button 	| 19: Tounch_pad 	| 20:Battery 												*/
uint16_t sspeed;
uint8_t flag =0;

void MX_USART5_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0


  huart5.Instance = UART5;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART5_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART5_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART5_UART_Init+0x4c>)
 800141c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001420:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART5_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART5_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART5_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART5_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART5_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART5_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART5_UART_Init+0x4c>)
 8001448:	f002 ff1e 	bl	8004288 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART5_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f7ff fce1 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200003dc 	.word	0x200003dc
 8001460:	40005000 	.word	0x40005000

08001464 <split_array>:

void split_array(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0



     // Mảng để lưu các giá trị
    char *token;
    char delim[] = ","; // Ký tự phân tách giữa các giá trị
 800146a:	232c      	movs	r3, #44	; 0x2c
 800146c:	80bb      	strh	r3, [r7, #4]
    int i = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]

    // Sử dụng strtok để tách chuỗi
    token = strtok(data, delim);
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <split_array+0x50>)
 8001478:	f003 ffba 	bl	80053f0 <strtok>
 800147c:	60f8      	str	r0, [r7, #12]

    // Duyệt qua các phần tử đã được tách
    while (token != NULL) {
 800147e:	e011      	b.n	80014a4 <split_array+0x40>
        sscanf(token, "%d", &values[i]); // Chuyển đổi chuỗi thành số nguyên và lưu vào mảng
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <split_array+0x54>)
 8001486:	4413      	add	r3, r2
 8001488:	461a      	mov	r2, r3
 800148a:	490c      	ldr	r1, [pc, #48]	; (80014bc <split_array+0x58>)
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f003 ff35 	bl	80052fc <siscanf>
        i++;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3301      	adds	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
        token = strtok(NULL, delim); // Tiếp tục tách chuỗi
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	2000      	movs	r0, #0
 800149e:	f003 ffa7 	bl	80053f0 <strtok>
 80014a2:	60f8      	str	r0, [r7, #12]
    while (token != NULL) {
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ea      	bne.n	8001480 <split_array+0x1c>
    }

}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000618 	.word	0x20000618
 80014b8:	200005b4 	.word	0x200005b4
 80014bc:	08006b98 	.word	0x08006b98

080014c0 <Control_Move>:




void Control_Move(void)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
	int tempy,tempx,xoay;
	xoay =	values[2];
 80014c6:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <Control_Move+0x210>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	607b      	str	r3, [r7, #4]
	tempy = values[1];
 80014cc:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <Control_Move+0x210>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	60fb      	str	r3, [r7, #12]
	tempx = values[0];
 80014d2:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <Control_Move+0x210>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60bb      	str	r3, [r7, #8]
	//gioi han gia tri
	if(abs(tempx) < 63)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f113 0f3e 	cmn.w	r3, #62	; 0x3e
 80014de:	db04      	blt.n	80014ea <Control_Move+0x2a>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b3e      	cmp	r3, #62	; 0x3e
 80014e4:	dc01      	bgt.n	80014ea <Control_Move+0x2a>
	{
		tempx = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
	}

	if(abs(tempy) < 63)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f113 0f3e 	cmn.w	r3, #62	; 0x3e
 80014f0:	db04      	blt.n	80014fc <Control_Move+0x3c>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b3e      	cmp	r3, #62	; 0x3e
 80014f6:	dc01      	bgt.n	80014fc <Control_Move+0x3c>
	{
		tempy = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
	}

	if(abs(xoay) < 63)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f113 0f3e 	cmn.w	r3, #62	; 0x3e
 8001502:	db04      	blt.n	800150e <Control_Move+0x4e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b3e      	cmp	r3, #62	; 0x3e
 8001508:	dc01      	bgt.n	800150e <Control_Move+0x4e>
	{
		xoay = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
	}

	if(abs(tempx) > abs(tempy))
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001514:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	bfb8      	it	lt
 800151e:	425b      	neglt	r3, r3
 8001520:	429a      	cmp	r2, r3
 8001522:	dd02      	ble.n	800152a <Control_Move+0x6a>
	{
		tempy = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e00c      	b.n	8001544 <Control_Move+0x84>
	}
	else if(abs(tempx) < abs(tempy))
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001530:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	429a      	cmp	r2, r3
 800153e:	da01      	bge.n	8001544 <Control_Move+0x84>
	{
		tempx = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
	}


		if(  (values[12] == 1  ||  values[14] == 1)   &&  (abs(tempy)>0 || abs(tempx)>0 || abs(xoay)> 0) )
 8001544:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <Control_Move+0x210>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	2b01      	cmp	r3, #1
 800154a:	d004      	beq.n	8001556 <Control_Move+0x96>
 800154c:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <Control_Move+0x210>)
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	2b01      	cmp	r3, #1
 8001552:	f040 80a6 	bne.w	80016a2 <Control_Move+0x1e2>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	bfb8      	it	lt
 800155c:	425b      	neglt	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	dc0c      	bgt.n	800157c <Control_Move+0xbc>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	bfb8      	it	lt
 8001568:	425b      	neglt	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	dc06      	bgt.n	800157c <Control_Move+0xbc>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfb8      	it	lt
 8001574:	425b      	neglt	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	f340 8093 	ble.w	80016a2 <Control_Move+0x1e2>
		{// neu EABLE
			if( values[12]  && abs(tempy)>0)
 800157c:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <Control_Move+0x210>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	2b00      	cmp	r3, #0
 8001582:	d019      	beq.n	80015b8 <Control_Move+0xf8>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	bfb8      	it	lt
 800158a:	425b      	neglt	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	dd13      	ble.n	80015b8 <Control_Move+0xf8>
				{
					sspeed = Basic_speed;
 8001590:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <Control_Move+0x214>)
 8001592:	2282      	movs	r2, #130	; 0x82
 8001594:	801a      	strh	r2, [r3, #0]
					RobotSpeed_y = sspeed * sign(tempy);
 8001596:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <Control_Move+0x214>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	461c      	mov	r4, r3
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f8b5 	bl	800170c <sign>
 80015a2:	4603      	mov	r3, r0
 80015a4:	fb04 f303 	mul.w	r3, r4, r3
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <Control_Move+0x218>)
 80015aa:	6013      	str	r3, [r2, #0]
					chay_thang(	RobotSpeed_y);
 80015ac:	4b4a      	ldr	r3, [pc, #296]	; (80016d8 <Control_Move+0x218>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe9b 	bl	80012ec <chay_thang>
 80015b6:	e020      	b.n	80015fa <Control_Move+0x13a>
				}else if( values[14]  &&  abs(tempy)>0)
 80015b8:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <Control_Move+0x210>)
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d019      	beq.n	80015f4 <Control_Move+0x134>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bfb8      	it	lt
 80015c6:	425b      	neglt	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dd13      	ble.n	80015f4 <Control_Move+0x134>
				{
					sspeed=Fast_speed;
 80015cc:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <Control_Move+0x214>)
 80015ce:	22c8      	movs	r2, #200	; 0xc8
 80015d0:	801a      	strh	r2, [r3, #0]
					RobotSpeed_y=  sspeed * sign(tempy);
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <Control_Move+0x214>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	461c      	mov	r4, r3
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f897 	bl	800170c <sign>
 80015de:	4603      	mov	r3, r0
 80015e0:	fb04 f303 	mul.w	r3, r4, r3
 80015e4:	4a3c      	ldr	r2, [pc, #240]	; (80016d8 <Control_Move+0x218>)
 80015e6:	6013      	str	r3, [r2, #0]
					chay_thang(	RobotSpeed_y);
 80015e8:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <Control_Move+0x218>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fe7d 	bl	80012ec <chay_thang>
 80015f2:	e002      	b.n	80015fa <Control_Move+0x13a>
				}		else RobotSpeed_y=0;
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <Control_Move+0x218>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

			if( values[12]  && abs(tempx)>0 )
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <Control_Move+0x210>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d019      	beq.n	8001636 <Control_Move+0x176>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	bfb8      	it	lt
 8001608:	425b      	neglt	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	dd13      	ble.n	8001636 <Control_Move+0x176>
				{
					sspeed = Basic_speed;
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <Control_Move+0x214>)
 8001610:	2282      	movs	r2, #130	; 0x82
 8001612:	801a      	strh	r2, [r3, #0]
					RobotSpeed_x = sspeed * sign(tempx) ;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <Control_Move+0x214>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	461c      	mov	r4, r3
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f000 f876 	bl	800170c <sign>
 8001620:	4603      	mov	r3, r0
 8001622:	fb04 f303 	mul.w	r3, r4, r3
 8001626:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <Control_Move+0x21c>)
 8001628:	6013      	str	r3, [r2, #0]
					chay_phai(RobotSpeed_x);
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <Control_Move+0x21c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fe74 	bl	800131c <chay_phai>
 8001634:	e020      	b.n	8001678 <Control_Move+0x1b8>
				}else if( values[12]  &&  abs(tempx)>0)
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <Control_Move+0x210>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	2b00      	cmp	r3, #0
 800163c:	d019      	beq.n	8001672 <Control_Move+0x1b2>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	bfb8      	it	lt
 8001644:	425b      	neglt	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	dd13      	ble.n	8001672 <Control_Move+0x1b2>
				{
					sspeed = Fast_speed;
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <Control_Move+0x214>)
 800164c:	22c8      	movs	r2, #200	; 0xc8
 800164e:	801a      	strh	r2, [r3, #0]
					RobotSpeed_x =  sspeed * sign(tempx) ;
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <Control_Move+0x214>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	461c      	mov	r4, r3
 8001656:	68b8      	ldr	r0, [r7, #8]
 8001658:	f000 f858 	bl	800170c <sign>
 800165c:	4603      	mov	r3, r0
 800165e:	fb04 f303 	mul.w	r3, r4, r3
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <Control_Move+0x21c>)
 8001664:	6013      	str	r3, [r2, #0]
					chay_phai(RobotSpeed_x);
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <Control_Move+0x21c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fe56 	bl	800131c <chay_phai>
 8001670:	e002      	b.n	8001678 <Control_Move+0x1b8>
				}		else RobotSpeed_x = 0;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <Control_Move+0x21c>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
			//xoay
			 if(    values[12]  &&   xoay > 0 )    	xoay_phai(Turn_speed);
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <Control_Move+0x210>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <Control_Move+0x1cc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	dd02      	ble.n	800168c <Control_Move+0x1cc>
 8001686:	2048      	movs	r0, #72	; 0x48
 8001688:	f7ff fe60 	bl	800134c <xoay_phai>
			 if(    values[12]  &&   xoay < 0 )    	xoay_trai(Turn_speed);
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <Control_Move+0x210>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00f      	beq.n	80016b4 <Control_Move+0x1f4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	da0c      	bge.n	80016b4 <Control_Move+0x1f4>
 800169a:	2048      	movs	r0, #72	; 0x48
 800169c:	f7ff fe6a 	bl	8001374 <xoay_trai>
 80016a0:	e008      	b.n	80016b4 <Control_Move+0x1f4>


		}else
		{

			stop();// neu nut 9 and 11  = 0 thi stop het
 80016a2:	f7ff fe83 	bl	80013ac <stop>
			RobotSpeed_x=0;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <Control_Move+0x21c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
			RobotSpeed_y=0;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <Control_Move+0x218>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e000      	b.n	80016b6 <Control_Move+0x1f6>
			 if(    values[12]  &&   xoay < 0 )    	xoay_trai(Turn_speed);
 80016b4:	bf00      	nop

//		 if(values[16] == 1)
//		 {
//			 tha_long();
//		 }
		tempx=0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
		tempy=0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
		xoay=0;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
		flag = 0;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <Control_Move+0x220>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	200005b4 	.word	0x200005b4
 80016d4:	200005b2 	.word	0x200005b2
 80016d8:	20000088 	.word	0x20000088
 80016dc:	2000008c 	.word	0x2000008c
 80016e0:	20000090 	.word	0x20000090

080016e4 <Hand_Control>:

void Hand_Control(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	split_array();
 80016e8:	f7ff febc 	bl	8001464 <split_array>
	angle_adjust();
 80016ec:	f7ff f87e 	bl	80007ec <angle_adjust>
	Control_Move();
 80016f0:	f7ff fee6 	bl	80014c0 <Control_Move>
	HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	4903      	ldr	r1, [pc, #12]	; (8001704 <Hand_Control+0x20>)
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <Hand_Control+0x24>)
 80016fa:	f002 fe12 	bl	8004322 <HAL_UART_Receive_IT>
	//HAL_Delay(10);
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200005b0 	.word	0x200005b0
 8001708:	200003dc 	.word	0x200003dc

0800170c <sign>:


int  sign(int number)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	int dau;
	if(number > 0)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	dd02      	ble.n	8001720 <sign+0x14>
	{
		dau = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e008      	b.n	8001732 <sign+0x26>
	}
	else if(number < 0)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	da03      	bge.n	800172e <sign+0x22>
	{
		dau = -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e001      	b.n	8001732 <sign+0x26>
	}else dau = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
	return dau;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_MspInit>:




void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a29      	ldr	r2, [pc, #164]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10e      	bne.n	80017c0 <HAL_TIM_Base_MspInit+0x30>
  {

    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a27      	ldr	r2, [pc, #156]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_TIM4_CLK_ENABLE();

  }

}
 80017be:	e03a      	b.n	8001836 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c8:	d10e      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
}
 80017e6:	e026      	b.n	8001836 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_TIM_Base_MspInit+0xbc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10e      	bne.n	8001810 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	e012      	b.n	8001836 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_TIM_Base_MspInit+0xc0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10d      	bne.n	8001836 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
}
 8001836:	bf00      	nop
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40010000 	.word	0x40010000
 8001848:	40023800 	.word	0x40023800
 800184c:	40000400 	.word	0x40000400
 8001850:	40000800 	.word	0x40000800

08001854 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_TIM_PWM_MspInit+0x14c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10d      	bne.n	8001892 <HAL_TIM_PWM_MspInit+0x3e>
  {

    __HAL_RCC_TIM5_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	6a3b      	ldr	r3, [r7, #32]

  }
  if(htim->Instance==TIM2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189a:	d14b      	bne.n	8001934 <HAL_TIM_PWM_MspInit+0xe0>
    {


      __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a38      	ldr	r2, [pc, #224]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	69bb      	ldr	r3, [r7, #24]
      /**TIM2 GPIO Configuration
      PA15     ------> TIM2_CH1
      PB3     ------> TIM2_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018e6:	2301      	movs	r3, #1
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	482d      	ldr	r0, [pc, #180]	; (80019a8 <HAL_TIM_PWM_MspInit+0x154>)
 80018f2:	f000 fdfd 	bl	80024f0 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018f6:	2308      	movs	r3, #8
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001906:	2301      	movs	r3, #1
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	4619      	mov	r1, r3
 8001910:	4826      	ldr	r0, [pc, #152]	; (80019ac <HAL_TIM_PWM_MspInit+0x158>)
 8001912:	f000 fded 	bl	80024f0 <HAL_GPIO_Init>
      __HAL_RCC_TIM2_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_TIM3_CLK_ENABLE();
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8001932:	e030      	b.n	8001996 <HAL_TIM_PWM_MspInit+0x142>
    else if(htim->Instance==TIM3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_TIM_PWM_MspInit+0x15c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_TIM_PWM_MspInit+0x142>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;//|GPIO_PIN_8|GPIO_PIN_9;
 800195a:	2330      	movs	r3, #48	; 0x30
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800196a:	2302      	movs	r3, #2
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <HAL_TIM_PWM_MspInit+0x158>)
 8001976:	f000 fdbb 	bl	80024f0 <HAL_GPIO_Init>
      __HAL_RCC_TIM3_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_TIM_PWM_MspInit+0x150>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	bf00      	nop
 8001998:	3738      	adds	r7, #56	; 0x38
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40000c00 	.word	0x40000c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40000400 	.word	0x40000400

080019b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	; 0x40
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a7f      	ldr	r2, [pc, #508]	; (8001bd0 <HAL_TIM_MspPostInit+0x21c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12d      	bne.n	8001a32 <HAL_TIM_MspPostInit+0x7e>
  {

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019da:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a7d      	ldr	r2, [pc, #500]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80019f2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4872      	ldr	r0, [pc, #456]	; (8001bd8 <HAL_TIM_MspPostInit+0x224>)
 8001a10:	f000 fd6e 	bl	80024f0 <HAL_GPIO_Init>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	4b6e      	ldr	r3, [pc, #440]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	4a6d      	ldr	r2, [pc, #436]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6453      	str	r3, [r2, #68]	; 0x44
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        __HAL_RCC_TIM8_CLK_ENABLE();
  }


}
 8001a30:	e0ca      	b.n	8001bc8 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3a:	d13d      	bne.n	8001ab8 <HAL_TIM_MspPostInit+0x104>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a63      	ldr	r2, [pc, #396]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a5c      	ldr	r2, [pc, #368]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a86:	2301      	movs	r3, #1
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4851      	ldr	r0, [pc, #324]	; (8001bd8 <HAL_TIM_MspPostInit+0x224>)
 8001a92:	f000 fd2d 	bl	80024f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a96:	2308      	movs	r3, #8
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	484a      	ldr	r0, [pc, #296]	; (8001bdc <HAL_TIM_MspPostInit+0x228>)
 8001ab2:	f000 fd1d 	bl	80024f0 <HAL_GPIO_Init>
}
 8001ab6:	e087      	b.n	8001bc8 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a48      	ldr	r2, [pc, #288]	; (8001be0 <HAL_TIM_MspPostInit+0x22c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d12c      	bne.n	8001b1c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;//|GPIO_PIN_8|GPIO_PIN_9;
 8001ade:	2330      	movs	r3, #48	; 0x30
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aee:	2302      	movs	r3, #2
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	4838      	ldr	r0, [pc, #224]	; (8001bdc <HAL_TIM_MspPostInit+0x228>)
 8001afa:	f000 fcf9 	bl	80024f0 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a33      	ldr	r2, [pc, #204]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
}
 8001b1a:	e055      	b.n	8001bc8 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM5)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a30      	ldr	r2, [pc, #192]	; (8001be4 <HAL_TIM_MspPostInit+0x230>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d11e      	bne.n	8001b64 <HAL_TIM_MspPostInit+0x1b0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b42:	2303      	movs	r3, #3
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b52:	2302      	movs	r3, #2
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	481e      	ldr	r0, [pc, #120]	; (8001bd8 <HAL_TIM_MspPostInit+0x224>)
 8001b5e:	f000 fcc7 	bl	80024f0 <HAL_GPIO_Init>
}
 8001b62:	e031      	b.n	8001bc8 <HAL_TIM_MspPostInit+0x214>
    else if(htim->Instance==TIM8)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <HAL_TIM_MspPostInit+0x234>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12c      	bne.n	8001bc8 <HAL_TIM_MspPostInit+0x214>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b8a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4811      	ldr	r0, [pc, #68]	; (8001bec <HAL_TIM_MspPostInit+0x238>)
 8001ba8:	f000 fca2 	bl	80024f0 <HAL_GPIO_Init>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_TIM_MspPostInit+0x220>)
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
}
 8001bc8:	bf00      	nop
 8001bca:	3740      	adds	r7, #64	; 0x40
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40000c00 	.word	0x40000c00
 8001be8:	40010400 	.word	0x40010400
 8001bec:	40020800 	.word	0x40020800

08001bf0 <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b090      	sub	sp, #64	; 0x40
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a75      	ldr	r2, [pc, #468]	; (8001de4 <HAL_UART_MspInit+0x1f4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d134      	bne.n	8001c7c <HAL_UART_MspInit+0x8c>
  {
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c16:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a73      	ldr	r2, [pc, #460]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	4b6d      	ldr	r3, [pc, #436]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a6c      	ldr	r2, [pc, #432]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c4a:	23c0      	movs	r3, #192	; 0xc0
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c62:	4619      	mov	r1, r3
 8001c64:	4861      	ldr	r0, [pc, #388]	; (8001dec <HAL_UART_MspInit+0x1fc>)
 8001c66:	f000 fc43 	bl	80024f0 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(USART1_IRQn, 5, 15);
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	2025      	movs	r0, #37	; 0x25
 8001c70:	f000 fb75 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c74:	2025      	movs	r0, #37	; 0x25
 8001c76:	f000 fb8e 	bl	8002396 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_SetPriority(UART5_IRQn, 0, 3);
      HAL_NVIC_EnableIRQ(UART5_IRQn);

    }

}
 8001c7a:	e0ae      	b.n	8001dda <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a5b      	ldr	r2, [pc, #364]	; (8001df0 <HAL_UART_MspInit+0x200>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d134      	bne.n	8001cf0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	4b57      	ldr	r3, [pc, #348]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a56      	ldr	r2, [pc, #344]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a4f      	ldr	r2, [pc, #316]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4846      	ldr	r0, [pc, #280]	; (8001df4 <HAL_UART_MspInit+0x204>)
 8001cda:	f000 fc09 	bl	80024f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2026      	movs	r0, #38	; 0x26
 8001ce4:	f000 fb3b 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ce8:	2026      	movs	r0, #38	; 0x26
 8001cea:	f000 fb54 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001cee:	e074      	b.n	8001dda <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a40      	ldr	r2, [pc, #256]	; (8001df8 <HAL_UART_MspInit+0x208>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d135      	bne.n	8001d66 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a39      	ldr	r2, [pc, #228]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d44:	2307      	movs	r3, #7
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4827      	ldr	r0, [pc, #156]	; (8001dec <HAL_UART_MspInit+0x1fc>)
 8001d50:	f000 fbce 	bl	80024f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	2027      	movs	r0, #39	; 0x27
 8001d5a:	f000 fb00 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d5e:	2027      	movs	r0, #39	; 0x27
 8001d60:	f000 fb19 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001d64:	e039      	b.n	8001dda <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==UART5)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <HAL_UART_MspInit+0x20c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d134      	bne.n	8001dda <HAL_UART_MspInit+0x1ea>
      __HAL_RCC_UART5_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_UART_MspInit+0x1f8>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001da8:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
      GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480e      	ldr	r0, [pc, #56]	; (8001e00 <HAL_UART_MspInit+0x210>)
 8001dc6:	f000 fb93 	bl	80024f0 <HAL_GPIO_Init>
      HAL_NVIC_SetPriority(UART5_IRQn, 0, 3);
 8001dca:	2203      	movs	r2, #3
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2035      	movs	r0, #53	; 0x35
 8001dd0:	f000 fac5 	bl	800235e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001dd4:	2035      	movs	r0, #53	; 0x35
 8001dd6:	f000 fade 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3740      	adds	r7, #64	; 0x40
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40004400 	.word	0x40004400
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40004800 	.word	0x40004800
 8001dfc:	40005000 	.word	0x40005000
 8001e00:	40020c00 	.word	0x40020c00

08001e04 <NMI_Handler>:
extern UART_HandleTypeDef huart3;

extern TIM_HandleTypeDef  htim3;
extern TIM_HandleTypeDef  htim4;
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  while (1)
 8001e08:	e7fe      	b.n	8001e08 <NMI_Handler+0x4>
	...

08001e0c <TIM4_IRQHandler>:
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

void TIM4_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM4_IRQHandler+0x10>)
 8001e12:	f001 fb3b 	bl	800348c <HAL_TIM_IRQHandler>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000268 	.word	0x20000268

08001e20 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM3_IRQHandler+0x10>)
 8001e26:	f001 fb31 	bl	800348c <HAL_TIM_IRQHandler>
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000394 	.word	0x20000394

08001e34 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <HardFault_Handler+0x4>

08001e3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <MemManage_Handler+0x4>

08001e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <BusFault_Handler+0x4>

08001e46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <UsageFault_Handler+0x4>

08001e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7a:	f000 f975 	bl	8002168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <UART5_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <UART5_IRQHandler+0x10>)
 8001e8a:	f002 fa7b 	bl	8004384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200003dc 	.word	0x200003dc

08001e98 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <USART2_IRQHandler+0x10>)
 8001e9e:	f002 fa71 	bl	8004384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200004f8 	.word	0x200004f8

08001eac <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <USART3_IRQHandler+0x10>)
 8001eb2:	f002 fa67 	bl	8004384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200002b4 	.word	0x200002b4

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eda:	f003 fb2b 	bl	8005534 <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f02:	e7fe      	b.n	8001f02 <_exit+0x12>

08001f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e00a      	b.n	8001f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f16:	f3af 8000 	nop.w
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	b2ca      	uxtb	r2, r1
 8001f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbf0      	blt.n	8001f16 <_read+0x12>
  }

  return len;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e009      	b.n	8001f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbf1      	blt.n	8001f50 <_write+0x12>
  }
  return len;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_close>:

int _close(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_isatty>:

int _isatty(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f003 fa90 	bl	8005534 <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20020000 	.word	0x20020000
 8002040:	00000400 	.word	0x00000400
 8002044:	20000094 	.word	0x20000094
 8002048:	20000660 	.word	0x20000660

0800204c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <SystemInit+0x20>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <SystemInit+0x20>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002076:	490e      	ldr	r1, [pc, #56]	; (80020b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800208c:	4c0b      	ldr	r4, [pc, #44]	; (80020bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800209a:	f7ff ffd7 	bl	800204c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f003 fa4f 	bl	8005540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7fe fcc9 	bl	8000a38 <main>
  bx  lr    
 80020a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80020b4:	08006dcc 	.word	0x08006dcc
  ldr r2, =_sbss
 80020b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80020bc:	2000065c 	.word	0x2000065c

080020c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <HAL_Init+0x40>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_Init+0x40>)
 80020da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_Init+0x40>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 f92b 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f2:	200f      	movs	r0, #15
 80020f4:	f000 f808 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f8:	f7ff fb22 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00

08002108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x54>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x58>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f943 	bl	80023b2 <HAL_SYSTICK_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00e      	b.n	8002154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d80a      	bhi.n	8002152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f000 f90b 	bl	800235e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <HAL_InitTick+0x5c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000004 	.word	0x20000004
 8002160:	2000000c 	.word	0x2000000c
 8002164:	20000008 	.word	0x20000008

08002168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x20>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x24>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_IncTick+0x24>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000000c 	.word	0x2000000c
 800218c:	20000658 	.word	0x20000658

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000658 	.word	0x20000658

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <__NVIC_EnableIRQ+0x38>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff8e 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff29 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff3e 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff8e 	bl	800229c <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5d 	bl	8002248 <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff31 	bl	800220c <__NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa2 	bl	8002304 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff feda 	bl	8002190 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d008      	beq.n	80023fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e052      	b.n	80024a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0216 	bic.w	r2, r2, #22
 800240a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800241a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <HAL_DMA_Abort+0x62>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0208 	bic.w	r2, r2, #8
 800243a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244c:	e013      	b.n	8002476 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800244e:	f7ff fe9f 	bl	8002190 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b05      	cmp	r3, #5
 800245a:	d90c      	bls.n	8002476 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e015      	b.n	80024a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e4      	bne.n	800244e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	223f      	movs	r2, #63	; 0x3f
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e00c      	b.n	80024e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2205      	movs	r2, #5
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e16b      	b.n	80027e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 815a 	bne.w	80027de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80b4 	beq.w	80027de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b60      	ldr	r3, [pc, #384]	; (80027fc <HAL_GPIO_Init+0x30c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a5f      	ldr	r2, [pc, #380]	; (80027fc <HAL_GPIO_Init+0x30c>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_GPIO_Init+0x30c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	4a5b      	ldr	r2, [pc, #364]	; (8002800 <HAL_GPIO_Init+0x310>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x314>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d02b      	beq.n	8002716 <HAL_GPIO_Init+0x226>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a51      	ldr	r2, [pc, #324]	; (8002808 <HAL_GPIO_Init+0x318>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d025      	beq.n	8002712 <HAL_GPIO_Init+0x222>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a50      	ldr	r2, [pc, #320]	; (800280c <HAL_GPIO_Init+0x31c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d01f      	beq.n	800270e <HAL_GPIO_Init+0x21e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4f      	ldr	r2, [pc, #316]	; (8002810 <HAL_GPIO_Init+0x320>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x21a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <HAL_GPIO_Init+0x324>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x216>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4d      	ldr	r2, [pc, #308]	; (8002818 <HAL_GPIO_Init+0x328>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x212>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4c      	ldr	r2, [pc, #304]	; (800281c <HAL_GPIO_Init+0x32c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x20e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <HAL_GPIO_Init+0x330>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x20a>
 80026f6:	2307      	movs	r3, #7
 80026f8:	e00e      	b.n	8002718 <HAL_GPIO_Init+0x228>
 80026fa:	2308      	movs	r3, #8
 80026fc:	e00c      	b.n	8002718 <HAL_GPIO_Init+0x228>
 80026fe:	2306      	movs	r3, #6
 8002700:	e00a      	b.n	8002718 <HAL_GPIO_Init+0x228>
 8002702:	2305      	movs	r3, #5
 8002704:	e008      	b.n	8002718 <HAL_GPIO_Init+0x228>
 8002706:	2304      	movs	r3, #4
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x228>
 800270a:	2303      	movs	r3, #3
 800270c:	e004      	b.n	8002718 <HAL_GPIO_Init+0x228>
 800270e:	2302      	movs	r3, #2
 8002710:	e002      	b.n	8002718 <HAL_GPIO_Init+0x228>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_GPIO_Init+0x228>
 8002716:	2300      	movs	r3, #0
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f002 0203 	and.w	r2, r2, #3
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	4093      	lsls	r3, r2
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002728:	4935      	ldr	r1, [pc, #212]	; (8002800 <HAL_GPIO_Init+0x310>)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_GPIO_Init+0x334>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275a:	4a32      	ldr	r2, [pc, #200]	; (8002824 <HAL_GPIO_Init+0x334>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_GPIO_Init+0x334>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002784:	4a27      	ldr	r2, [pc, #156]	; (8002824 <HAL_GPIO_Init+0x334>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_GPIO_Init+0x334>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_GPIO_Init+0x334>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_GPIO_Init+0x334>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <HAL_GPIO_Init+0x334>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	2b0f      	cmp	r3, #15
 80027e8:	f67f ae90 	bls.w	800250c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40013800 	.word	0x40013800
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800
 8002810:	40020c00 	.word	0x40020c00
 8002814:	40021000 	.word	0x40021000
 8002818:	40021400 	.word	0x40021400
 800281c:	40021800 	.word	0x40021800
 8002820:	40021c00 	.word	0x40021c00
 8002824:	40013c00 	.word	0x40013c00

08002828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
 8002834:	4613      	mov	r3, r2
 8002836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002838:	787b      	ldrb	r3, [r7, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002844:	e003      	b.n	800284e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	619a      	str	r2, [r3, #24]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e267      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d075      	beq.n	8002966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d00c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d112      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05b      	beq.n	8002964 <HAL_RCC_OscConfig+0x108>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d157      	bne.n	8002964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e242      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x74>
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x98>
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6f      	ldr	r2, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6c      	ldr	r2, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028f4:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a65      	ldr	r2, [pc, #404]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff fc3c 	bl	8002190 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291c:	f7ff fc38 	bl	8002190 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e207      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xc0>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff fc28 	bl	8002190 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002944:	f7ff fc24 	bl	8002190 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1f3      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0xe8>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1c7      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x244>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7ff fbdd 	bl	8002190 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029da:	f7ff fbd9 	bl	8002190 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1a8      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4925      	ldr	r1, [pc, #148]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x244>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff fbbc 	bl	8002190 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7ff fbb8 	bl	8002190 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e187      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7ff fb9c 	bl	8002190 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7ff fb98 	bl	8002190 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e167      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x200>
 8002a7a:	e01b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff fb85 	bl	8002190 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	e00e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8a:	f7ff fb81 	bl	8002190 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d907      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e150      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470000 	.word	0x42470000
 8002aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ea      	bne.n	8002a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8097 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b7d      	ldr	r3, [pc, #500]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a7c      	ldr	r2, [pc, #496]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b7a      	ldr	r3, [pc, #488]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b77      	ldr	r3, [pc, #476]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a73      	ldr	r2, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff fb41 	bl	8002190 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7ff fb3d 	bl	8002190 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e10c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2ea>
 8002b38:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e01c      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x30c>
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a5e      	ldr	r2, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b68:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a54      	ldr	r2, [pc, #336]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7ff fb02 	bl	8002190 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7ff fafe 	bl	8002190 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0cb      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCC_OscConfig+0x334>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7ff faec 	bl	8002190 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7ff fae8 	bl	8002190 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0b5      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a38      	ldr	r2, [pc, #224]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a1 	beq.w	8002d3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bfa:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d05c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d141      	bne.n	8002c92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fabc 	bl	8002190 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff fab8 	bl	8002190 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e087      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	491b      	ldr	r1, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fa91 	bl	8002190 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff fa8d 	bl	8002190 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e05c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x416>
 8002c90:	e054      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fa7a 	bl	8002190 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff fa76 	bl	8002190 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e045      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x444>
 8002cbe:	e03d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e038      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x4ec>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d121      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11a      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0cc      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d90c      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	494d      	ldr	r1, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d044      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e067      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4934      	ldr	r1, [pc, #208]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7ff f9a8 	bl	8002190 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7ff f9a4 	bl	8002190 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 020c 	and.w	r2, r3, #12
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1eb      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d20c      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e032      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4916      	ldr	r1, [pc, #88]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ed2:	f000 f821 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	490a      	ldr	r1, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	5ccb      	ldrb	r3, [r1, r3]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff f908 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08006ba8 	.word	0x08006ba8
 8002f10:	20000004 	.word	0x20000004
 8002f14:	20000008 	.word	0x20000008

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b090      	sub	sp, #64	; 0x40
 8002f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
 8002f24:	2300      	movs	r3, #0
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f28:	2300      	movs	r3, #0
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d00d      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x40>
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	f200 80a1 	bhi.w	8003084 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x34>
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f4a:	e09b      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f50:	e09b      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f52:	4b53      	ldr	r3, [pc, #332]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f56:	e098      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f62:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d028      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	627a      	str	r2, [r7, #36]	; 0x24
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f80:	2100      	movs	r1, #0
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f84:	fb03 f201 	mul.w	r2, r3, r1
 8002f88:	2300      	movs	r3, #0
 8002f8a:	fb00 f303 	mul.w	r3, r0, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f92:	fba0 1202 	umull	r1, r2, r0, r2
 8002f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f98:	460a      	mov	r2, r1
 8002f9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9e:	4413      	add	r3, r2
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	61fa      	str	r2, [r7, #28]
 8002faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fb2:	f7fd f965 	bl	8000280 <__aeabi_uldivmod>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4613      	mov	r3, r2
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fbe:	e053      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	617a      	str	r2, [r7, #20]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fd2:	f04f 0b00 	mov.w	fp, #0
 8002fd6:	4652      	mov	r2, sl
 8002fd8:	465b      	mov	r3, fp
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	ebb2 080a 	subs.w	r8, r2, sl
 8002ff2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003002:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003006:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800300a:	ebb2 0408 	subs.w	r4, r2, r8
 800300e:	eb63 0509 	sbc.w	r5, r3, r9
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	00eb      	lsls	r3, r5, #3
 800301c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003020:	00e2      	lsls	r2, r4, #3
 8003022:	4614      	mov	r4, r2
 8003024:	461d      	mov	r5, r3
 8003026:	eb14 030a 	adds.w	r3, r4, sl
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	eb45 030b 	adc.w	r3, r5, fp
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800303e:	4629      	mov	r1, r5
 8003040:	028b      	lsls	r3, r1, #10
 8003042:	4621      	mov	r1, r4
 8003044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003048:	4621      	mov	r1, r4
 800304a:	028a      	lsls	r2, r1, #10
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	2200      	movs	r2, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	60fa      	str	r2, [r7, #12]
 8003058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800305c:	f7fd f910 	bl	8000280 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	3301      	adds	r3, #1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetSysClockFreq+0x184>)
 8003086:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800308c:	4618      	mov	r0, r3
 800308e:	3740      	adds	r7, #64	; 0x40
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	017d7840 	.word	0x017d7840

080030a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030c0:	f7ff fff0 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0a9b      	lsrs	r3, r3, #10
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08006bb8 	.word	0x08006bb8

080030e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e8:	f7ff ffdc 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0b5b      	lsrs	r3, r3, #13
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	08006bb8 	.word	0x08006bb8

0800310c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e041      	b.n	80031a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe fb2c 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f000 fcaa 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e041      	b.n	8003240 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f839 	bl	8003248 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f000 fc5b 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e041      	b.n	80032f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe fae6 	bl	8001854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f000 fc02 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_TIM_PWM_Start+0x24>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e022      	b.n	8003366 <HAL_TIM_PWM_Start+0x6a>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b04      	cmp	r3, #4
 8003324:	d109      	bne.n	800333a <HAL_TIM_PWM_Start+0x3e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	bf14      	ite	ne
 8003332:	2301      	movne	r3, #1
 8003334:	2300      	moveq	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e015      	b.n	8003366 <HAL_TIM_PWM_Start+0x6a>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d109      	bne.n	8003354 <HAL_TIM_PWM_Start+0x58>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e008      	b.n	8003366 <HAL_TIM_PWM_Start+0x6a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07c      	b.n	8003468 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0x82>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800337c:	e013      	b.n	80033a6 <HAL_TIM_PWM_Start+0xaa>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0x92>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338c:	e00b      	b.n	80033a6 <HAL_TIM_PWM_Start+0xaa>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d104      	bne.n	800339e <HAL_TIM_PWM_Start+0xa2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800339c:	e003      	b.n	80033a6 <HAL_TIM_PWM_Start+0xaa>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	6839      	ldr	r1, [r7, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fe62 	bl	8004078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2d      	ldr	r2, [pc, #180]	; (8003470 <HAL_TIM_PWM_Start+0x174>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_PWM_Start+0xcc>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <HAL_TIM_PWM_Start+0x178>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_PWM_Start+0xd0>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_TIM_PWM_Start+0xd2>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a22      	ldr	r2, [pc, #136]	; (8003470 <HAL_TIM_PWM_Start+0x174>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_TIM_PWM_Start+0x136>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d01d      	beq.n	8003432 <HAL_TIM_PWM_Start+0x136>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <HAL_TIM_PWM_Start+0x17c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_TIM_PWM_Start+0x136>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_TIM_PWM_Start+0x180>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_TIM_PWM_Start+0x136>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_TIM_PWM_Start+0x184>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_TIM_PWM_Start+0x136>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a16      	ldr	r2, [pc, #88]	; (8003474 <HAL_TIM_PWM_Start+0x178>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_TIM_PWM_Start+0x136>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_TIM_PWM_Start+0x188>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_TIM_PWM_Start+0x136>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a16      	ldr	r2, [pc, #88]	; (8003488 <HAL_TIM_PWM_Start+0x18c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d111      	bne.n	8003456 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b06      	cmp	r3, #6
 8003442:	d010      	beq.n	8003466 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	e007      	b.n	8003466 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40010000 	.word	0x40010000
 8003474:	40010400 	.word	0x40010400
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40014000 	.word	0x40014000
 8003488:	40001800 	.word	0x40001800

0800348c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0202 	mvn.w	r2, #2
 80034b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fb3c 	bl	8000b4c <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fac5 	bl	8003a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 facc 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0204 	mvn.w	r2, #4
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fb12 	bl	8000b4c <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa9b 	bl	8003a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 faa2 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b08      	cmp	r3, #8
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0208 	mvn.w	r2, #8
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2204      	movs	r2, #4
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fae8 	bl	8000b4c <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa71 	bl	8003a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa78 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0210 	mvn.w	r2, #16
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2208      	movs	r2, #8
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fabe 	bl	8000b4c <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa47 	bl	8003a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fa4e 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0201 	mvn.w	r2, #1
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd f9fc 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fe1c 	bl	8004274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa13 	bl	8003a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b20      	cmp	r3, #32
 8003674:	d10e      	bne.n	8003694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b20      	cmp	r3, #32
 8003682:	d107      	bne.n	8003694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0220 	mvn.w	r2, #32
 800368c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fde6 	bl	8004260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e048      	b.n	800374c <HAL_TIM_OC_ConfigChannel+0xb0>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d839      	bhi.n	800373c <HAL_TIM_OC_ConfigChannel+0xa0>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	08003705 	.word	0x08003705
 80036d4:	0800373d 	.word	0x0800373d
 80036d8:	0800373d 	.word	0x0800373d
 80036dc:	0800373d 	.word	0x0800373d
 80036e0:	08003713 	.word	0x08003713
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	0800373d 	.word	0x0800373d
 80036ec:	0800373d 	.word	0x0800373d
 80036f0:	08003721 	.word	0x08003721
 80036f4:	0800373d 	.word	0x0800373d
 80036f8:	0800373d 	.word	0x0800373d
 80036fc:	0800373d 	.word	0x0800373d
 8003700:	0800372f 	.word	0x0800372f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fa6a 	bl	8003be4 <TIM_OC1_SetConfig>
      break;
 8003710:	e017      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fad3 	bl	8003cc4 <TIM_OC2_SetConfig>
      break;
 800371e:	e010      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fb42 	bl	8003db0 <TIM_OC3_SetConfig>
      break;
 800372c:	e009      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fbaf 	bl	8003e98 <TIM_OC4_SetConfig>
      break;
 800373a:	e002      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
      break;
 8003740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800376e:	2302      	movs	r3, #2
 8003770:	e0ae      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b0c      	cmp	r3, #12
 800377e:	f200 809f 	bhi.w	80038c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037bd 	.word	0x080037bd
 800378c:	080038c1 	.word	0x080038c1
 8003790:	080038c1 	.word	0x080038c1
 8003794:	080038c1 	.word	0x080038c1
 8003798:	080037fd 	.word	0x080037fd
 800379c:	080038c1 	.word	0x080038c1
 80037a0:	080038c1 	.word	0x080038c1
 80037a4:	080038c1 	.word	0x080038c1
 80037a8:	0800383f 	.word	0x0800383f
 80037ac:	080038c1 	.word	0x080038c1
 80037b0:	080038c1 	.word	0x080038c1
 80037b4:	080038c1 	.word	0x080038c1
 80037b8:	0800387f 	.word	0x0800387f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fa0e 	bl	8003be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6999      	ldr	r1, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	619a      	str	r2, [r3, #24]
      break;
 80037fa:	e064      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fa5e 	bl	8003cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6999      	ldr	r1, [r3, #24]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	021a      	lsls	r2, r3, #8
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	619a      	str	r2, [r3, #24]
      break;
 800383c:	e043      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fab3 	bl	8003db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0208 	orr.w	r2, r2, #8
 8003858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0204 	bic.w	r2, r2, #4
 8003868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	61da      	str	r2, [r3, #28]
      break;
 800387c:	e023      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fb07 	bl	8003e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69d9      	ldr	r1, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	61da      	str	r2, [r3, #28]
      break;
 80038be:	e002      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	75fb      	strb	r3, [r7, #23]
      break;
 80038c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e0b4      	b.n	8003a5e <HAL_TIM_ConfigClockSource+0x186>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800391a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392c:	d03e      	beq.n	80039ac <HAL_TIM_ConfigClockSource+0xd4>
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003932:	f200 8087 	bhi.w	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393a:	f000 8086 	beq.w	8003a4a <HAL_TIM_ConfigClockSource+0x172>
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003942:	d87f      	bhi.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b70      	cmp	r3, #112	; 0x70
 8003946:	d01a      	beq.n	800397e <HAL_TIM_ConfigClockSource+0xa6>
 8003948:	2b70      	cmp	r3, #112	; 0x70
 800394a:	d87b      	bhi.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b60      	cmp	r3, #96	; 0x60
 800394e:	d050      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003950:	2b60      	cmp	r3, #96	; 0x60
 8003952:	d877      	bhi.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b50      	cmp	r3, #80	; 0x50
 8003956:	d03c      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003958:	2b50      	cmp	r3, #80	; 0x50
 800395a:	d873      	bhi.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d058      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x13a>
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d86f      	bhi.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b30      	cmp	r3, #48	; 0x30
 8003966:	d064      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x15a>
 8003968:	2b30      	cmp	r3, #48	; 0x30
 800396a:	d86b      	bhi.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b20      	cmp	r3, #32
 800396e:	d060      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x15a>
 8003970:	2b20      	cmp	r3, #32
 8003972:	d867      	bhi.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d05c      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	2b10      	cmp	r3, #16
 800397a:	d05a      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x15a>
 800397c:	e062      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f000 fb53 	bl	8004038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	609a      	str	r2, [r3, #8]
      break;
 80039aa:	e04f      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	6899      	ldr	r1, [r3, #8]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f000 fb3c 	bl	8004038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ce:	609a      	str	r2, [r3, #8]
      break;
 80039d0:	e03c      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	f000 fab0 	bl	8003f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2150      	movs	r1, #80	; 0x50
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fb09 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 80039f0:	e02c      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 facf 	bl	8003fa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2160      	movs	r1, #96	; 0x60
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 faf9 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 8003a10:	e01c      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 fa90 	bl	8003f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2140      	movs	r1, #64	; 0x40
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fae9 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 8003a30:	e00c      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f000 fae0 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 8003a42:	e003      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	e000      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a40      	ldr	r2, [pc, #256]	; (8003bb8 <TIM_Base_SetConfig+0x114>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d00f      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3d      	ldr	r2, [pc, #244]	; (8003bbc <TIM_Base_SetConfig+0x118>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a3c      	ldr	r2, [pc, #240]	; (8003bc0 <TIM_Base_SetConfig+0x11c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d007      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a3b      	ldr	r2, [pc, #236]	; (8003bc4 <TIM_Base_SetConfig+0x120>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a3a      	ldr	r2, [pc, #232]	; (8003bc8 <TIM_Base_SetConfig+0x124>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d108      	bne.n	8003af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2f      	ldr	r2, [pc, #188]	; (8003bb8 <TIM_Base_SetConfig+0x114>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02b      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d027      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <TIM_Base_SetConfig+0x118>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d023      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <TIM_Base_SetConfig+0x11c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01f      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <TIM_Base_SetConfig+0x120>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01b      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <TIM_Base_SetConfig+0x124>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d017      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <TIM_Base_SetConfig+0x128>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <TIM_Base_SetConfig+0x12c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00f      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <TIM_Base_SetConfig+0x130>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <TIM_Base_SetConfig+0x134>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a24      	ldr	r2, [pc, #144]	; (8003bdc <TIM_Base_SetConfig+0x138>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a23      	ldr	r2, [pc, #140]	; (8003be0 <TIM_Base_SetConfig+0x13c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d108      	bne.n	8003b68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <TIM_Base_SetConfig+0x114>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0xf8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <TIM_Base_SetConfig+0x124>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40010400 	.word	0x40010400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800
 8003bd8:	40001800 	.word	0x40001800
 8003bdc:	40001c00 	.word	0x40001c00
 8003be0:	40002000 	.word	0x40002000

08003be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0201 	bic.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <TIM_OC1_SetConfig+0xd8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_OC1_SetConfig+0x64>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <TIM_OC1_SetConfig+0xdc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10c      	bne.n	8003c62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0308 	bic.w	r3, r3, #8
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <TIM_OC1_SetConfig+0xd8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_OC1_SetConfig+0x8e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <TIM_OC1_SetConfig+0xdc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d111      	bne.n	8003c96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0210 	bic.w	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0320 	bic.w	r3, r3, #32
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <TIM_OC2_SetConfig+0xe4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC2_SetConfig+0x68>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a21      	ldr	r2, [pc, #132]	; (8003dac <TIM_OC2_SetConfig+0xe8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <TIM_OC2_SetConfig+0xe4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_OC2_SetConfig+0x94>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a16      	ldr	r2, [pc, #88]	; (8003dac <TIM_OC2_SetConfig+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d113      	bne.n	8003d80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40010400 	.word	0x40010400

08003db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <TIM_OC3_SetConfig+0xe0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC3_SetConfig+0x66>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <TIM_OC3_SetConfig+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <TIM_OC3_SetConfig+0xe0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x92>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <TIM_OC3_SetConfig+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40010400 	.word	0x40010400

08003e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <TIM_OC4_SetConfig+0xa4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC4_SetConfig+0x68>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a11      	ldr	r2, [pc, #68]	; (8003f40 <TIM_OC4_SetConfig+0xa8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d109      	bne.n	8003f14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400

08003f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0201 	bic.w	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 030a 	bic.w	r3, r3, #10
 8003f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	621a      	str	r2, [r3, #32]
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b087      	sub	sp, #28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f023 0210 	bic.w	r2, r3, #16
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	f043 0307 	orr.w	r3, r3, #7
 8004024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	021a      	lsls	r2, r3, #8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	431a      	orrs	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	2201      	movs	r2, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d8:	2302      	movs	r3, #2
 80040da:	e05a      	b.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d01d      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10c      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40010400 	.word	0x40010400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40001800 	.word	0x40001800

080041bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e03d      	b.n	8004254 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e03f      	b.n	800431a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fc9e 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fcdf 	bl	8004c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	4613      	mov	r3, r2
 800432e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b20      	cmp	r3, #32
 800433a:	d11d      	bne.n	8004378 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_UART_Receive_IT+0x26>
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e016      	b.n	800437a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_UART_Receive_IT+0x38>
 8004356:	2302      	movs	r3, #2
 8004358:	e00f      	b.n	800437a <HAL_UART_Receive_IT+0x58>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	461a      	mov	r2, r3
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fab6 	bl	80048e0 <UART_Start_Receive_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	e000      	b.n	800437a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b0ba      	sub	sp, #232	; 0xe8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_UART_IRQHandler+0x66>
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fb99 	bl	8004b1a <UART_Receive_IT>
      return;
 80043e8:	e256      	b.n	8004898 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80de 	beq.w	80045b0 <HAL_UART_IRQHandler+0x22c>
 80043f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004404:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80d1 	beq.w	80045b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_UART_IRQHandler+0xae>
 800441a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f043 0201 	orr.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_UART_IRQHandler+0xd2>
 800443e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f043 0202 	orr.w	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0xf6>
 8004462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0204 	orr.w	r2, r3, #4
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d011      	beq.n	80044aa <HAL_UART_IRQHandler+0x126>
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0208 	orr.w	r2, r3, #8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 81ed 	beq.w	800488e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_UART_IRQHandler+0x14e>
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fb24 	bl	8004b1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <HAL_UART_IRQHandler+0x17a>
 80044f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04f      	beq.n	800459e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa2c 	bl	800495c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d141      	bne.n	8004596 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800453e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800454a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1d9      	bne.n	8004512 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	2b00      	cmp	r3, #0
 8004564:	d013      	beq.n	800458e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	4a7d      	ldr	r2, [pc, #500]	; (8004760 <HAL_UART_IRQHandler+0x3dc>)
 800456c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd ff99 	bl	80024aa <HAL_DMA_Abort_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004588:	4610      	mov	r0, r2
 800458a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	e00e      	b.n	80045ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f990 	bl	80048b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	e00a      	b.n	80045ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f98c 	bl	80048b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	e006      	b.n	80045ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f988 	bl	80048b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045aa:	e170      	b.n	800488e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	bf00      	nop
    return;
 80045ae:	e16e      	b.n	800488e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f040 814a 	bne.w	800484e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8143 	beq.w	800484e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 813c 	beq.w	800484e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	f040 80b4 	bne.w	8004764 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004608:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8140 	beq.w	8004892 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800461a:	429a      	cmp	r2, r3
 800461c:	f080 8139 	bcs.w	8004892 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004626:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	f000 8088 	beq.w	8004746 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800464c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800466e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800467a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1d9      	bne.n	8004636 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e1      	bne.n	8004682 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e3      	bne.n	80046be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004716:	f023 0310 	bic.w	r3, r3, #16
 800471a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004728:	65ba      	str	r2, [r7, #88]	; 0x58
 800472a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800472e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e3      	bne.n	8004704 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	4618      	mov	r0, r3
 8004742:	f7fd fe42 	bl	80023ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800474e:	b29b      	uxth	r3, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	b29b      	uxth	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8b6 	bl	80048c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800475c:	e099      	b.n	8004892 <HAL_UART_IRQHandler+0x50e>
 800475e:	bf00      	nop
 8004760:	08004a23 	.word	0x08004a23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 808b 	beq.w	8004896 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8086 	beq.w	8004896 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047ae:	647a      	str	r2, [r7, #68]	; 0x44
 80047b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e3      	bne.n	800478a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	623b      	str	r3, [r7, #32]
   return(result);
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3314      	adds	r3, #20
 80047e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047e6:	633a      	str	r2, [r7, #48]	; 0x30
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e3      	bne.n	80047c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	60fb      	str	r3, [r7, #12]
   return(result);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800482c:	61fa      	str	r2, [r7, #28]
 800482e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	69b9      	ldr	r1, [r7, #24]
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	617b      	str	r3, [r7, #20]
   return(result);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e3      	bne.n	8004808 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f83e 	bl	80048c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800484c:	e023      	b.n	8004896 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_UART_IRQHandler+0x4ea>
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8ef 	bl	8004a4a <UART_Transmit_IT>
    return;
 800486c:	e014      	b.n	8004898 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <HAL_UART_IRQHandler+0x514>
 800487a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f92f 	bl	8004aea <UART_EndTransmit_IT>
    return;
 800488c:	e004      	b.n	8004898 <HAL_UART_IRQHandler+0x514>
    return;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_UART_IRQHandler+0x514>
      return;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_UART_IRQHandler+0x514>
      return;
 8004896:	bf00      	nop
  }
}
 8004898:	37e8      	adds	r7, #232	; 0xe8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop

080048a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2222      	movs	r2, #34	; 0x22
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0220 	orr.w	r2, r2, #32
 800494c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b095      	sub	sp, #84	; 0x54
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004984:	643a      	str	r2, [r7, #64]	; 0x40
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800498a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3314      	adds	r3, #20
 80049b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e5      	bne.n	8004998 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d119      	bne.n	8004a08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0310 	bic.w	r3, r3, #16
 80049ea:	647b      	str	r3, [r7, #68]	; 0x44
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f4:	61ba      	str	r2, [r7, #24]
 80049f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	613b      	str	r3, [r7, #16]
   return(result);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a16:	bf00      	nop
 8004a18:	3754      	adds	r7, #84	; 0x54
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff ff39 	bl	80048b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b21      	cmp	r3, #33	; 0x21
 8004a5c:	d13e      	bne.n	8004adc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	d114      	bne.n	8004a92 <UART_Transmit_IT+0x48>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	1c9a      	adds	r2, r3, #2
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	621a      	str	r2, [r3, #32]
 8004a90:	e008      	b.n	8004aa4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	1c59      	adds	r1, r3, #1
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6211      	str	r1, [r2, #32]
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10f      	bne.n	8004ad8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fec8 	bl	80048a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b08c      	sub	sp, #48	; 0x30
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b22      	cmp	r3, #34	; 0x22
 8004b2c:	f040 80ab 	bne.w	8004c86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b38:	d117      	bne.n	8004b6a <UART_Receive_IT+0x50>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d113      	bne.n	8004b6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
 8004b68:	e026      	b.n	8004bb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d007      	beq.n	8004b8e <UART_Receive_IT+0x74>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <UART_Receive_IT+0x82>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e008      	b.n	8004bae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d15a      	bne.n	8004c82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0220 	bic.w	r2, r2, #32
 8004bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d135      	bne.n	8004c78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	613b      	str	r3, [r7, #16]
   return(result);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f023 0310 	bic.w	r3, r3, #16
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c32:	623a      	str	r2, [r7, #32]
 8004c34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	69f9      	ldr	r1, [r7, #28]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d10a      	bne.n	8004c6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff fe29 	bl	80048c8 <HAL_UARTEx_RxEventCallback>
 8004c76:	e002      	b.n	8004c7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fb ff0b 	bl	8000a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e002      	b.n	8004c88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e000      	b.n	8004c88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3730      	adds	r7, #48	; 0x30
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b0c0      	sub	sp, #256	; 0x100
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	68d9      	ldr	r1, [r3, #12]
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	ea40 0301 	orr.w	r3, r0, r1
 8004cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ce8:	f021 010c 	bic.w	r1, r1, #12
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	6999      	ldr	r1, [r3, #24]
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	ea40 0301 	orr.w	r3, r0, r1
 8004d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b8f      	ldr	r3, [pc, #572]	; (8004f5c <UART_SetConfig+0x2cc>)
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d005      	beq.n	8004d30 <UART_SetConfig+0xa0>
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b8d      	ldr	r3, [pc, #564]	; (8004f60 <UART_SetConfig+0x2d0>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d104      	bne.n	8004d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d30:	f7fe f9d8 	bl	80030e4 <HAL_RCC_GetPCLK2Freq>
 8004d34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d38:	e003      	b.n	8004d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d3a:	f7fe f9bf 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8004d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4c:	f040 810c 	bne.w	8004f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d62:	4622      	mov	r2, r4
 8004d64:	462b      	mov	r3, r5
 8004d66:	1891      	adds	r1, r2, r2
 8004d68:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d6a:	415b      	adcs	r3, r3
 8004d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d72:	4621      	mov	r1, r4
 8004d74:	eb12 0801 	adds.w	r8, r2, r1
 8004d78:	4629      	mov	r1, r5
 8004d7a:	eb43 0901 	adc.w	r9, r3, r1
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d92:	4690      	mov	r8, r2
 8004d94:	4699      	mov	r9, r3
 8004d96:	4623      	mov	r3, r4
 8004d98:	eb18 0303 	adds.w	r3, r8, r3
 8004d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004da0:	462b      	mov	r3, r5
 8004da2:	eb49 0303 	adc.w	r3, r9, r3
 8004da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004db6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	18db      	adds	r3, r3, r3
 8004dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	eb42 0303 	adc.w	r3, r2, r3
 8004dca:	657b      	str	r3, [r7, #84]	; 0x54
 8004dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dd4:	f7fb fa54 	bl	8000280 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4b61      	ldr	r3, [pc, #388]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004dde:	fba3 2302 	umull	r2, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	011c      	lsls	r4, r3, #4
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004df0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e00:	415b      	adcs	r3, r3
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e08:	4641      	mov	r1, r8
 8004e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e0e:	4649      	mov	r1, r9
 8004e10:	eb43 0b01 	adc.w	fp, r3, r1
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e28:	4692      	mov	sl, r2
 8004e2a:	469b      	mov	fp, r3
 8004e2c:	4643      	mov	r3, r8
 8004e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e36:	464b      	mov	r3, r9
 8004e38:	eb4b 0303 	adc.w	r3, fp, r3
 8004e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e54:	460b      	mov	r3, r1
 8004e56:	18db      	adds	r3, r3, r3
 8004e58:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	eb42 0303 	adc.w	r3, r2, r3
 8004e60:	647b      	str	r3, [r7, #68]	; 0x44
 8004e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e6a:	f7fb fa09 	bl	8000280 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	4b3b      	ldr	r3, [pc, #236]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004e76:	fba3 2301 	umull	r2, r3, r3, r1
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2264      	movs	r2, #100	; 0x64
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	1acb      	subs	r3, r1, r3
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e8a:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e98:	441c      	add	r4, r3
 8004e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	1891      	adds	r1, r2, r2
 8004eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb4:	415b      	adcs	r3, r3
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	1851      	adds	r1, r2, r1
 8004ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	414b      	adcs	r3, r1
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	00cb      	lsls	r3, r1, #3
 8004ed8:	4651      	mov	r1, sl
 8004eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ede:	4651      	mov	r1, sl
 8004ee0:	00ca      	lsls	r2, r1, #3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4642      	mov	r2, r8
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f10:	460b      	mov	r3, r1
 8004f12:	18db      	adds	r3, r3, r3
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f16:	4613      	mov	r3, r2
 8004f18:	eb42 0303 	adc.w	r3, r2, r3
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f26:	f7fb f9ab 	bl	8000280 <__aeabi_uldivmod>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004f30:	fba3 1302 	umull	r1, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	2164      	movs	r1, #100	; 0x64
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	3332      	adds	r3, #50	; 0x32
 8004f42:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	f003 0207 	and.w	r2, r3, #7
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4422      	add	r2, r4
 8004f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f58:	e106      	b.n	8005168 <UART_SetConfig+0x4d8>
 8004f5a:	bf00      	nop
 8004f5c:	40011000 	.word	0x40011000
 8004f60:	40011400 	.word	0x40011400
 8004f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	1891      	adds	r1, r2, r2
 8004f80:	6239      	str	r1, [r7, #32]
 8004f82:	415b      	adcs	r3, r3
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f8a:	4641      	mov	r1, r8
 8004f8c:	1854      	adds	r4, r2, r1
 8004f8e:	4649      	mov	r1, r9
 8004f90:	eb43 0501 	adc.w	r5, r3, r1
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	00eb      	lsls	r3, r5, #3
 8004f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa2:	00e2      	lsls	r2, r4, #3
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	4643      	mov	r3, r8
 8004faa:	18e3      	adds	r3, r4, r3
 8004fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	eb45 0303 	adc.w	r3, r5, r3
 8004fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	008b      	lsls	r3, r1, #2
 8004fda:	4621      	mov	r1, r4
 8004fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	008a      	lsls	r2, r1, #2
 8004fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fe8:	f7fb f94a 	bl	8000280 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4b60      	ldr	r3, [pc, #384]	; (8005174 <UART_SetConfig+0x4e4>)
 8004ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	011c      	lsls	r4, r3, #4
 8004ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005004:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	1891      	adds	r1, r2, r2
 8005012:	61b9      	str	r1, [r7, #24]
 8005014:	415b      	adcs	r3, r3
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501c:	4641      	mov	r1, r8
 800501e:	1851      	adds	r1, r2, r1
 8005020:	6139      	str	r1, [r7, #16]
 8005022:	4649      	mov	r1, r9
 8005024:	414b      	adcs	r3, r1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005034:	4659      	mov	r1, fp
 8005036:	00cb      	lsls	r3, r1, #3
 8005038:	4651      	mov	r1, sl
 800503a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503e:	4651      	mov	r1, sl
 8005040:	00ca      	lsls	r2, r1, #3
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	4603      	mov	r3, r0
 8005048:	4642      	mov	r2, r8
 800504a:	189b      	adds	r3, r3, r2
 800504c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005050:	464b      	mov	r3, r9
 8005052:	460a      	mov	r2, r1
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	67bb      	str	r3, [r7, #120]	; 0x78
 8005066:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005074:	4649      	mov	r1, r9
 8005076:	008b      	lsls	r3, r1, #2
 8005078:	4641      	mov	r1, r8
 800507a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507e:	4641      	mov	r1, r8
 8005080:	008a      	lsls	r2, r1, #2
 8005082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005086:	f7fb f8fb 	bl	8000280 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4611      	mov	r1, r2
 8005090:	4b38      	ldr	r3, [pc, #224]	; (8005174 <UART_SetConfig+0x4e4>)
 8005092:	fba3 2301 	umull	r2, r3, r3, r1
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2264      	movs	r2, #100	; 0x64
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	1acb      	subs	r3, r1, r3
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	3332      	adds	r3, #50	; 0x32
 80050a4:	4a33      	ldr	r2, [pc, #204]	; (8005174 <UART_SetConfig+0x4e4>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b0:	441c      	add	r4, r3
 80050b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b6:	2200      	movs	r2, #0
 80050b8:	673b      	str	r3, [r7, #112]	; 0x70
 80050ba:	677a      	str	r2, [r7, #116]	; 0x74
 80050bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	1891      	adds	r1, r2, r2
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	415b      	adcs	r3, r3
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d0:	4641      	mov	r1, r8
 80050d2:	1851      	adds	r1, r2, r1
 80050d4:	6039      	str	r1, [r7, #0]
 80050d6:	4649      	mov	r1, r9
 80050d8:	414b      	adcs	r3, r1
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050e8:	4659      	mov	r1, fp
 80050ea:	00cb      	lsls	r3, r1, #3
 80050ec:	4651      	mov	r1, sl
 80050ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f2:	4651      	mov	r1, sl
 80050f4:	00ca      	lsls	r2, r1, #3
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	4642      	mov	r2, r8
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	66bb      	str	r3, [r7, #104]	; 0x68
 8005102:	464b      	mov	r3, r9
 8005104:	460a      	mov	r2, r1
 8005106:	eb42 0303 	adc.w	r3, r2, r3
 800510a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	663b      	str	r3, [r7, #96]	; 0x60
 8005116:	667a      	str	r2, [r7, #100]	; 0x64
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005124:	4649      	mov	r1, r9
 8005126:	008b      	lsls	r3, r1, #2
 8005128:	4641      	mov	r1, r8
 800512a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800512e:	4641      	mov	r1, r8
 8005130:	008a      	lsls	r2, r1, #2
 8005132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005136:	f7fb f8a3 	bl	8000280 <__aeabi_uldivmod>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <UART_SetConfig+0x4e4>)
 8005140:	fba3 1302 	umull	r1, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	2164      	movs	r1, #100	; 0x64
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	3332      	adds	r3, #50	; 0x32
 8005152:	4a08      	ldr	r2, [pc, #32]	; (8005174 <UART_SetConfig+0x4e4>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4422      	add	r2, r4
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005174:	51eb851f 	.word	0x51eb851f

08005178 <std>:
 8005178:	2300      	movs	r3, #0
 800517a:	b510      	push	{r4, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	e9c0 3300 	strd	r3, r3, [r0]
 8005182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005186:	6083      	str	r3, [r0, #8]
 8005188:	8181      	strh	r1, [r0, #12]
 800518a:	6643      	str	r3, [r0, #100]	; 0x64
 800518c:	81c2      	strh	r2, [r0, #14]
 800518e:	6183      	str	r3, [r0, #24]
 8005190:	4619      	mov	r1, r3
 8005192:	2208      	movs	r2, #8
 8005194:	305c      	adds	r0, #92	; 0x5c
 8005196:	f000 f922 	bl	80053de <memset>
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <std+0x58>)
 800519c:	6263      	str	r3, [r4, #36]	; 0x24
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <std+0x5c>)
 80051a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <std+0x60>)
 80051a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <std+0x64>)
 80051a8:	6323      	str	r3, [r4, #48]	; 0x30
 80051aa:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <std+0x68>)
 80051ac:	6224      	str	r4, [r4, #32]
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d006      	beq.n	80051c0 <std+0x48>
 80051b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051b6:	4294      	cmp	r4, r2
 80051b8:	d002      	beq.n	80051c0 <std+0x48>
 80051ba:	33d0      	adds	r3, #208	; 0xd0
 80051bc:	429c      	cmp	r4, r3
 80051be:	d105      	bne.n	80051cc <std+0x54>
 80051c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	f000 b9de 	b.w	8005588 <__retarget_lock_init_recursive>
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	08005355 	.word	0x08005355
 80051d4:	0800537b 	.word	0x0800537b
 80051d8:	080053b3 	.word	0x080053b3
 80051dc:	080053d7 	.word	0x080053d7
 80051e0:	20000098 	.word	0x20000098

080051e4 <stdio_exit_handler>:
 80051e4:	4a02      	ldr	r2, [pc, #8]	; (80051f0 <stdio_exit_handler+0xc>)
 80051e6:	4903      	ldr	r1, [pc, #12]	; (80051f4 <stdio_exit_handler+0x10>)
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <stdio_exit_handler+0x14>)
 80051ea:	f000 b869 	b.w	80052c0 <_fwalk_sglue>
 80051ee:	bf00      	nop
 80051f0:	20000010 	.word	0x20000010
 80051f4:	08005f19 	.word	0x08005f19
 80051f8:	2000001c 	.word	0x2000001c

080051fc <cleanup_stdio>:
 80051fc:	6841      	ldr	r1, [r0, #4]
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <cleanup_stdio+0x34>)
 8005200:	4299      	cmp	r1, r3
 8005202:	b510      	push	{r4, lr}
 8005204:	4604      	mov	r4, r0
 8005206:	d001      	beq.n	800520c <cleanup_stdio+0x10>
 8005208:	f000 fe86 	bl	8005f18 <_fflush_r>
 800520c:	68a1      	ldr	r1, [r4, #8]
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <cleanup_stdio+0x38>)
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <cleanup_stdio+0x1e>
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fe7f 	bl	8005f18 <_fflush_r>
 800521a:	68e1      	ldr	r1, [r4, #12]
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <cleanup_stdio+0x3c>)
 800521e:	4299      	cmp	r1, r3
 8005220:	d004      	beq.n	800522c <cleanup_stdio+0x30>
 8005222:	4620      	mov	r0, r4
 8005224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005228:	f000 be76 	b.w	8005f18 <_fflush_r>
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop
 8005230:	20000098 	.word	0x20000098
 8005234:	20000100 	.word	0x20000100
 8005238:	20000168 	.word	0x20000168

0800523c <global_stdio_init.part.0>:
 800523c:	b510      	push	{r4, lr}
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <global_stdio_init.part.0+0x30>)
 8005240:	4c0b      	ldr	r4, [pc, #44]	; (8005270 <global_stdio_init.part.0+0x34>)
 8005242:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <global_stdio_init.part.0+0x38>)
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4620      	mov	r0, r4
 8005248:	2200      	movs	r2, #0
 800524a:	2104      	movs	r1, #4
 800524c:	f7ff ff94 	bl	8005178 <std>
 8005250:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005254:	2201      	movs	r2, #1
 8005256:	2109      	movs	r1, #9
 8005258:	f7ff ff8e 	bl	8005178 <std>
 800525c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005260:	2202      	movs	r2, #2
 8005262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005266:	2112      	movs	r1, #18
 8005268:	f7ff bf86 	b.w	8005178 <std>
 800526c:	200001d0 	.word	0x200001d0
 8005270:	20000098 	.word	0x20000098
 8005274:	080051e5 	.word	0x080051e5

08005278 <__sfp_lock_acquire>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sfp_lock_acquire+0x8>)
 800527a:	f000 b986 	b.w	800558a <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	200001d9 	.word	0x200001d9

08005284 <__sfp_lock_release>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__sfp_lock_release+0x8>)
 8005286:	f000 b981 	b.w	800558c <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	200001d9 	.word	0x200001d9

08005290 <__sinit>:
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
 8005294:	f7ff fff0 	bl	8005278 <__sfp_lock_acquire>
 8005298:	6a23      	ldr	r3, [r4, #32]
 800529a:	b11b      	cbz	r3, 80052a4 <__sinit+0x14>
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f7ff bff0 	b.w	8005284 <__sfp_lock_release>
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <__sinit+0x28>)
 80052a6:	6223      	str	r3, [r4, #32]
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <__sinit+0x2c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f5      	bne.n	800529c <__sinit+0xc>
 80052b0:	f7ff ffc4 	bl	800523c <global_stdio_init.part.0>
 80052b4:	e7f2      	b.n	800529c <__sinit+0xc>
 80052b6:	bf00      	nop
 80052b8:	080051fd 	.word	0x080051fd
 80052bc:	200001d0 	.word	0x200001d0

080052c0 <_fwalk_sglue>:
 80052c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c4:	4607      	mov	r7, r0
 80052c6:	4688      	mov	r8, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	2600      	movs	r6, #0
 80052cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052d0:	f1b9 0901 	subs.w	r9, r9, #1
 80052d4:	d505      	bpl.n	80052e2 <_fwalk_sglue+0x22>
 80052d6:	6824      	ldr	r4, [r4, #0]
 80052d8:	2c00      	cmp	r4, #0
 80052da:	d1f7      	bne.n	80052cc <_fwalk_sglue+0xc>
 80052dc:	4630      	mov	r0, r6
 80052de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e2:	89ab      	ldrh	r3, [r5, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d907      	bls.n	80052f8 <_fwalk_sglue+0x38>
 80052e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ec:	3301      	adds	r3, #1
 80052ee:	d003      	beq.n	80052f8 <_fwalk_sglue+0x38>
 80052f0:	4629      	mov	r1, r5
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	4306      	orrs	r6, r0
 80052f8:	3568      	adds	r5, #104	; 0x68
 80052fa:	e7e9      	b.n	80052d0 <_fwalk_sglue+0x10>

080052fc <siscanf>:
 80052fc:	b40e      	push	{r1, r2, r3}
 80052fe:	b510      	push	{r4, lr}
 8005300:	b09f      	sub	sp, #124	; 0x7c
 8005302:	ac21      	add	r4, sp, #132	; 0x84
 8005304:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005308:	f854 2b04 	ldr.w	r2, [r4], #4
 800530c:	9201      	str	r2, [sp, #4]
 800530e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005312:	9004      	str	r0, [sp, #16]
 8005314:	9008      	str	r0, [sp, #32]
 8005316:	f7fa ff5b 	bl	80001d0 <strlen>
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <siscanf+0x50>)
 800531c:	9005      	str	r0, [sp, #20]
 800531e:	9009      	str	r0, [sp, #36]	; 0x24
 8005320:	930d      	str	r3, [sp, #52]	; 0x34
 8005322:	480b      	ldr	r0, [pc, #44]	; (8005350 <siscanf+0x54>)
 8005324:	9a01      	ldr	r2, [sp, #4]
 8005326:	6800      	ldr	r0, [r0, #0]
 8005328:	9403      	str	r4, [sp, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	9311      	str	r3, [sp, #68]	; 0x44
 800532e:	9316      	str	r3, [sp, #88]	; 0x58
 8005330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005334:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005338:	a904      	add	r1, sp, #16
 800533a:	4623      	mov	r3, r4
 800533c:	f000 faa0 	bl	8005880 <__ssvfiscanf_r>
 8005340:	b01f      	add	sp, #124	; 0x7c
 8005342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005346:	b003      	add	sp, #12
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	08005377 	.word	0x08005377
 8005350:	20000068 	.word	0x20000068

08005354 <__sread>:
 8005354:	b510      	push	{r4, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	f000 f8c6 	bl	80054ec <_read_r>
 8005360:	2800      	cmp	r0, #0
 8005362:	bfab      	itete	ge
 8005364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005366:	89a3      	ldrhlt	r3, [r4, #12]
 8005368:	181b      	addge	r3, r3, r0
 800536a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800536e:	bfac      	ite	ge
 8005370:	6563      	strge	r3, [r4, #84]	; 0x54
 8005372:	81a3      	strhlt	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__seofread>:
 8005376:	2000      	movs	r0, #0
 8005378:	4770      	bx	lr

0800537a <__swrite>:
 800537a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537e:	461f      	mov	r7, r3
 8005380:	898b      	ldrh	r3, [r1, #12]
 8005382:	05db      	lsls	r3, r3, #23
 8005384:	4605      	mov	r5, r0
 8005386:	460c      	mov	r4, r1
 8005388:	4616      	mov	r6, r2
 800538a:	d505      	bpl.n	8005398 <__swrite+0x1e>
 800538c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005390:	2302      	movs	r3, #2
 8005392:	2200      	movs	r2, #0
 8005394:	f000 f898 	bl	80054c8 <_lseek_r>
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800539e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	4632      	mov	r2, r6
 80053a6:	463b      	mov	r3, r7
 80053a8:	4628      	mov	r0, r5
 80053aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ae:	f000 b8af 	b.w	8005510 <_write_r>

080053b2 <__sseek>:
 80053b2:	b510      	push	{r4, lr}
 80053b4:	460c      	mov	r4, r1
 80053b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ba:	f000 f885 	bl	80054c8 <_lseek_r>
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	bf15      	itete	ne
 80053c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053ce:	81a3      	strheq	r3, [r4, #12]
 80053d0:	bf18      	it	ne
 80053d2:	81a3      	strhne	r3, [r4, #12]
 80053d4:	bd10      	pop	{r4, pc}

080053d6 <__sclose>:
 80053d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053da:	f000 b865 	b.w	80054a8 <_close_r>

080053de <memset>:
 80053de:	4402      	add	r2, r0
 80053e0:	4603      	mov	r3, r0
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d100      	bne.n	80053e8 <memset+0xa>
 80053e6:	4770      	bx	lr
 80053e8:	f803 1b01 	strb.w	r1, [r3], #1
 80053ec:	e7f9      	b.n	80053e2 <memset+0x4>
	...

080053f0 <strtok>:
 80053f0:	4b16      	ldr	r3, [pc, #88]	; (800544c <strtok+0x5c>)
 80053f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053f4:	681e      	ldr	r6, [r3, #0]
 80053f6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80053f8:	4605      	mov	r5, r0
 80053fa:	b9fc      	cbnz	r4, 800543c <strtok+0x4c>
 80053fc:	2050      	movs	r0, #80	; 0x50
 80053fe:	9101      	str	r1, [sp, #4]
 8005400:	f000 f930 	bl	8005664 <malloc>
 8005404:	9901      	ldr	r1, [sp, #4]
 8005406:	6470      	str	r0, [r6, #68]	; 0x44
 8005408:	4602      	mov	r2, r0
 800540a:	b920      	cbnz	r0, 8005416 <strtok+0x26>
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <strtok+0x60>)
 800540e:	4811      	ldr	r0, [pc, #68]	; (8005454 <strtok+0x64>)
 8005410:	215b      	movs	r1, #91	; 0x5b
 8005412:	f000 f8bd 	bl	8005590 <__assert_func>
 8005416:	e9c0 4400 	strd	r4, r4, [r0]
 800541a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800541e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005422:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005426:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800542a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800542e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005432:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005436:	6184      	str	r4, [r0, #24]
 8005438:	7704      	strb	r4, [r0, #28]
 800543a:	6244      	str	r4, [r0, #36]	; 0x24
 800543c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800543e:	2301      	movs	r3, #1
 8005440:	4628      	mov	r0, r5
 8005442:	b002      	add	sp, #8
 8005444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005448:	f000 b806 	b.w	8005458 <__strtok_r>
 800544c:	20000068 	.word	0x20000068
 8005450:	08006bc0 	.word	0x08006bc0
 8005454:	08006bd7 	.word	0x08006bd7

08005458 <__strtok_r>:
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b908      	cbnz	r0, 8005460 <__strtok_r+0x8>
 800545c:	6810      	ldr	r0, [r2, #0]
 800545e:	b188      	cbz	r0, 8005484 <__strtok_r+0x2c>
 8005460:	4604      	mov	r4, r0
 8005462:	4620      	mov	r0, r4
 8005464:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005468:	460f      	mov	r7, r1
 800546a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800546e:	b91e      	cbnz	r6, 8005478 <__strtok_r+0x20>
 8005470:	b965      	cbnz	r5, 800548c <__strtok_r+0x34>
 8005472:	6015      	str	r5, [r2, #0]
 8005474:	4628      	mov	r0, r5
 8005476:	e005      	b.n	8005484 <__strtok_r+0x2c>
 8005478:	42b5      	cmp	r5, r6
 800547a:	d1f6      	bne.n	800546a <__strtok_r+0x12>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f0      	bne.n	8005462 <__strtok_r+0xa>
 8005480:	6014      	str	r4, [r2, #0]
 8005482:	7003      	strb	r3, [r0, #0]
 8005484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005486:	461c      	mov	r4, r3
 8005488:	e00c      	b.n	80054a4 <__strtok_r+0x4c>
 800548a:	b915      	cbnz	r5, 8005492 <__strtok_r+0x3a>
 800548c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005490:	460e      	mov	r6, r1
 8005492:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005496:	42ab      	cmp	r3, r5
 8005498:	d1f7      	bne.n	800548a <__strtok_r+0x32>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f3      	beq.n	8005486 <__strtok_r+0x2e>
 800549e:	2300      	movs	r3, #0
 80054a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80054a4:	6014      	str	r4, [r2, #0]
 80054a6:	e7ed      	b.n	8005484 <__strtok_r+0x2c>

080054a8 <_close_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d06      	ldr	r5, [pc, #24]	; (80054c4 <_close_r+0x1c>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	f7fc fd5f 	bl	8001f76 <_close>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_close_r+0x1a>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_close_r+0x1a>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	200001d4 	.word	0x200001d4

080054c8 <_lseek_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d07      	ldr	r5, [pc, #28]	; (80054e8 <_lseek_r+0x20>)
 80054cc:	4604      	mov	r4, r0
 80054ce:	4608      	mov	r0, r1
 80054d0:	4611      	mov	r1, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	602a      	str	r2, [r5, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7fc fd74 	bl	8001fc4 <_lseek>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_lseek_r+0x1e>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_lseek_r+0x1e>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200001d4 	.word	0x200001d4

080054ec <_read_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d07      	ldr	r5, [pc, #28]	; (800550c <_read_r+0x20>)
 80054f0:	4604      	mov	r4, r0
 80054f2:	4608      	mov	r0, r1
 80054f4:	4611      	mov	r1, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	602a      	str	r2, [r5, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f7fc fd02 	bl	8001f04 <_read>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_read_r+0x1e>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_read_r+0x1e>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	200001d4 	.word	0x200001d4

08005510 <_write_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d07      	ldr	r5, [pc, #28]	; (8005530 <_write_r+0x20>)
 8005514:	4604      	mov	r4, r0
 8005516:	4608      	mov	r0, r1
 8005518:	4611      	mov	r1, r2
 800551a:	2200      	movs	r2, #0
 800551c:	602a      	str	r2, [r5, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f7fc fd0d 	bl	8001f3e <_write>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_write_r+0x1e>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_write_r+0x1e>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	200001d4 	.word	0x200001d4

08005534 <__errno>:
 8005534:	4b01      	ldr	r3, [pc, #4]	; (800553c <__errno+0x8>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000068 	.word	0x20000068

08005540 <__libc_init_array>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4d0d      	ldr	r5, [pc, #52]	; (8005578 <__libc_init_array+0x38>)
 8005544:	4c0d      	ldr	r4, [pc, #52]	; (800557c <__libc_init_array+0x3c>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	2600      	movs	r6, #0
 800554c:	42a6      	cmp	r6, r4
 800554e:	d109      	bne.n	8005564 <__libc_init_array+0x24>
 8005550:	4d0b      	ldr	r5, [pc, #44]	; (8005580 <__libc_init_array+0x40>)
 8005552:	4c0c      	ldr	r4, [pc, #48]	; (8005584 <__libc_init_array+0x44>)
 8005554:	f001 fb14 	bl	8006b80 <_init>
 8005558:	1b64      	subs	r4, r4, r5
 800555a:	10a4      	asrs	r4, r4, #2
 800555c:	2600      	movs	r6, #0
 800555e:	42a6      	cmp	r6, r4
 8005560:	d105      	bne.n	800556e <__libc_init_array+0x2e>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	f855 3b04 	ldr.w	r3, [r5], #4
 8005568:	4798      	blx	r3
 800556a:	3601      	adds	r6, #1
 800556c:	e7ee      	b.n	800554c <__libc_init_array+0xc>
 800556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005572:	4798      	blx	r3
 8005574:	3601      	adds	r6, #1
 8005576:	e7f2      	b.n	800555e <__libc_init_array+0x1e>
 8005578:	08006dc4 	.word	0x08006dc4
 800557c:	08006dc4 	.word	0x08006dc4
 8005580:	08006dc4 	.word	0x08006dc4
 8005584:	08006dc8 	.word	0x08006dc8

08005588 <__retarget_lock_init_recursive>:
 8005588:	4770      	bx	lr

0800558a <__retarget_lock_acquire_recursive>:
 800558a:	4770      	bx	lr

0800558c <__retarget_lock_release_recursive>:
 800558c:	4770      	bx	lr
	...

08005590 <__assert_func>:
 8005590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005592:	4614      	mov	r4, r2
 8005594:	461a      	mov	r2, r3
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <__assert_func+0x2c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4605      	mov	r5, r0
 800559c:	68d8      	ldr	r0, [r3, #12]
 800559e:	b14c      	cbz	r4, 80055b4 <__assert_func+0x24>
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <__assert_func+0x30>)
 80055a2:	9100      	str	r1, [sp, #0]
 80055a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055a8:	4906      	ldr	r1, [pc, #24]	; (80055c4 <__assert_func+0x34>)
 80055aa:	462b      	mov	r3, r5
 80055ac:	f000 fcdc 	bl	8005f68 <fiprintf>
 80055b0:	f000 fd7e 	bl	80060b0 <abort>
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <__assert_func+0x38>)
 80055b6:	461c      	mov	r4, r3
 80055b8:	e7f3      	b.n	80055a2 <__assert_func+0x12>
 80055ba:	bf00      	nop
 80055bc:	20000068 	.word	0x20000068
 80055c0:	08006c31 	.word	0x08006c31
 80055c4:	08006c3e 	.word	0x08006c3e
 80055c8:	08006c6c 	.word	0x08006c6c

080055cc <_free_r>:
 80055cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ce:	2900      	cmp	r1, #0
 80055d0:	d044      	beq.n	800565c <_free_r+0x90>
 80055d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d6:	9001      	str	r0, [sp, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f1a1 0404 	sub.w	r4, r1, #4
 80055de:	bfb8      	it	lt
 80055e0:	18e4      	addlt	r4, r4, r3
 80055e2:	f000 f8e7 	bl	80057b4 <__malloc_lock>
 80055e6:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <_free_r+0x94>)
 80055e8:	9801      	ldr	r0, [sp, #4]
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	b933      	cbnz	r3, 80055fc <_free_r+0x30>
 80055ee:	6063      	str	r3, [r4, #4]
 80055f0:	6014      	str	r4, [r2, #0]
 80055f2:	b003      	add	sp, #12
 80055f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f8:	f000 b8e2 	b.w	80057c0 <__malloc_unlock>
 80055fc:	42a3      	cmp	r3, r4
 80055fe:	d908      	bls.n	8005612 <_free_r+0x46>
 8005600:	6825      	ldr	r5, [r4, #0]
 8005602:	1961      	adds	r1, r4, r5
 8005604:	428b      	cmp	r3, r1
 8005606:	bf01      	itttt	eq
 8005608:	6819      	ldreq	r1, [r3, #0]
 800560a:	685b      	ldreq	r3, [r3, #4]
 800560c:	1949      	addeq	r1, r1, r5
 800560e:	6021      	streq	r1, [r4, #0]
 8005610:	e7ed      	b.n	80055ee <_free_r+0x22>
 8005612:	461a      	mov	r2, r3
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	b10b      	cbz	r3, 800561c <_free_r+0x50>
 8005618:	42a3      	cmp	r3, r4
 800561a:	d9fa      	bls.n	8005612 <_free_r+0x46>
 800561c:	6811      	ldr	r1, [r2, #0]
 800561e:	1855      	adds	r5, r2, r1
 8005620:	42a5      	cmp	r5, r4
 8005622:	d10b      	bne.n	800563c <_free_r+0x70>
 8005624:	6824      	ldr	r4, [r4, #0]
 8005626:	4421      	add	r1, r4
 8005628:	1854      	adds	r4, r2, r1
 800562a:	42a3      	cmp	r3, r4
 800562c:	6011      	str	r1, [r2, #0]
 800562e:	d1e0      	bne.n	80055f2 <_free_r+0x26>
 8005630:	681c      	ldr	r4, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	6053      	str	r3, [r2, #4]
 8005636:	440c      	add	r4, r1
 8005638:	6014      	str	r4, [r2, #0]
 800563a:	e7da      	b.n	80055f2 <_free_r+0x26>
 800563c:	d902      	bls.n	8005644 <_free_r+0x78>
 800563e:	230c      	movs	r3, #12
 8005640:	6003      	str	r3, [r0, #0]
 8005642:	e7d6      	b.n	80055f2 <_free_r+0x26>
 8005644:	6825      	ldr	r5, [r4, #0]
 8005646:	1961      	adds	r1, r4, r5
 8005648:	428b      	cmp	r3, r1
 800564a:	bf04      	itt	eq
 800564c:	6819      	ldreq	r1, [r3, #0]
 800564e:	685b      	ldreq	r3, [r3, #4]
 8005650:	6063      	str	r3, [r4, #4]
 8005652:	bf04      	itt	eq
 8005654:	1949      	addeq	r1, r1, r5
 8005656:	6021      	streq	r1, [r4, #0]
 8005658:	6054      	str	r4, [r2, #4]
 800565a:	e7ca      	b.n	80055f2 <_free_r+0x26>
 800565c:	b003      	add	sp, #12
 800565e:	bd30      	pop	{r4, r5, pc}
 8005660:	200001dc 	.word	0x200001dc

08005664 <malloc>:
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <malloc+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f000 b823 	b.w	80056b4 <_malloc_r>
 800566e:	bf00      	nop
 8005670:	20000068 	.word	0x20000068

08005674 <sbrk_aligned>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4e0e      	ldr	r6, [pc, #56]	; (80056b0 <sbrk_aligned+0x3c>)
 8005678:	460c      	mov	r4, r1
 800567a:	6831      	ldr	r1, [r6, #0]
 800567c:	4605      	mov	r5, r0
 800567e:	b911      	cbnz	r1, 8005686 <sbrk_aligned+0x12>
 8005680:	f000 fcf8 	bl	8006074 <_sbrk_r>
 8005684:	6030      	str	r0, [r6, #0]
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	f000 fcf3 	bl	8006074 <_sbrk_r>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	d00a      	beq.n	80056a8 <sbrk_aligned+0x34>
 8005692:	1cc4      	adds	r4, r0, #3
 8005694:	f024 0403 	bic.w	r4, r4, #3
 8005698:	42a0      	cmp	r0, r4
 800569a:	d007      	beq.n	80056ac <sbrk_aligned+0x38>
 800569c:	1a21      	subs	r1, r4, r0
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 fce8 	bl	8006074 <_sbrk_r>
 80056a4:	3001      	adds	r0, #1
 80056a6:	d101      	bne.n	80056ac <sbrk_aligned+0x38>
 80056a8:	f04f 34ff 	mov.w	r4, #4294967295
 80056ac:	4620      	mov	r0, r4
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	200001e0 	.word	0x200001e0

080056b4 <_malloc_r>:
 80056b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b8:	1ccd      	adds	r5, r1, #3
 80056ba:	f025 0503 	bic.w	r5, r5, #3
 80056be:	3508      	adds	r5, #8
 80056c0:	2d0c      	cmp	r5, #12
 80056c2:	bf38      	it	cc
 80056c4:	250c      	movcc	r5, #12
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	4607      	mov	r7, r0
 80056ca:	db01      	blt.n	80056d0 <_malloc_r+0x1c>
 80056cc:	42a9      	cmp	r1, r5
 80056ce:	d905      	bls.n	80056dc <_malloc_r+0x28>
 80056d0:	230c      	movs	r3, #12
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	2600      	movs	r6, #0
 80056d6:	4630      	mov	r0, r6
 80056d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057b0 <_malloc_r+0xfc>
 80056e0:	f000 f868 	bl	80057b4 <__malloc_lock>
 80056e4:	f8d8 3000 	ldr.w	r3, [r8]
 80056e8:	461c      	mov	r4, r3
 80056ea:	bb5c      	cbnz	r4, 8005744 <_malloc_r+0x90>
 80056ec:	4629      	mov	r1, r5
 80056ee:	4638      	mov	r0, r7
 80056f0:	f7ff ffc0 	bl	8005674 <sbrk_aligned>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	4604      	mov	r4, r0
 80056f8:	d155      	bne.n	80057a6 <_malloc_r+0xf2>
 80056fa:	f8d8 4000 	ldr.w	r4, [r8]
 80056fe:	4626      	mov	r6, r4
 8005700:	2e00      	cmp	r6, #0
 8005702:	d145      	bne.n	8005790 <_malloc_r+0xdc>
 8005704:	2c00      	cmp	r4, #0
 8005706:	d048      	beq.n	800579a <_malloc_r+0xe6>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	4631      	mov	r1, r6
 800570c:	4638      	mov	r0, r7
 800570e:	eb04 0903 	add.w	r9, r4, r3
 8005712:	f000 fcaf 	bl	8006074 <_sbrk_r>
 8005716:	4581      	cmp	r9, r0
 8005718:	d13f      	bne.n	800579a <_malloc_r+0xe6>
 800571a:	6821      	ldr	r1, [r4, #0]
 800571c:	1a6d      	subs	r5, r5, r1
 800571e:	4629      	mov	r1, r5
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff ffa7 	bl	8005674 <sbrk_aligned>
 8005726:	3001      	adds	r0, #1
 8005728:	d037      	beq.n	800579a <_malloc_r+0xe6>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	442b      	add	r3, r5
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	f8d8 3000 	ldr.w	r3, [r8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d038      	beq.n	80057aa <_malloc_r+0xf6>
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	42a2      	cmp	r2, r4
 800573c:	d12b      	bne.n	8005796 <_malloc_r+0xe2>
 800573e:	2200      	movs	r2, #0
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	e00f      	b.n	8005764 <_malloc_r+0xb0>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	1b52      	subs	r2, r2, r5
 8005748:	d41f      	bmi.n	800578a <_malloc_r+0xd6>
 800574a:	2a0b      	cmp	r2, #11
 800574c:	d917      	bls.n	800577e <_malloc_r+0xca>
 800574e:	1961      	adds	r1, r4, r5
 8005750:	42a3      	cmp	r3, r4
 8005752:	6025      	str	r5, [r4, #0]
 8005754:	bf18      	it	ne
 8005756:	6059      	strne	r1, [r3, #4]
 8005758:	6863      	ldr	r3, [r4, #4]
 800575a:	bf08      	it	eq
 800575c:	f8c8 1000 	streq.w	r1, [r8]
 8005760:	5162      	str	r2, [r4, r5]
 8005762:	604b      	str	r3, [r1, #4]
 8005764:	4638      	mov	r0, r7
 8005766:	f104 060b 	add.w	r6, r4, #11
 800576a:	f000 f829 	bl	80057c0 <__malloc_unlock>
 800576e:	f026 0607 	bic.w	r6, r6, #7
 8005772:	1d23      	adds	r3, r4, #4
 8005774:	1af2      	subs	r2, r6, r3
 8005776:	d0ae      	beq.n	80056d6 <_malloc_r+0x22>
 8005778:	1b9b      	subs	r3, r3, r6
 800577a:	50a3      	str	r3, [r4, r2]
 800577c:	e7ab      	b.n	80056d6 <_malloc_r+0x22>
 800577e:	42a3      	cmp	r3, r4
 8005780:	6862      	ldr	r2, [r4, #4]
 8005782:	d1dd      	bne.n	8005740 <_malloc_r+0x8c>
 8005784:	f8c8 2000 	str.w	r2, [r8]
 8005788:	e7ec      	b.n	8005764 <_malloc_r+0xb0>
 800578a:	4623      	mov	r3, r4
 800578c:	6864      	ldr	r4, [r4, #4]
 800578e:	e7ac      	b.n	80056ea <_malloc_r+0x36>
 8005790:	4634      	mov	r4, r6
 8005792:	6876      	ldr	r6, [r6, #4]
 8005794:	e7b4      	b.n	8005700 <_malloc_r+0x4c>
 8005796:	4613      	mov	r3, r2
 8005798:	e7cc      	b.n	8005734 <_malloc_r+0x80>
 800579a:	230c      	movs	r3, #12
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4638      	mov	r0, r7
 80057a0:	f000 f80e 	bl	80057c0 <__malloc_unlock>
 80057a4:	e797      	b.n	80056d6 <_malloc_r+0x22>
 80057a6:	6025      	str	r5, [r4, #0]
 80057a8:	e7dc      	b.n	8005764 <_malloc_r+0xb0>
 80057aa:	605b      	str	r3, [r3, #4]
 80057ac:	deff      	udf	#255	; 0xff
 80057ae:	bf00      	nop
 80057b0:	200001dc 	.word	0x200001dc

080057b4 <__malloc_lock>:
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <__malloc_lock+0x8>)
 80057b6:	f7ff bee8 	b.w	800558a <__retarget_lock_acquire_recursive>
 80057ba:	bf00      	nop
 80057bc:	200001d8 	.word	0x200001d8

080057c0 <__malloc_unlock>:
 80057c0:	4801      	ldr	r0, [pc, #4]	; (80057c8 <__malloc_unlock+0x8>)
 80057c2:	f7ff bee3 	b.w	800558c <__retarget_lock_release_recursive>
 80057c6:	bf00      	nop
 80057c8:	200001d8 	.word	0x200001d8

080057cc <_sungetc_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	1c4b      	adds	r3, r1, #1
 80057d0:	4614      	mov	r4, r2
 80057d2:	d103      	bne.n	80057dc <_sungetc_r+0x10>
 80057d4:	f04f 35ff 	mov.w	r5, #4294967295
 80057d8:	4628      	mov	r0, r5
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	8993      	ldrh	r3, [r2, #12]
 80057de:	f023 0320 	bic.w	r3, r3, #32
 80057e2:	8193      	strh	r3, [r2, #12]
 80057e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	b2cd      	uxtb	r5, r1
 80057ea:	b18b      	cbz	r3, 8005810 <_sungetc_r+0x44>
 80057ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ee:	4293      	cmp	r3, r2
 80057f0:	dd08      	ble.n	8005804 <_sungetc_r+0x38>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	1e5a      	subs	r2, r3, #1
 80057f6:	6022      	str	r2, [r4, #0]
 80057f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	3301      	adds	r3, #1
 8005800:	6063      	str	r3, [r4, #4]
 8005802:	e7e9      	b.n	80057d8 <_sungetc_r+0xc>
 8005804:	4621      	mov	r1, r4
 8005806:	f000 fbfa 	bl	8005ffe <__submore>
 800580a:	2800      	cmp	r0, #0
 800580c:	d0f1      	beq.n	80057f2 <_sungetc_r+0x26>
 800580e:	e7e1      	b.n	80057d4 <_sungetc_r+0x8>
 8005810:	6921      	ldr	r1, [r4, #16]
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	b151      	cbz	r1, 800582c <_sungetc_r+0x60>
 8005816:	4299      	cmp	r1, r3
 8005818:	d208      	bcs.n	800582c <_sungetc_r+0x60>
 800581a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800581e:	42a9      	cmp	r1, r5
 8005820:	d104      	bne.n	800582c <_sungetc_r+0x60>
 8005822:	3b01      	subs	r3, #1
 8005824:	3201      	adds	r2, #1
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	6062      	str	r2, [r4, #4]
 800582a:	e7d5      	b.n	80057d8 <_sungetc_r+0xc>
 800582c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005834:	6363      	str	r3, [r4, #52]	; 0x34
 8005836:	2303      	movs	r3, #3
 8005838:	63a3      	str	r3, [r4, #56]	; 0x38
 800583a:	4623      	mov	r3, r4
 800583c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	2301      	movs	r3, #1
 8005844:	e7dc      	b.n	8005800 <_sungetc_r+0x34>

08005846 <__ssrefill_r>:
 8005846:	b510      	push	{r4, lr}
 8005848:	460c      	mov	r4, r1
 800584a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800584c:	b169      	cbz	r1, 800586a <__ssrefill_r+0x24>
 800584e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005852:	4299      	cmp	r1, r3
 8005854:	d001      	beq.n	800585a <__ssrefill_r+0x14>
 8005856:	f7ff feb9 	bl	80055cc <_free_r>
 800585a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	2000      	movs	r0, #0
 8005860:	6360      	str	r0, [r4, #52]	; 0x34
 8005862:	b113      	cbz	r3, 800586a <__ssrefill_r+0x24>
 8005864:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	bd10      	pop	{r4, pc}
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	2300      	movs	r3, #0
 8005870:	6063      	str	r3, [r4, #4]
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	f043 0320 	orr.w	r3, r3, #32
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	f04f 30ff 	mov.w	r0, #4294967295
 800587e:	e7f3      	b.n	8005868 <__ssrefill_r+0x22>

08005880 <__ssvfiscanf_r>:
 8005880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005884:	460c      	mov	r4, r1
 8005886:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800588a:	2100      	movs	r1, #0
 800588c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005890:	49a6      	ldr	r1, [pc, #664]	; (8005b2c <__ssvfiscanf_r+0x2ac>)
 8005892:	91a0      	str	r1, [sp, #640]	; 0x280
 8005894:	f10d 0804 	add.w	r8, sp, #4
 8005898:	49a5      	ldr	r1, [pc, #660]	; (8005b30 <__ssvfiscanf_r+0x2b0>)
 800589a:	4fa6      	ldr	r7, [pc, #664]	; (8005b34 <__ssvfiscanf_r+0x2b4>)
 800589c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005b38 <__ssvfiscanf_r+0x2b8>
 80058a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80058a4:	4606      	mov	r6, r0
 80058a6:	91a1      	str	r1, [sp, #644]	; 0x284
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	7813      	ldrb	r3, [r2, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 815a 	beq.w	8005b66 <__ssvfiscanf_r+0x2e6>
 80058b2:	5cf9      	ldrb	r1, [r7, r3]
 80058b4:	f011 0108 	ands.w	r1, r1, #8
 80058b8:	f102 0501 	add.w	r5, r2, #1
 80058bc:	d019      	beq.n	80058f2 <__ssvfiscanf_r+0x72>
 80058be:	6863      	ldr	r3, [r4, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dd0f      	ble.n	80058e4 <__ssvfiscanf_r+0x64>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	781a      	ldrb	r2, [r3, #0]
 80058c8:	5cba      	ldrb	r2, [r7, r2]
 80058ca:	0712      	lsls	r2, r2, #28
 80058cc:	d401      	bmi.n	80058d2 <__ssvfiscanf_r+0x52>
 80058ce:	462a      	mov	r2, r5
 80058d0:	e7eb      	b.n	80058aa <__ssvfiscanf_r+0x2a>
 80058d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80058d4:	3201      	adds	r2, #1
 80058d6:	9245      	str	r2, [sp, #276]	; 0x114
 80058d8:	6862      	ldr	r2, [r4, #4]
 80058da:	3301      	adds	r3, #1
 80058dc:	3a01      	subs	r2, #1
 80058de:	6062      	str	r2, [r4, #4]
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	e7ec      	b.n	80058be <__ssvfiscanf_r+0x3e>
 80058e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80058e6:	4621      	mov	r1, r4
 80058e8:	4630      	mov	r0, r6
 80058ea:	4798      	blx	r3
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d0e9      	beq.n	80058c4 <__ssvfiscanf_r+0x44>
 80058f0:	e7ed      	b.n	80058ce <__ssvfiscanf_r+0x4e>
 80058f2:	2b25      	cmp	r3, #37	; 0x25
 80058f4:	d012      	beq.n	800591c <__ssvfiscanf_r+0x9c>
 80058f6:	469a      	mov	sl, r3
 80058f8:	6863      	ldr	r3, [r4, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f340 8091 	ble.w	8005a22 <__ssvfiscanf_r+0x1a2>
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	7813      	ldrb	r3, [r2, #0]
 8005904:	4553      	cmp	r3, sl
 8005906:	f040 812e 	bne.w	8005b66 <__ssvfiscanf_r+0x2e6>
 800590a:	6863      	ldr	r3, [r4, #4]
 800590c:	3b01      	subs	r3, #1
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005912:	3201      	adds	r2, #1
 8005914:	3301      	adds	r3, #1
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	9345      	str	r3, [sp, #276]	; 0x114
 800591a:	e7d8      	b.n	80058ce <__ssvfiscanf_r+0x4e>
 800591c:	9141      	str	r1, [sp, #260]	; 0x104
 800591e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005920:	7853      	ldrb	r3, [r2, #1]
 8005922:	2b2a      	cmp	r3, #42	; 0x2a
 8005924:	bf02      	ittt	eq
 8005926:	2310      	moveq	r3, #16
 8005928:	1c95      	addeq	r5, r2, #2
 800592a:	9341      	streq	r3, [sp, #260]	; 0x104
 800592c:	220a      	movs	r2, #10
 800592e:	46aa      	mov	sl, r5
 8005930:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005934:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005938:	2b09      	cmp	r3, #9
 800593a:	d91c      	bls.n	8005976 <__ssvfiscanf_r+0xf6>
 800593c:	487e      	ldr	r0, [pc, #504]	; (8005b38 <__ssvfiscanf_r+0x2b8>)
 800593e:	2203      	movs	r2, #3
 8005940:	f7fa fc4e 	bl	80001e0 <memchr>
 8005944:	b138      	cbz	r0, 8005956 <__ssvfiscanf_r+0xd6>
 8005946:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005948:	eba0 0009 	sub.w	r0, r0, r9
 800594c:	2301      	movs	r3, #1
 800594e:	4083      	lsls	r3, r0
 8005950:	4313      	orrs	r3, r2
 8005952:	9341      	str	r3, [sp, #260]	; 0x104
 8005954:	4655      	mov	r5, sl
 8005956:	f815 3b01 	ldrb.w	r3, [r5], #1
 800595a:	2b78      	cmp	r3, #120	; 0x78
 800595c:	d806      	bhi.n	800596c <__ssvfiscanf_r+0xec>
 800595e:	2b57      	cmp	r3, #87	; 0x57
 8005960:	d810      	bhi.n	8005984 <__ssvfiscanf_r+0x104>
 8005962:	2b25      	cmp	r3, #37	; 0x25
 8005964:	d0c7      	beq.n	80058f6 <__ssvfiscanf_r+0x76>
 8005966:	d857      	bhi.n	8005a18 <__ssvfiscanf_r+0x198>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d065      	beq.n	8005a38 <__ssvfiscanf_r+0x1b8>
 800596c:	2303      	movs	r3, #3
 800596e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005970:	230a      	movs	r3, #10
 8005972:	9342      	str	r3, [sp, #264]	; 0x108
 8005974:	e076      	b.n	8005a64 <__ssvfiscanf_r+0x1e4>
 8005976:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005978:	fb02 1103 	mla	r1, r2, r3, r1
 800597c:	3930      	subs	r1, #48	; 0x30
 800597e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005980:	4655      	mov	r5, sl
 8005982:	e7d4      	b.n	800592e <__ssvfiscanf_r+0xae>
 8005984:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005988:	2a20      	cmp	r2, #32
 800598a:	d8ef      	bhi.n	800596c <__ssvfiscanf_r+0xec>
 800598c:	a101      	add	r1, pc, #4	; (adr r1, 8005994 <__ssvfiscanf_r+0x114>)
 800598e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005992:	bf00      	nop
 8005994:	08005a47 	.word	0x08005a47
 8005998:	0800596d 	.word	0x0800596d
 800599c:	0800596d 	.word	0x0800596d
 80059a0:	08005aa5 	.word	0x08005aa5
 80059a4:	0800596d 	.word	0x0800596d
 80059a8:	0800596d 	.word	0x0800596d
 80059ac:	0800596d 	.word	0x0800596d
 80059b0:	0800596d 	.word	0x0800596d
 80059b4:	0800596d 	.word	0x0800596d
 80059b8:	0800596d 	.word	0x0800596d
 80059bc:	0800596d 	.word	0x0800596d
 80059c0:	08005abb 	.word	0x08005abb
 80059c4:	08005aa1 	.word	0x08005aa1
 80059c8:	08005a1f 	.word	0x08005a1f
 80059cc:	08005a1f 	.word	0x08005a1f
 80059d0:	08005a1f 	.word	0x08005a1f
 80059d4:	0800596d 	.word	0x0800596d
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	0800596d 	.word	0x0800596d
 80059e0:	0800596d 	.word	0x0800596d
 80059e4:	0800596d 	.word	0x0800596d
 80059e8:	0800596d 	.word	0x0800596d
 80059ec:	08005acb 	.word	0x08005acb
 80059f0:	08005a99 	.word	0x08005a99
 80059f4:	08005a3f 	.word	0x08005a3f
 80059f8:	0800596d 	.word	0x0800596d
 80059fc:	0800596d 	.word	0x0800596d
 8005a00:	08005ac7 	.word	0x08005ac7
 8005a04:	0800596d 	.word	0x0800596d
 8005a08:	08005aa1 	.word	0x08005aa1
 8005a0c:	0800596d 	.word	0x0800596d
 8005a10:	0800596d 	.word	0x0800596d
 8005a14:	08005a47 	.word	0x08005a47
 8005a18:	3b45      	subs	r3, #69	; 0x45
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d8a6      	bhi.n	800596c <__ssvfiscanf_r+0xec>
 8005a1e:	2305      	movs	r3, #5
 8005a20:	e01f      	b.n	8005a62 <__ssvfiscanf_r+0x1e2>
 8005a22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a24:	4621      	mov	r1, r4
 8005a26:	4630      	mov	r0, r6
 8005a28:	4798      	blx	r3
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	f43f af68 	beq.w	8005900 <__ssvfiscanf_r+0x80>
 8005a30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005a32:	2800      	cmp	r0, #0
 8005a34:	f040 808d 	bne.w	8005b52 <__ssvfiscanf_r+0x2d2>
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	e08f      	b.n	8005b5e <__ssvfiscanf_r+0x2de>
 8005a3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a40:	f042 0220 	orr.w	r2, r2, #32
 8005a44:	9241      	str	r2, [sp, #260]	; 0x104
 8005a46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4c:	9241      	str	r2, [sp, #260]	; 0x104
 8005a4e:	2210      	movs	r2, #16
 8005a50:	2b6f      	cmp	r3, #111	; 0x6f
 8005a52:	9242      	str	r2, [sp, #264]	; 0x108
 8005a54:	bf34      	ite	cc
 8005a56:	2303      	movcc	r3, #3
 8005a58:	2304      	movcs	r3, #4
 8005a5a:	e002      	b.n	8005a62 <__ssvfiscanf_r+0x1e2>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9342      	str	r3, [sp, #264]	; 0x108
 8005a60:	2303      	movs	r3, #3
 8005a62:	9347      	str	r3, [sp, #284]	; 0x11c
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	dd3d      	ble.n	8005ae6 <__ssvfiscanf_r+0x266>
 8005a6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a6c:	0659      	lsls	r1, r3, #25
 8005a6e:	d404      	bmi.n	8005a7a <__ssvfiscanf_r+0x1fa>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	781a      	ldrb	r2, [r3, #0]
 8005a74:	5cba      	ldrb	r2, [r7, r2]
 8005a76:	0712      	lsls	r2, r2, #28
 8005a78:	d43c      	bmi.n	8005af4 <__ssvfiscanf_r+0x274>
 8005a7a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	dc4b      	bgt.n	8005b18 <__ssvfiscanf_r+0x298>
 8005a80:	466b      	mov	r3, sp
 8005a82:	4622      	mov	r2, r4
 8005a84:	a941      	add	r1, sp, #260	; 0x104
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 f872 	bl	8005b70 <_scanf_chars>
 8005a8c:	2801      	cmp	r0, #1
 8005a8e:	d06a      	beq.n	8005b66 <__ssvfiscanf_r+0x2e6>
 8005a90:	2802      	cmp	r0, #2
 8005a92:	f47f af1c 	bne.w	80058ce <__ssvfiscanf_r+0x4e>
 8005a96:	e7cb      	b.n	8005a30 <__ssvfiscanf_r+0x1b0>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	9342      	str	r3, [sp, #264]	; 0x108
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	e7e0      	b.n	8005a62 <__ssvfiscanf_r+0x1e2>
 8005aa0:	220a      	movs	r2, #10
 8005aa2:	e7d5      	b.n	8005a50 <__ssvfiscanf_r+0x1d0>
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f000 fa70 	bl	8005f8c <__sccl>
 8005aac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab2:	9341      	str	r3, [sp, #260]	; 0x104
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e7d3      	b.n	8005a62 <__ssvfiscanf_r+0x1e2>
 8005aba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac0:	9341      	str	r3, [sp, #260]	; 0x104
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e7cd      	b.n	8005a62 <__ssvfiscanf_r+0x1e2>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e7cb      	b.n	8005a62 <__ssvfiscanf_r+0x1e2>
 8005aca:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005acc:	06c3      	lsls	r3, r0, #27
 8005ace:	f53f aefe 	bmi.w	80058ce <__ssvfiscanf_r+0x4e>
 8005ad2:	9b00      	ldr	r3, [sp, #0]
 8005ad4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005ad6:	1d19      	adds	r1, r3, #4
 8005ad8:	9100      	str	r1, [sp, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	07c0      	lsls	r0, r0, #31
 8005ade:	bf4c      	ite	mi
 8005ae0:	801a      	strhmi	r2, [r3, #0]
 8005ae2:	601a      	strpl	r2, [r3, #0]
 8005ae4:	e6f3      	b.n	80058ce <__ssvfiscanf_r+0x4e>
 8005ae6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4630      	mov	r0, r6
 8005aec:	4798      	blx	r3
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d0bb      	beq.n	8005a6a <__ssvfiscanf_r+0x1ea>
 8005af2:	e79d      	b.n	8005a30 <__ssvfiscanf_r+0x1b0>
 8005af4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005af6:	3201      	adds	r2, #1
 8005af8:	9245      	str	r2, [sp, #276]	; 0x114
 8005afa:	6862      	ldr	r2, [r4, #4]
 8005afc:	3a01      	subs	r2, #1
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	6062      	str	r2, [r4, #4]
 8005b02:	dd02      	ble.n	8005b0a <__ssvfiscanf_r+0x28a>
 8005b04:	3301      	adds	r3, #1
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	e7b2      	b.n	8005a70 <__ssvfiscanf_r+0x1f0>
 8005b0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	4630      	mov	r0, r6
 8005b10:	4798      	blx	r3
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0ac      	beq.n	8005a70 <__ssvfiscanf_r+0x1f0>
 8005b16:	e78b      	b.n	8005a30 <__ssvfiscanf_r+0x1b0>
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	dc0f      	bgt.n	8005b3c <__ssvfiscanf_r+0x2bc>
 8005b1c:	466b      	mov	r3, sp
 8005b1e:	4622      	mov	r2, r4
 8005b20:	a941      	add	r1, sp, #260	; 0x104
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 f87e 	bl	8005c24 <_scanf_i>
 8005b28:	e7b0      	b.n	8005a8c <__ssvfiscanf_r+0x20c>
 8005b2a:	bf00      	nop
 8005b2c:	080057cd 	.word	0x080057cd
 8005b30:	08005847 	.word	0x08005847
 8005b34:	08006c8d 	.word	0x08006c8d
 8005b38:	08006c6d 	.word	0x08006c6d
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <__ssvfiscanf_r+0x2ec>)
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f43f aec5 	beq.w	80058ce <__ssvfiscanf_r+0x4e>
 8005b44:	466b      	mov	r3, sp
 8005b46:	4622      	mov	r2, r4
 8005b48:	a941      	add	r1, sp, #260	; 0x104
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f3af 8000 	nop.w
 8005b50:	e79c      	b.n	8005a8c <__ssvfiscanf_r+0x20c>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b58:	bf18      	it	ne
 8005b5a:	f04f 30ff 	movne.w	r0, #4294967295
 8005b5e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b66:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005b68:	e7f9      	b.n	8005b5e <__ssvfiscanf_r+0x2de>
 8005b6a:	bf00      	nop
 8005b6c:	00000000 	.word	0x00000000

08005b70 <_scanf_chars>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	4615      	mov	r5, r2
 8005b76:	688a      	ldr	r2, [r1, #8]
 8005b78:	4680      	mov	r8, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	b932      	cbnz	r2, 8005b8c <_scanf_chars+0x1c>
 8005b7e:	698a      	ldr	r2, [r1, #24]
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	bf0c      	ite	eq
 8005b84:	2201      	moveq	r2, #1
 8005b86:	f04f 32ff 	movne.w	r2, #4294967295
 8005b8a:	608a      	str	r2, [r1, #8]
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005c20 <_scanf_chars+0xb0>
 8005b92:	06d1      	lsls	r1, r2, #27
 8005b94:	bf5f      	itttt	pl
 8005b96:	681a      	ldrpl	r2, [r3, #0]
 8005b98:	1d11      	addpl	r1, r2, #4
 8005b9a:	6019      	strpl	r1, [r3, #0]
 8005b9c:	6816      	ldrpl	r6, [r2, #0]
 8005b9e:	2700      	movs	r7, #0
 8005ba0:	69a0      	ldr	r0, [r4, #24]
 8005ba2:	b188      	cbz	r0, 8005bc8 <_scanf_chars+0x58>
 8005ba4:	2801      	cmp	r0, #1
 8005ba6:	d107      	bne.n	8005bb8 <_scanf_chars+0x48>
 8005ba8:	682a      	ldr	r2, [r5, #0]
 8005baa:	7811      	ldrb	r1, [r2, #0]
 8005bac:	6962      	ldr	r2, [r4, #20]
 8005bae:	5c52      	ldrb	r2, [r2, r1]
 8005bb0:	b952      	cbnz	r2, 8005bc8 <_scanf_chars+0x58>
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	d031      	beq.n	8005c1a <_scanf_chars+0xaa>
 8005bb6:	e022      	b.n	8005bfe <_scanf_chars+0x8e>
 8005bb8:	2802      	cmp	r0, #2
 8005bba:	d120      	bne.n	8005bfe <_scanf_chars+0x8e>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005bc4:	071b      	lsls	r3, r3, #28
 8005bc6:	d41a      	bmi.n	8005bfe <_scanf_chars+0x8e>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	06da      	lsls	r2, r3, #27
 8005bcc:	bf5e      	ittt	pl
 8005bce:	682b      	ldrpl	r3, [r5, #0]
 8005bd0:	781b      	ldrbpl	r3, [r3, #0]
 8005bd2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005bd6:	682a      	ldr	r2, [r5, #0]
 8005bd8:	686b      	ldr	r3, [r5, #4]
 8005bda:	3201      	adds	r2, #1
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	68a2      	ldr	r2, [r4, #8]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	3a01      	subs	r2, #1
 8005be4:	606b      	str	r3, [r5, #4]
 8005be6:	3701      	adds	r7, #1
 8005be8:	60a2      	str	r2, [r4, #8]
 8005bea:	b142      	cbz	r2, 8005bfe <_scanf_chars+0x8e>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dcd7      	bgt.n	8005ba0 <_scanf_chars+0x30>
 8005bf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	4798      	blx	r3
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d0d0      	beq.n	8005ba0 <_scanf_chars+0x30>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f013 0310 	ands.w	r3, r3, #16
 8005c04:	d105      	bne.n	8005c12 <_scanf_chars+0xa2>
 8005c06:	68e2      	ldr	r2, [r4, #12]
 8005c08:	3201      	adds	r2, #1
 8005c0a:	60e2      	str	r2, [r4, #12]
 8005c0c:	69a2      	ldr	r2, [r4, #24]
 8005c0e:	b102      	cbz	r2, 8005c12 <_scanf_chars+0xa2>
 8005c10:	7033      	strb	r3, [r6, #0]
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	443b      	add	r3, r7
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c1e:	bf00      	nop
 8005c20:	08006c8d 	.word	0x08006c8d

08005c24 <_scanf_i>:
 8005c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	4698      	mov	r8, r3
 8005c2a:	4b74      	ldr	r3, [pc, #464]	; (8005dfc <_scanf_i+0x1d8>)
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	4682      	mov	sl, r0
 8005c30:	4616      	mov	r6, r2
 8005c32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c36:	b087      	sub	sp, #28
 8005c38:	ab03      	add	r3, sp, #12
 8005c3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c3e:	4b70      	ldr	r3, [pc, #448]	; (8005e00 <_scanf_i+0x1dc>)
 8005c40:	69a1      	ldr	r1, [r4, #24]
 8005c42:	4a70      	ldr	r2, [pc, #448]	; (8005e04 <_scanf_i+0x1e0>)
 8005c44:	2903      	cmp	r1, #3
 8005c46:	bf18      	it	ne
 8005c48:	461a      	movne	r2, r3
 8005c4a:	68a3      	ldr	r3, [r4, #8]
 8005c4c:	9201      	str	r2, [sp, #4]
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c54:	bf88      	it	hi
 8005c56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c5a:	4627      	mov	r7, r4
 8005c5c:	bf82      	ittt	hi
 8005c5e:	eb03 0905 	addhi.w	r9, r3, r5
 8005c62:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c66:	60a3      	strhi	r3, [r4, #8]
 8005c68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005c6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005c70:	bf98      	it	ls
 8005c72:	f04f 0900 	movls.w	r9, #0
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	463d      	mov	r5, r7
 8005c7a:	f04f 0b00 	mov.w	fp, #0
 8005c7e:	6831      	ldr	r1, [r6, #0]
 8005c80:	ab03      	add	r3, sp, #12
 8005c82:	7809      	ldrb	r1, [r1, #0]
 8005c84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f7fa faa9 	bl	80001e0 <memchr>
 8005c8e:	b328      	cbz	r0, 8005cdc <_scanf_i+0xb8>
 8005c90:	f1bb 0f01 	cmp.w	fp, #1
 8005c94:	d159      	bne.n	8005d4a <_scanf_i+0x126>
 8005c96:	6862      	ldr	r2, [r4, #4]
 8005c98:	b92a      	cbnz	r2, 8005ca6 <_scanf_i+0x82>
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca2:	6063      	str	r3, [r4, #4]
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	68a2      	ldr	r2, [r4, #8]
 8005cb0:	1e51      	subs	r1, r2, #1
 8005cb2:	60a1      	str	r1, [r4, #8]
 8005cb4:	b192      	cbz	r2, 8005cdc <_scanf_i+0xb8>
 8005cb6:	6832      	ldr	r2, [r6, #0]
 8005cb8:	1c51      	adds	r1, r2, #1
 8005cba:	6031      	str	r1, [r6, #0]
 8005cbc:	7812      	ldrb	r2, [r2, #0]
 8005cbe:	f805 2b01 	strb.w	r2, [r5], #1
 8005cc2:	6872      	ldr	r2, [r6, #4]
 8005cc4:	3a01      	subs	r2, #1
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	6072      	str	r2, [r6, #4]
 8005cca:	dc07      	bgt.n	8005cdc <_scanf_i+0xb8>
 8005ccc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4650      	mov	r0, sl
 8005cd4:	4790      	blx	r2
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f040 8085 	bne.w	8005de6 <_scanf_i+0x1c2>
 8005cdc:	f10b 0b01 	add.w	fp, fp, #1
 8005ce0:	f1bb 0f03 	cmp.w	fp, #3
 8005ce4:	d1cb      	bne.n	8005c7e <_scanf_i+0x5a>
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	b90b      	cbnz	r3, 8005cee <_scanf_i+0xca>
 8005cea:	230a      	movs	r3, #10
 8005cec:	6063      	str	r3, [r4, #4]
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	4945      	ldr	r1, [pc, #276]	; (8005e08 <_scanf_i+0x1e4>)
 8005cf2:	6960      	ldr	r0, [r4, #20]
 8005cf4:	1ac9      	subs	r1, r1, r3
 8005cf6:	f000 f949 	bl	8005f8c <__sccl>
 8005cfa:	f04f 0b00 	mov.w	fp, #0
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d03d      	beq.n	8005d82 <_scanf_i+0x15e>
 8005d06:	6831      	ldr	r1, [r6, #0]
 8005d08:	6960      	ldr	r0, [r4, #20]
 8005d0a:	f891 c000 	ldrb.w	ip, [r1]
 8005d0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d035      	beq.n	8005d82 <_scanf_i+0x15e>
 8005d16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005d1a:	d124      	bne.n	8005d66 <_scanf_i+0x142>
 8005d1c:	0510      	lsls	r0, r2, #20
 8005d1e:	d522      	bpl.n	8005d66 <_scanf_i+0x142>
 8005d20:	f10b 0b01 	add.w	fp, fp, #1
 8005d24:	f1b9 0f00 	cmp.w	r9, #0
 8005d28:	d003      	beq.n	8005d32 <_scanf_i+0x10e>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	6873      	ldr	r3, [r6, #4]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	6073      	str	r3, [r6, #4]
 8005d3a:	dd1b      	ble.n	8005d74 <_scanf_i+0x150>
 8005d3c:	6833      	ldr	r3, [r6, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6033      	str	r3, [r6, #0]
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	60a3      	str	r3, [r4, #8]
 8005d48:	e7d9      	b.n	8005cfe <_scanf_i+0xda>
 8005d4a:	f1bb 0f02 	cmp.w	fp, #2
 8005d4e:	d1ae      	bne.n	8005cae <_scanf_i+0x8a>
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005d56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005d5a:	d1bf      	bne.n	8005cdc <_scanf_i+0xb8>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d64:	e7a2      	b.n	8005cac <_scanf_i+0x88>
 8005d66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005d6a:	6022      	str	r2, [r4, #0]
 8005d6c:	780b      	ldrb	r3, [r1, #0]
 8005d6e:	f805 3b01 	strb.w	r3, [r5], #1
 8005d72:	e7de      	b.n	8005d32 <_scanf_i+0x10e>
 8005d74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4650      	mov	r0, sl
 8005d7c:	4798      	blx	r3
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d0df      	beq.n	8005d42 <_scanf_i+0x11e>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	05d9      	lsls	r1, r3, #23
 8005d86:	d50d      	bpl.n	8005da4 <_scanf_i+0x180>
 8005d88:	42bd      	cmp	r5, r7
 8005d8a:	d909      	bls.n	8005da0 <_scanf_i+0x17c>
 8005d8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d94:	4632      	mov	r2, r6
 8005d96:	4650      	mov	r0, sl
 8005d98:	4798      	blx	r3
 8005d9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005d9e:	464d      	mov	r5, r9
 8005da0:	42bd      	cmp	r5, r7
 8005da2:	d028      	beq.n	8005df6 <_scanf_i+0x1d2>
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	f012 0210 	ands.w	r2, r2, #16
 8005daa:	d113      	bne.n	8005dd4 <_scanf_i+0x1b0>
 8005dac:	702a      	strb	r2, [r5, #0]
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	9e01      	ldr	r6, [sp, #4]
 8005db2:	4639      	mov	r1, r7
 8005db4:	4650      	mov	r0, sl
 8005db6:	47b0      	blx	r6
 8005db8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dbc:	6821      	ldr	r1, [r4, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	f8c8 2000 	str.w	r2, [r8]
 8005dc4:	f011 0f20 	tst.w	r1, #32
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	d00f      	beq.n	8005dec <_scanf_i+0x1c8>
 8005dcc:	6018      	str	r0, [r3, #0]
 8005dce:	68e3      	ldr	r3, [r4, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60e3      	str	r3, [r4, #12]
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	1bed      	subs	r5, r5, r7
 8005dd8:	445d      	add	r5, fp
 8005dda:	442b      	add	r3, r5
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	2000      	movs	r0, #0
 8005de0:	b007      	add	sp, #28
 8005de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de6:	f04f 0b00 	mov.w	fp, #0
 8005dea:	e7ca      	b.n	8005d82 <_scanf_i+0x15e>
 8005dec:	07ca      	lsls	r2, r1, #31
 8005dee:	bf4c      	ite	mi
 8005df0:	8018      	strhmi	r0, [r3, #0]
 8005df2:	6018      	strpl	r0, [r3, #0]
 8005df4:	e7eb      	b.n	8005dce <_scanf_i+0x1aa>
 8005df6:	2001      	movs	r0, #1
 8005df8:	e7f2      	b.n	8005de0 <_scanf_i+0x1bc>
 8005dfa:	bf00      	nop
 8005dfc:	08006b9c 	.word	0x08006b9c
 8005e00:	08006309 	.word	0x08006309
 8005e04:	08006221 	.word	0x08006221
 8005e08:	08006c81 	.word	0x08006c81

08005e0c <__sflush_r>:
 8005e0c:	898a      	ldrh	r2, [r1, #12]
 8005e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e12:	4605      	mov	r5, r0
 8005e14:	0710      	lsls	r0, r2, #28
 8005e16:	460c      	mov	r4, r1
 8005e18:	d458      	bmi.n	8005ecc <__sflush_r+0xc0>
 8005e1a:	684b      	ldr	r3, [r1, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dc05      	bgt.n	8005e2c <__sflush_r+0x20>
 8005e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	dc02      	bgt.n	8005e2c <__sflush_r+0x20>
 8005e26:	2000      	movs	r0, #0
 8005e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e2e:	2e00      	cmp	r6, #0
 8005e30:	d0f9      	beq.n	8005e26 <__sflush_r+0x1a>
 8005e32:	2300      	movs	r3, #0
 8005e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e38:	682f      	ldr	r7, [r5, #0]
 8005e3a:	6a21      	ldr	r1, [r4, #32]
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	d032      	beq.n	8005ea6 <__sflush_r+0x9a>
 8005e40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	075a      	lsls	r2, r3, #29
 8005e46:	d505      	bpl.n	8005e54 <__sflush_r+0x48>
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	1ac0      	subs	r0, r0, r3
 8005e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e4e:	b10b      	cbz	r3, 8005e54 <__sflush_r+0x48>
 8005e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e52:	1ac0      	subs	r0, r0, r3
 8005e54:	2300      	movs	r3, #0
 8005e56:	4602      	mov	r2, r0
 8005e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e5a:	6a21      	ldr	r1, [r4, #32]
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b0      	blx	r6
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	d106      	bne.n	8005e74 <__sflush_r+0x68>
 8005e66:	6829      	ldr	r1, [r5, #0]
 8005e68:	291d      	cmp	r1, #29
 8005e6a:	d82b      	bhi.n	8005ec4 <__sflush_r+0xb8>
 8005e6c:	4a29      	ldr	r2, [pc, #164]	; (8005f14 <__sflush_r+0x108>)
 8005e6e:	410a      	asrs	r2, r1
 8005e70:	07d6      	lsls	r6, r2, #31
 8005e72:	d427      	bmi.n	8005ec4 <__sflush_r+0xb8>
 8005e74:	2200      	movs	r2, #0
 8005e76:	6062      	str	r2, [r4, #4]
 8005e78:	04d9      	lsls	r1, r3, #19
 8005e7a:	6922      	ldr	r2, [r4, #16]
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	d504      	bpl.n	8005e8a <__sflush_r+0x7e>
 8005e80:	1c42      	adds	r2, r0, #1
 8005e82:	d101      	bne.n	8005e88 <__sflush_r+0x7c>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b903      	cbnz	r3, 8005e8a <__sflush_r+0x7e>
 8005e88:	6560      	str	r0, [r4, #84]	; 0x54
 8005e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e8c:	602f      	str	r7, [r5, #0]
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	d0c9      	beq.n	8005e26 <__sflush_r+0x1a>
 8005e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e96:	4299      	cmp	r1, r3
 8005e98:	d002      	beq.n	8005ea0 <__sflush_r+0x94>
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f7ff fb96 	bl	80055cc <_free_r>
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	6360      	str	r0, [r4, #52]	; 0x34
 8005ea4:	e7c0      	b.n	8005e28 <__sflush_r+0x1c>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b0      	blx	r6
 8005eac:	1c41      	adds	r1, r0, #1
 8005eae:	d1c8      	bne.n	8005e42 <__sflush_r+0x36>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0c5      	beq.n	8005e42 <__sflush_r+0x36>
 8005eb6:	2b1d      	cmp	r3, #29
 8005eb8:	d001      	beq.n	8005ebe <__sflush_r+0xb2>
 8005eba:	2b16      	cmp	r3, #22
 8005ebc:	d101      	bne.n	8005ec2 <__sflush_r+0xb6>
 8005ebe:	602f      	str	r7, [r5, #0]
 8005ec0:	e7b1      	b.n	8005e26 <__sflush_r+0x1a>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	e7ad      	b.n	8005e28 <__sflush_r+0x1c>
 8005ecc:	690f      	ldr	r7, [r1, #16]
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	d0a9      	beq.n	8005e26 <__sflush_r+0x1a>
 8005ed2:	0793      	lsls	r3, r2, #30
 8005ed4:	680e      	ldr	r6, [r1, #0]
 8005ed6:	bf08      	it	eq
 8005ed8:	694b      	ldreq	r3, [r1, #20]
 8005eda:	600f      	str	r7, [r1, #0]
 8005edc:	bf18      	it	ne
 8005ede:	2300      	movne	r3, #0
 8005ee0:	eba6 0807 	sub.w	r8, r6, r7
 8005ee4:	608b      	str	r3, [r1, #8]
 8005ee6:	f1b8 0f00 	cmp.w	r8, #0
 8005eea:	dd9c      	ble.n	8005e26 <__sflush_r+0x1a>
 8005eec:	6a21      	ldr	r1, [r4, #32]
 8005eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ef0:	4643      	mov	r3, r8
 8005ef2:	463a      	mov	r2, r7
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b0      	blx	r6
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	dc06      	bgt.n	8005f0a <__sflush_r+0xfe>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e78e      	b.n	8005e28 <__sflush_r+0x1c>
 8005f0a:	4407      	add	r7, r0
 8005f0c:	eba8 0800 	sub.w	r8, r8, r0
 8005f10:	e7e9      	b.n	8005ee6 <__sflush_r+0xda>
 8005f12:	bf00      	nop
 8005f14:	dfbffffe 	.word	0xdfbffffe

08005f18 <_fflush_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	690b      	ldr	r3, [r1, #16]
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	b913      	cbnz	r3, 8005f28 <_fflush_r+0x10>
 8005f22:	2500      	movs	r5, #0
 8005f24:	4628      	mov	r0, r5
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	b118      	cbz	r0, 8005f32 <_fflush_r+0x1a>
 8005f2a:	6a03      	ldr	r3, [r0, #32]
 8005f2c:	b90b      	cbnz	r3, 8005f32 <_fflush_r+0x1a>
 8005f2e:	f7ff f9af 	bl	8005290 <__sinit>
 8005f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f3      	beq.n	8005f22 <_fflush_r+0xa>
 8005f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f3c:	07d0      	lsls	r0, r2, #31
 8005f3e:	d404      	bmi.n	8005f4a <_fflush_r+0x32>
 8005f40:	0599      	lsls	r1, r3, #22
 8005f42:	d402      	bmi.n	8005f4a <_fflush_r+0x32>
 8005f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f46:	f7ff fb20 	bl	800558a <__retarget_lock_acquire_recursive>
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	f7ff ff5d 	bl	8005e0c <__sflush_r>
 8005f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f54:	07da      	lsls	r2, r3, #31
 8005f56:	4605      	mov	r5, r0
 8005f58:	d4e4      	bmi.n	8005f24 <_fflush_r+0xc>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	059b      	lsls	r3, r3, #22
 8005f5e:	d4e1      	bmi.n	8005f24 <_fflush_r+0xc>
 8005f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f62:	f7ff fb13 	bl	800558c <__retarget_lock_release_recursive>
 8005f66:	e7dd      	b.n	8005f24 <_fflush_r+0xc>

08005f68 <fiprintf>:
 8005f68:	b40e      	push	{r1, r2, r3}
 8005f6a:	b503      	push	{r0, r1, lr}
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	ab03      	add	r3, sp, #12
 8005f70:	4805      	ldr	r0, [pc, #20]	; (8005f88 <fiprintf+0x20>)
 8005f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f76:	6800      	ldr	r0, [r0, #0]
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	f000 f9f1 	bl	8006360 <_vfiprintf_r>
 8005f7e:	b002      	add	sp, #8
 8005f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f84:	b003      	add	sp, #12
 8005f86:	4770      	bx	lr
 8005f88:	20000068 	.word	0x20000068

08005f8c <__sccl>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	780b      	ldrb	r3, [r1, #0]
 8005f90:	4604      	mov	r4, r0
 8005f92:	2b5e      	cmp	r3, #94	; 0x5e
 8005f94:	bf0b      	itete	eq
 8005f96:	784b      	ldrbeq	r3, [r1, #1]
 8005f98:	1c4a      	addne	r2, r1, #1
 8005f9a:	1c8a      	addeq	r2, r1, #2
 8005f9c:	2100      	movne	r1, #0
 8005f9e:	bf08      	it	eq
 8005fa0:	2101      	moveq	r1, #1
 8005fa2:	3801      	subs	r0, #1
 8005fa4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005fa8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005fac:	42a8      	cmp	r0, r5
 8005fae:	d1fb      	bne.n	8005fa8 <__sccl+0x1c>
 8005fb0:	b90b      	cbnz	r3, 8005fb6 <__sccl+0x2a>
 8005fb2:	1e50      	subs	r0, r2, #1
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
 8005fb6:	f081 0101 	eor.w	r1, r1, #1
 8005fba:	54e1      	strb	r1, [r4, r3]
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005fc4:	2d2d      	cmp	r5, #45	; 0x2d
 8005fc6:	d005      	beq.n	8005fd4 <__sccl+0x48>
 8005fc8:	2d5d      	cmp	r5, #93	; 0x5d
 8005fca:	d016      	beq.n	8005ffa <__sccl+0x6e>
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	d0f1      	beq.n	8005fb4 <__sccl+0x28>
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	e7f2      	b.n	8005fba <__sccl+0x2e>
 8005fd4:	7846      	ldrb	r6, [r0, #1]
 8005fd6:	2e5d      	cmp	r6, #93	; 0x5d
 8005fd8:	d0fa      	beq.n	8005fd0 <__sccl+0x44>
 8005fda:	42b3      	cmp	r3, r6
 8005fdc:	dcf8      	bgt.n	8005fd0 <__sccl+0x44>
 8005fde:	3002      	adds	r0, #2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	3201      	adds	r2, #1
 8005fe4:	4296      	cmp	r6, r2
 8005fe6:	54a1      	strb	r1, [r4, r2]
 8005fe8:	dcfb      	bgt.n	8005fe2 <__sccl+0x56>
 8005fea:	1af2      	subs	r2, r6, r3
 8005fec:	3a01      	subs	r2, #1
 8005fee:	1c5d      	adds	r5, r3, #1
 8005ff0:	42b3      	cmp	r3, r6
 8005ff2:	bfa8      	it	ge
 8005ff4:	2200      	movge	r2, #0
 8005ff6:	18ab      	adds	r3, r5, r2
 8005ff8:	e7e1      	b.n	8005fbe <__sccl+0x32>
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	e7da      	b.n	8005fb4 <__sccl+0x28>

08005ffe <__submore>:
 8005ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	460c      	mov	r4, r1
 8006004:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800600a:	4299      	cmp	r1, r3
 800600c:	d11d      	bne.n	800604a <__submore+0x4c>
 800600e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006012:	f7ff fb4f 	bl	80056b4 <_malloc_r>
 8006016:	b918      	cbnz	r0, 8006020 <__submore+0x22>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006024:	63a3      	str	r3, [r4, #56]	; 0x38
 8006026:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800602a:	6360      	str	r0, [r4, #52]	; 0x34
 800602c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006030:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006034:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006038:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800603c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006040:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006044:	6020      	str	r0, [r4, #0]
 8006046:	2000      	movs	r0, #0
 8006048:	e7e8      	b.n	800601c <__submore+0x1e>
 800604a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800604c:	0077      	lsls	r7, r6, #1
 800604e:	463a      	mov	r2, r7
 8006050:	f000 f835 	bl	80060be <_realloc_r>
 8006054:	4605      	mov	r5, r0
 8006056:	2800      	cmp	r0, #0
 8006058:	d0de      	beq.n	8006018 <__submore+0x1a>
 800605a:	eb00 0806 	add.w	r8, r0, r6
 800605e:	4601      	mov	r1, r0
 8006060:	4632      	mov	r2, r6
 8006062:	4640      	mov	r0, r8
 8006064:	f000 f816 	bl	8006094 <memcpy>
 8006068:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800606c:	f8c4 8000 	str.w	r8, [r4]
 8006070:	e7e9      	b.n	8006046 <__submore+0x48>
	...

08006074 <_sbrk_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4d06      	ldr	r5, [pc, #24]	; (8006090 <_sbrk_r+0x1c>)
 8006078:	2300      	movs	r3, #0
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	602b      	str	r3, [r5, #0]
 8006080:	f7fb ffae 	bl	8001fe0 <_sbrk>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_sbrk_r+0x1a>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_sbrk_r+0x1a>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	200001d4 	.word	0x200001d4

08006094 <memcpy>:
 8006094:	440a      	add	r2, r1
 8006096:	4291      	cmp	r1, r2
 8006098:	f100 33ff 	add.w	r3, r0, #4294967295
 800609c:	d100      	bne.n	80060a0 <memcpy+0xc>
 800609e:	4770      	bx	lr
 80060a0:	b510      	push	{r4, lr}
 80060a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060aa:	4291      	cmp	r1, r2
 80060ac:	d1f9      	bne.n	80060a2 <memcpy+0xe>
 80060ae:	bd10      	pop	{r4, pc}

080060b0 <abort>:
 80060b0:	b508      	push	{r3, lr}
 80060b2:	2006      	movs	r0, #6
 80060b4:	f000 fcbc 	bl	8006a30 <raise>
 80060b8:	2001      	movs	r0, #1
 80060ba:	f7fb ff19 	bl	8001ef0 <_exit>

080060be <_realloc_r>:
 80060be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	4680      	mov	r8, r0
 80060c4:	4614      	mov	r4, r2
 80060c6:	460e      	mov	r6, r1
 80060c8:	b921      	cbnz	r1, 80060d4 <_realloc_r+0x16>
 80060ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ce:	4611      	mov	r1, r2
 80060d0:	f7ff baf0 	b.w	80056b4 <_malloc_r>
 80060d4:	b92a      	cbnz	r2, 80060e2 <_realloc_r+0x24>
 80060d6:	f7ff fa79 	bl	80055cc <_free_r>
 80060da:	4625      	mov	r5, r4
 80060dc:	4628      	mov	r0, r5
 80060de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e2:	f000 fcc1 	bl	8006a68 <_malloc_usable_size_r>
 80060e6:	4284      	cmp	r4, r0
 80060e8:	4607      	mov	r7, r0
 80060ea:	d802      	bhi.n	80060f2 <_realloc_r+0x34>
 80060ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060f0:	d812      	bhi.n	8006118 <_realloc_r+0x5a>
 80060f2:	4621      	mov	r1, r4
 80060f4:	4640      	mov	r0, r8
 80060f6:	f7ff fadd 	bl	80056b4 <_malloc_r>
 80060fa:	4605      	mov	r5, r0
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d0ed      	beq.n	80060dc <_realloc_r+0x1e>
 8006100:	42bc      	cmp	r4, r7
 8006102:	4622      	mov	r2, r4
 8006104:	4631      	mov	r1, r6
 8006106:	bf28      	it	cs
 8006108:	463a      	movcs	r2, r7
 800610a:	f7ff ffc3 	bl	8006094 <memcpy>
 800610e:	4631      	mov	r1, r6
 8006110:	4640      	mov	r0, r8
 8006112:	f7ff fa5b 	bl	80055cc <_free_r>
 8006116:	e7e1      	b.n	80060dc <_realloc_r+0x1e>
 8006118:	4635      	mov	r5, r6
 800611a:	e7df      	b.n	80060dc <_realloc_r+0x1e>

0800611c <_strtol_l.constprop.0>:
 800611c:	2b01      	cmp	r3, #1
 800611e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006122:	d001      	beq.n	8006128 <_strtol_l.constprop.0+0xc>
 8006124:	2b24      	cmp	r3, #36	; 0x24
 8006126:	d906      	bls.n	8006136 <_strtol_l.constprop.0+0x1a>
 8006128:	f7ff fa04 	bl	8005534 <__errno>
 800612c:	2316      	movs	r3, #22
 800612e:	6003      	str	r3, [r0, #0]
 8006130:	2000      	movs	r0, #0
 8006132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006136:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800621c <_strtol_l.constprop.0+0x100>
 800613a:	460d      	mov	r5, r1
 800613c:	462e      	mov	r6, r5
 800613e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006142:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006146:	f017 0708 	ands.w	r7, r7, #8
 800614a:	d1f7      	bne.n	800613c <_strtol_l.constprop.0+0x20>
 800614c:	2c2d      	cmp	r4, #45	; 0x2d
 800614e:	d132      	bne.n	80061b6 <_strtol_l.constprop.0+0x9a>
 8006150:	782c      	ldrb	r4, [r5, #0]
 8006152:	2701      	movs	r7, #1
 8006154:	1cb5      	adds	r5, r6, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d05b      	beq.n	8006212 <_strtol_l.constprop.0+0xf6>
 800615a:	2b10      	cmp	r3, #16
 800615c:	d109      	bne.n	8006172 <_strtol_l.constprop.0+0x56>
 800615e:	2c30      	cmp	r4, #48	; 0x30
 8006160:	d107      	bne.n	8006172 <_strtol_l.constprop.0+0x56>
 8006162:	782c      	ldrb	r4, [r5, #0]
 8006164:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006168:	2c58      	cmp	r4, #88	; 0x58
 800616a:	d14d      	bne.n	8006208 <_strtol_l.constprop.0+0xec>
 800616c:	786c      	ldrb	r4, [r5, #1]
 800616e:	2310      	movs	r3, #16
 8006170:	3502      	adds	r5, #2
 8006172:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006176:	f108 38ff 	add.w	r8, r8, #4294967295
 800617a:	f04f 0e00 	mov.w	lr, #0
 800617e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006182:	4676      	mov	r6, lr
 8006184:	fb03 8a19 	mls	sl, r3, r9, r8
 8006188:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800618c:	f1bc 0f09 	cmp.w	ip, #9
 8006190:	d816      	bhi.n	80061c0 <_strtol_l.constprop.0+0xa4>
 8006192:	4664      	mov	r4, ip
 8006194:	42a3      	cmp	r3, r4
 8006196:	dd24      	ble.n	80061e2 <_strtol_l.constprop.0+0xc6>
 8006198:	f1be 3fff 	cmp.w	lr, #4294967295
 800619c:	d008      	beq.n	80061b0 <_strtol_l.constprop.0+0x94>
 800619e:	45b1      	cmp	r9, r6
 80061a0:	d31c      	bcc.n	80061dc <_strtol_l.constprop.0+0xc0>
 80061a2:	d101      	bne.n	80061a8 <_strtol_l.constprop.0+0x8c>
 80061a4:	45a2      	cmp	sl, r4
 80061a6:	db19      	blt.n	80061dc <_strtol_l.constprop.0+0xc0>
 80061a8:	fb06 4603 	mla	r6, r6, r3, r4
 80061ac:	f04f 0e01 	mov.w	lr, #1
 80061b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061b4:	e7e8      	b.n	8006188 <_strtol_l.constprop.0+0x6c>
 80061b6:	2c2b      	cmp	r4, #43	; 0x2b
 80061b8:	bf04      	itt	eq
 80061ba:	782c      	ldrbeq	r4, [r5, #0]
 80061bc:	1cb5      	addeq	r5, r6, #2
 80061be:	e7ca      	b.n	8006156 <_strtol_l.constprop.0+0x3a>
 80061c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80061c4:	f1bc 0f19 	cmp.w	ip, #25
 80061c8:	d801      	bhi.n	80061ce <_strtol_l.constprop.0+0xb2>
 80061ca:	3c37      	subs	r4, #55	; 0x37
 80061cc:	e7e2      	b.n	8006194 <_strtol_l.constprop.0+0x78>
 80061ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80061d2:	f1bc 0f19 	cmp.w	ip, #25
 80061d6:	d804      	bhi.n	80061e2 <_strtol_l.constprop.0+0xc6>
 80061d8:	3c57      	subs	r4, #87	; 0x57
 80061da:	e7db      	b.n	8006194 <_strtol_l.constprop.0+0x78>
 80061dc:	f04f 3eff 	mov.w	lr, #4294967295
 80061e0:	e7e6      	b.n	80061b0 <_strtol_l.constprop.0+0x94>
 80061e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80061e6:	d105      	bne.n	80061f4 <_strtol_l.constprop.0+0xd8>
 80061e8:	2322      	movs	r3, #34	; 0x22
 80061ea:	6003      	str	r3, [r0, #0]
 80061ec:	4646      	mov	r6, r8
 80061ee:	b942      	cbnz	r2, 8006202 <_strtol_l.constprop.0+0xe6>
 80061f0:	4630      	mov	r0, r6
 80061f2:	e79e      	b.n	8006132 <_strtol_l.constprop.0+0x16>
 80061f4:	b107      	cbz	r7, 80061f8 <_strtol_l.constprop.0+0xdc>
 80061f6:	4276      	negs	r6, r6
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	d0f9      	beq.n	80061f0 <_strtol_l.constprop.0+0xd4>
 80061fc:	f1be 0f00 	cmp.w	lr, #0
 8006200:	d000      	beq.n	8006204 <_strtol_l.constprop.0+0xe8>
 8006202:	1e69      	subs	r1, r5, #1
 8006204:	6011      	str	r1, [r2, #0]
 8006206:	e7f3      	b.n	80061f0 <_strtol_l.constprop.0+0xd4>
 8006208:	2430      	movs	r4, #48	; 0x30
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1b1      	bne.n	8006172 <_strtol_l.constprop.0+0x56>
 800620e:	2308      	movs	r3, #8
 8006210:	e7af      	b.n	8006172 <_strtol_l.constprop.0+0x56>
 8006212:	2c30      	cmp	r4, #48	; 0x30
 8006214:	d0a5      	beq.n	8006162 <_strtol_l.constprop.0+0x46>
 8006216:	230a      	movs	r3, #10
 8006218:	e7ab      	b.n	8006172 <_strtol_l.constprop.0+0x56>
 800621a:	bf00      	nop
 800621c:	08006c8d 	.word	0x08006c8d

08006220 <_strtol_r>:
 8006220:	f7ff bf7c 	b.w	800611c <_strtol_l.constprop.0>

08006224 <_strtoul_l.constprop.0>:
 8006224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006228:	4f36      	ldr	r7, [pc, #216]	; (8006304 <_strtoul_l.constprop.0+0xe0>)
 800622a:	4686      	mov	lr, r0
 800622c:	460d      	mov	r5, r1
 800622e:	4628      	mov	r0, r5
 8006230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006234:	5d3e      	ldrb	r6, [r7, r4]
 8006236:	f016 0608 	ands.w	r6, r6, #8
 800623a:	d1f8      	bne.n	800622e <_strtoul_l.constprop.0+0xa>
 800623c:	2c2d      	cmp	r4, #45	; 0x2d
 800623e:	d130      	bne.n	80062a2 <_strtoul_l.constprop.0+0x7e>
 8006240:	782c      	ldrb	r4, [r5, #0]
 8006242:	2601      	movs	r6, #1
 8006244:	1c85      	adds	r5, r0, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d057      	beq.n	80062fa <_strtoul_l.constprop.0+0xd6>
 800624a:	2b10      	cmp	r3, #16
 800624c:	d109      	bne.n	8006262 <_strtoul_l.constprop.0+0x3e>
 800624e:	2c30      	cmp	r4, #48	; 0x30
 8006250:	d107      	bne.n	8006262 <_strtoul_l.constprop.0+0x3e>
 8006252:	7828      	ldrb	r0, [r5, #0]
 8006254:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006258:	2858      	cmp	r0, #88	; 0x58
 800625a:	d149      	bne.n	80062f0 <_strtoul_l.constprop.0+0xcc>
 800625c:	786c      	ldrb	r4, [r5, #1]
 800625e:	2310      	movs	r3, #16
 8006260:	3502      	adds	r5, #2
 8006262:	f04f 38ff 	mov.w	r8, #4294967295
 8006266:	2700      	movs	r7, #0
 8006268:	fbb8 f8f3 	udiv	r8, r8, r3
 800626c:	fb03 f908 	mul.w	r9, r3, r8
 8006270:	ea6f 0909 	mvn.w	r9, r9
 8006274:	4638      	mov	r0, r7
 8006276:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800627a:	f1bc 0f09 	cmp.w	ip, #9
 800627e:	d815      	bhi.n	80062ac <_strtoul_l.constprop.0+0x88>
 8006280:	4664      	mov	r4, ip
 8006282:	42a3      	cmp	r3, r4
 8006284:	dd23      	ble.n	80062ce <_strtoul_l.constprop.0+0xaa>
 8006286:	f1b7 3fff 	cmp.w	r7, #4294967295
 800628a:	d007      	beq.n	800629c <_strtoul_l.constprop.0+0x78>
 800628c:	4580      	cmp	r8, r0
 800628e:	d31b      	bcc.n	80062c8 <_strtoul_l.constprop.0+0xa4>
 8006290:	d101      	bne.n	8006296 <_strtoul_l.constprop.0+0x72>
 8006292:	45a1      	cmp	r9, r4
 8006294:	db18      	blt.n	80062c8 <_strtoul_l.constprop.0+0xa4>
 8006296:	fb00 4003 	mla	r0, r0, r3, r4
 800629a:	2701      	movs	r7, #1
 800629c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062a0:	e7e9      	b.n	8006276 <_strtoul_l.constprop.0+0x52>
 80062a2:	2c2b      	cmp	r4, #43	; 0x2b
 80062a4:	bf04      	itt	eq
 80062a6:	782c      	ldrbeq	r4, [r5, #0]
 80062a8:	1c85      	addeq	r5, r0, #2
 80062aa:	e7cc      	b.n	8006246 <_strtoul_l.constprop.0+0x22>
 80062ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062b0:	f1bc 0f19 	cmp.w	ip, #25
 80062b4:	d801      	bhi.n	80062ba <_strtoul_l.constprop.0+0x96>
 80062b6:	3c37      	subs	r4, #55	; 0x37
 80062b8:	e7e3      	b.n	8006282 <_strtoul_l.constprop.0+0x5e>
 80062ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80062be:	f1bc 0f19 	cmp.w	ip, #25
 80062c2:	d804      	bhi.n	80062ce <_strtoul_l.constprop.0+0xaa>
 80062c4:	3c57      	subs	r4, #87	; 0x57
 80062c6:	e7dc      	b.n	8006282 <_strtoul_l.constprop.0+0x5e>
 80062c8:	f04f 37ff 	mov.w	r7, #4294967295
 80062cc:	e7e6      	b.n	800629c <_strtoul_l.constprop.0+0x78>
 80062ce:	1c7b      	adds	r3, r7, #1
 80062d0:	d106      	bne.n	80062e0 <_strtoul_l.constprop.0+0xbc>
 80062d2:	2322      	movs	r3, #34	; 0x22
 80062d4:	f8ce 3000 	str.w	r3, [lr]
 80062d8:	4638      	mov	r0, r7
 80062da:	b932      	cbnz	r2, 80062ea <_strtoul_l.constprop.0+0xc6>
 80062dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062e0:	b106      	cbz	r6, 80062e4 <_strtoul_l.constprop.0+0xc0>
 80062e2:	4240      	negs	r0, r0
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	d0f9      	beq.n	80062dc <_strtoul_l.constprop.0+0xb8>
 80062e8:	b107      	cbz	r7, 80062ec <_strtoul_l.constprop.0+0xc8>
 80062ea:	1e69      	subs	r1, r5, #1
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	e7f5      	b.n	80062dc <_strtoul_l.constprop.0+0xb8>
 80062f0:	2430      	movs	r4, #48	; 0x30
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1b5      	bne.n	8006262 <_strtoul_l.constprop.0+0x3e>
 80062f6:	2308      	movs	r3, #8
 80062f8:	e7b3      	b.n	8006262 <_strtoul_l.constprop.0+0x3e>
 80062fa:	2c30      	cmp	r4, #48	; 0x30
 80062fc:	d0a9      	beq.n	8006252 <_strtoul_l.constprop.0+0x2e>
 80062fe:	230a      	movs	r3, #10
 8006300:	e7af      	b.n	8006262 <_strtoul_l.constprop.0+0x3e>
 8006302:	bf00      	nop
 8006304:	08006c8d 	.word	0x08006c8d

08006308 <_strtoul_r>:
 8006308:	f7ff bf8c 	b.w	8006224 <_strtoul_l.constprop.0>

0800630c <__sfputc_r>:
 800630c:	6893      	ldr	r3, [r2, #8]
 800630e:	3b01      	subs	r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	b410      	push	{r4}
 8006314:	6093      	str	r3, [r2, #8]
 8006316:	da08      	bge.n	800632a <__sfputc_r+0x1e>
 8006318:	6994      	ldr	r4, [r2, #24]
 800631a:	42a3      	cmp	r3, r4
 800631c:	db01      	blt.n	8006322 <__sfputc_r+0x16>
 800631e:	290a      	cmp	r1, #10
 8006320:	d103      	bne.n	800632a <__sfputc_r+0x1e>
 8006322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006326:	f000 bac5 	b.w	80068b4 <__swbuf_r>
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	1c58      	adds	r0, r3, #1
 800632e:	6010      	str	r0, [r2, #0]
 8006330:	7019      	strb	r1, [r3, #0]
 8006332:	4608      	mov	r0, r1
 8006334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006338:	4770      	bx	lr

0800633a <__sfputs_r>:
 800633a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633c:	4606      	mov	r6, r0
 800633e:	460f      	mov	r7, r1
 8006340:	4614      	mov	r4, r2
 8006342:	18d5      	adds	r5, r2, r3
 8006344:	42ac      	cmp	r4, r5
 8006346:	d101      	bne.n	800634c <__sfputs_r+0x12>
 8006348:	2000      	movs	r0, #0
 800634a:	e007      	b.n	800635c <__sfputs_r+0x22>
 800634c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006350:	463a      	mov	r2, r7
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ffda 	bl	800630c <__sfputc_r>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d1f3      	bne.n	8006344 <__sfputs_r+0xa>
 800635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006360 <_vfiprintf_r>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	460d      	mov	r5, r1
 8006366:	b09d      	sub	sp, #116	; 0x74
 8006368:	4614      	mov	r4, r2
 800636a:	4698      	mov	r8, r3
 800636c:	4606      	mov	r6, r0
 800636e:	b118      	cbz	r0, 8006378 <_vfiprintf_r+0x18>
 8006370:	6a03      	ldr	r3, [r0, #32]
 8006372:	b90b      	cbnz	r3, 8006378 <_vfiprintf_r+0x18>
 8006374:	f7fe ff8c 	bl	8005290 <__sinit>
 8006378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800637a:	07d9      	lsls	r1, r3, #31
 800637c:	d405      	bmi.n	800638a <_vfiprintf_r+0x2a>
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	059a      	lsls	r2, r3, #22
 8006382:	d402      	bmi.n	800638a <_vfiprintf_r+0x2a>
 8006384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006386:	f7ff f900 	bl	800558a <__retarget_lock_acquire_recursive>
 800638a:	89ab      	ldrh	r3, [r5, #12]
 800638c:	071b      	lsls	r3, r3, #28
 800638e:	d501      	bpl.n	8006394 <_vfiprintf_r+0x34>
 8006390:	692b      	ldr	r3, [r5, #16]
 8006392:	b99b      	cbnz	r3, 80063bc <_vfiprintf_r+0x5c>
 8006394:	4629      	mov	r1, r5
 8006396:	4630      	mov	r0, r6
 8006398:	f000 faca 	bl	8006930 <__swsetup_r>
 800639c:	b170      	cbz	r0, 80063bc <_vfiprintf_r+0x5c>
 800639e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063a0:	07dc      	lsls	r4, r3, #31
 80063a2:	d504      	bpl.n	80063ae <_vfiprintf_r+0x4e>
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	b01d      	add	sp, #116	; 0x74
 80063aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	0598      	lsls	r0, r3, #22
 80063b2:	d4f7      	bmi.n	80063a4 <_vfiprintf_r+0x44>
 80063b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063b6:	f7ff f8e9 	bl	800558c <__retarget_lock_release_recursive>
 80063ba:	e7f3      	b.n	80063a4 <_vfiprintf_r+0x44>
 80063bc:	2300      	movs	r3, #0
 80063be:	9309      	str	r3, [sp, #36]	; 0x24
 80063c0:	2320      	movs	r3, #32
 80063c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ca:	2330      	movs	r3, #48	; 0x30
 80063cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006580 <_vfiprintf_r+0x220>
 80063d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063d4:	f04f 0901 	mov.w	r9, #1
 80063d8:	4623      	mov	r3, r4
 80063da:	469a      	mov	sl, r3
 80063dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063e0:	b10a      	cbz	r2, 80063e6 <_vfiprintf_r+0x86>
 80063e2:	2a25      	cmp	r2, #37	; 0x25
 80063e4:	d1f9      	bne.n	80063da <_vfiprintf_r+0x7a>
 80063e6:	ebba 0b04 	subs.w	fp, sl, r4
 80063ea:	d00b      	beq.n	8006404 <_vfiprintf_r+0xa4>
 80063ec:	465b      	mov	r3, fp
 80063ee:	4622      	mov	r2, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff ffa1 	bl	800633a <__sfputs_r>
 80063f8:	3001      	adds	r0, #1
 80063fa:	f000 80a9 	beq.w	8006550 <_vfiprintf_r+0x1f0>
 80063fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006400:	445a      	add	r2, fp
 8006402:	9209      	str	r2, [sp, #36]	; 0x24
 8006404:	f89a 3000 	ldrb.w	r3, [sl]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80a1 	beq.w	8006550 <_vfiprintf_r+0x1f0>
 800640e:	2300      	movs	r3, #0
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006418:	f10a 0a01 	add.w	sl, sl, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006424:	931a      	str	r3, [sp, #104]	; 0x68
 8006426:	4654      	mov	r4, sl
 8006428:	2205      	movs	r2, #5
 800642a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642e:	4854      	ldr	r0, [pc, #336]	; (8006580 <_vfiprintf_r+0x220>)
 8006430:	f7f9 fed6 	bl	80001e0 <memchr>
 8006434:	9a04      	ldr	r2, [sp, #16]
 8006436:	b9d8      	cbnz	r0, 8006470 <_vfiprintf_r+0x110>
 8006438:	06d1      	lsls	r1, r2, #27
 800643a:	bf44      	itt	mi
 800643c:	2320      	movmi	r3, #32
 800643e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006442:	0713      	lsls	r3, r2, #28
 8006444:	bf44      	itt	mi
 8006446:	232b      	movmi	r3, #43	; 0x2b
 8006448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800644c:	f89a 3000 	ldrb.w	r3, [sl]
 8006450:	2b2a      	cmp	r3, #42	; 0x2a
 8006452:	d015      	beq.n	8006480 <_vfiprintf_r+0x120>
 8006454:	9a07      	ldr	r2, [sp, #28]
 8006456:	4654      	mov	r4, sl
 8006458:	2000      	movs	r0, #0
 800645a:	f04f 0c0a 	mov.w	ip, #10
 800645e:	4621      	mov	r1, r4
 8006460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006464:	3b30      	subs	r3, #48	; 0x30
 8006466:	2b09      	cmp	r3, #9
 8006468:	d94d      	bls.n	8006506 <_vfiprintf_r+0x1a6>
 800646a:	b1b0      	cbz	r0, 800649a <_vfiprintf_r+0x13a>
 800646c:	9207      	str	r2, [sp, #28]
 800646e:	e014      	b.n	800649a <_vfiprintf_r+0x13a>
 8006470:	eba0 0308 	sub.w	r3, r0, r8
 8006474:	fa09 f303 	lsl.w	r3, r9, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	46a2      	mov	sl, r4
 800647e:	e7d2      	b.n	8006426 <_vfiprintf_r+0xc6>
 8006480:	9b03      	ldr	r3, [sp, #12]
 8006482:	1d19      	adds	r1, r3, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	9103      	str	r1, [sp, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	bfbb      	ittet	lt
 800648c:	425b      	neglt	r3, r3
 800648e:	f042 0202 	orrlt.w	r2, r2, #2
 8006492:	9307      	strge	r3, [sp, #28]
 8006494:	9307      	strlt	r3, [sp, #28]
 8006496:	bfb8      	it	lt
 8006498:	9204      	strlt	r2, [sp, #16]
 800649a:	7823      	ldrb	r3, [r4, #0]
 800649c:	2b2e      	cmp	r3, #46	; 0x2e
 800649e:	d10c      	bne.n	80064ba <_vfiprintf_r+0x15a>
 80064a0:	7863      	ldrb	r3, [r4, #1]
 80064a2:	2b2a      	cmp	r3, #42	; 0x2a
 80064a4:	d134      	bne.n	8006510 <_vfiprintf_r+0x1b0>
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	1d1a      	adds	r2, r3, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	9203      	str	r2, [sp, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bfb8      	it	lt
 80064b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80064b6:	3402      	adds	r4, #2
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006590 <_vfiprintf_r+0x230>
 80064be:	7821      	ldrb	r1, [r4, #0]
 80064c0:	2203      	movs	r2, #3
 80064c2:	4650      	mov	r0, sl
 80064c4:	f7f9 fe8c 	bl	80001e0 <memchr>
 80064c8:	b138      	cbz	r0, 80064da <_vfiprintf_r+0x17a>
 80064ca:	9b04      	ldr	r3, [sp, #16]
 80064cc:	eba0 000a 	sub.w	r0, r0, sl
 80064d0:	2240      	movs	r2, #64	; 0x40
 80064d2:	4082      	lsls	r2, r0
 80064d4:	4313      	orrs	r3, r2
 80064d6:	3401      	adds	r4, #1
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064de:	4829      	ldr	r0, [pc, #164]	; (8006584 <_vfiprintf_r+0x224>)
 80064e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064e4:	2206      	movs	r2, #6
 80064e6:	f7f9 fe7b 	bl	80001e0 <memchr>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d03f      	beq.n	800656e <_vfiprintf_r+0x20e>
 80064ee:	4b26      	ldr	r3, [pc, #152]	; (8006588 <_vfiprintf_r+0x228>)
 80064f0:	bb1b      	cbnz	r3, 800653a <_vfiprintf_r+0x1da>
 80064f2:	9b03      	ldr	r3, [sp, #12]
 80064f4:	3307      	adds	r3, #7
 80064f6:	f023 0307 	bic.w	r3, r3, #7
 80064fa:	3308      	adds	r3, #8
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	443b      	add	r3, r7
 8006502:	9309      	str	r3, [sp, #36]	; 0x24
 8006504:	e768      	b.n	80063d8 <_vfiprintf_r+0x78>
 8006506:	fb0c 3202 	mla	r2, ip, r2, r3
 800650a:	460c      	mov	r4, r1
 800650c:	2001      	movs	r0, #1
 800650e:	e7a6      	b.n	800645e <_vfiprintf_r+0xfe>
 8006510:	2300      	movs	r3, #0
 8006512:	3401      	adds	r4, #1
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	4619      	mov	r1, r3
 8006518:	f04f 0c0a 	mov.w	ip, #10
 800651c:	4620      	mov	r0, r4
 800651e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006522:	3a30      	subs	r2, #48	; 0x30
 8006524:	2a09      	cmp	r2, #9
 8006526:	d903      	bls.n	8006530 <_vfiprintf_r+0x1d0>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0c6      	beq.n	80064ba <_vfiprintf_r+0x15a>
 800652c:	9105      	str	r1, [sp, #20]
 800652e:	e7c4      	b.n	80064ba <_vfiprintf_r+0x15a>
 8006530:	fb0c 2101 	mla	r1, ip, r1, r2
 8006534:	4604      	mov	r4, r0
 8006536:	2301      	movs	r3, #1
 8006538:	e7f0      	b.n	800651c <_vfiprintf_r+0x1bc>
 800653a:	ab03      	add	r3, sp, #12
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	462a      	mov	r2, r5
 8006540:	4b12      	ldr	r3, [pc, #72]	; (800658c <_vfiprintf_r+0x22c>)
 8006542:	a904      	add	r1, sp, #16
 8006544:	4630      	mov	r0, r6
 8006546:	f3af 8000 	nop.w
 800654a:	4607      	mov	r7, r0
 800654c:	1c78      	adds	r0, r7, #1
 800654e:	d1d6      	bne.n	80064fe <_vfiprintf_r+0x19e>
 8006550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006552:	07d9      	lsls	r1, r3, #31
 8006554:	d405      	bmi.n	8006562 <_vfiprintf_r+0x202>
 8006556:	89ab      	ldrh	r3, [r5, #12]
 8006558:	059a      	lsls	r2, r3, #22
 800655a:	d402      	bmi.n	8006562 <_vfiprintf_r+0x202>
 800655c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800655e:	f7ff f815 	bl	800558c <__retarget_lock_release_recursive>
 8006562:	89ab      	ldrh	r3, [r5, #12]
 8006564:	065b      	lsls	r3, r3, #25
 8006566:	f53f af1d 	bmi.w	80063a4 <_vfiprintf_r+0x44>
 800656a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800656c:	e71c      	b.n	80063a8 <_vfiprintf_r+0x48>
 800656e:	ab03      	add	r3, sp, #12
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	462a      	mov	r2, r5
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <_vfiprintf_r+0x22c>)
 8006576:	a904      	add	r1, sp, #16
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f879 	bl	8006670 <_printf_i>
 800657e:	e7e4      	b.n	800654a <_vfiprintf_r+0x1ea>
 8006580:	08006d8d 	.word	0x08006d8d
 8006584:	08006d93 	.word	0x08006d93
 8006588:	00000000 	.word	0x00000000
 800658c:	0800633b 	.word	0x0800633b
 8006590:	08006c6d 	.word	0x08006c6d

08006594 <_printf_common>:
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	4616      	mov	r6, r2
 800659a:	4699      	mov	r9, r3
 800659c:	688a      	ldr	r2, [r1, #8]
 800659e:	690b      	ldr	r3, [r1, #16]
 80065a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bfb8      	it	lt
 80065a8:	4613      	movlt	r3, r2
 80065aa:	6033      	str	r3, [r6, #0]
 80065ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065b0:	4607      	mov	r7, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	b10a      	cbz	r2, 80065ba <_printf_common+0x26>
 80065b6:	3301      	adds	r3, #1
 80065b8:	6033      	str	r3, [r6, #0]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	0699      	lsls	r1, r3, #26
 80065be:	bf42      	ittt	mi
 80065c0:	6833      	ldrmi	r3, [r6, #0]
 80065c2:	3302      	addmi	r3, #2
 80065c4:	6033      	strmi	r3, [r6, #0]
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	f015 0506 	ands.w	r5, r5, #6
 80065cc:	d106      	bne.n	80065dc <_printf_common+0x48>
 80065ce:	f104 0a19 	add.w	sl, r4, #25
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	6832      	ldr	r2, [r6, #0]
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dc26      	bgt.n	800662a <_printf_common+0x96>
 80065dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065e0:	1e13      	subs	r3, r2, #0
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	bf18      	it	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	0692      	lsls	r2, r2, #26
 80065ea:	d42b      	bmi.n	8006644 <_printf_common+0xb0>
 80065ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f0:	4649      	mov	r1, r9
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d01e      	beq.n	8006638 <_printf_common+0xa4>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	6922      	ldr	r2, [r4, #16]
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	2b04      	cmp	r3, #4
 8006604:	bf02      	ittt	eq
 8006606:	68e5      	ldreq	r5, [r4, #12]
 8006608:	6833      	ldreq	r3, [r6, #0]
 800660a:	1aed      	subeq	r5, r5, r3
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	bf0c      	ite	eq
 8006610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006614:	2500      	movne	r5, #0
 8006616:	4293      	cmp	r3, r2
 8006618:	bfc4      	itt	gt
 800661a:	1a9b      	subgt	r3, r3, r2
 800661c:	18ed      	addgt	r5, r5, r3
 800661e:	2600      	movs	r6, #0
 8006620:	341a      	adds	r4, #26
 8006622:	42b5      	cmp	r5, r6
 8006624:	d11a      	bne.n	800665c <_printf_common+0xc8>
 8006626:	2000      	movs	r0, #0
 8006628:	e008      	b.n	800663c <_printf_common+0xa8>
 800662a:	2301      	movs	r3, #1
 800662c:	4652      	mov	r2, sl
 800662e:	4649      	mov	r1, r9
 8006630:	4638      	mov	r0, r7
 8006632:	47c0      	blx	r8
 8006634:	3001      	adds	r0, #1
 8006636:	d103      	bne.n	8006640 <_printf_common+0xac>
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	3501      	adds	r5, #1
 8006642:	e7c6      	b.n	80065d2 <_printf_common+0x3e>
 8006644:	18e1      	adds	r1, r4, r3
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	2030      	movs	r0, #48	; 0x30
 800664a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800664e:	4422      	add	r2, r4
 8006650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006658:	3302      	adds	r3, #2
 800665a:	e7c7      	b.n	80065ec <_printf_common+0x58>
 800665c:	2301      	movs	r3, #1
 800665e:	4622      	mov	r2, r4
 8006660:	4649      	mov	r1, r9
 8006662:	4638      	mov	r0, r7
 8006664:	47c0      	blx	r8
 8006666:	3001      	adds	r0, #1
 8006668:	d0e6      	beq.n	8006638 <_printf_common+0xa4>
 800666a:	3601      	adds	r6, #1
 800666c:	e7d9      	b.n	8006622 <_printf_common+0x8e>
	...

08006670 <_printf_i>:
 8006670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	7e0f      	ldrb	r7, [r1, #24]
 8006676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006678:	2f78      	cmp	r7, #120	; 0x78
 800667a:	4691      	mov	r9, r2
 800667c:	4680      	mov	r8, r0
 800667e:	460c      	mov	r4, r1
 8006680:	469a      	mov	sl, r3
 8006682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006686:	d807      	bhi.n	8006698 <_printf_i+0x28>
 8006688:	2f62      	cmp	r7, #98	; 0x62
 800668a:	d80a      	bhi.n	80066a2 <_printf_i+0x32>
 800668c:	2f00      	cmp	r7, #0
 800668e:	f000 80d4 	beq.w	800683a <_printf_i+0x1ca>
 8006692:	2f58      	cmp	r7, #88	; 0x58
 8006694:	f000 80c0 	beq.w	8006818 <_printf_i+0x1a8>
 8006698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800669c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066a0:	e03a      	b.n	8006718 <_printf_i+0xa8>
 80066a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066a6:	2b15      	cmp	r3, #21
 80066a8:	d8f6      	bhi.n	8006698 <_printf_i+0x28>
 80066aa:	a101      	add	r1, pc, #4	; (adr r1, 80066b0 <_printf_i+0x40>)
 80066ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b0:	08006709 	.word	0x08006709
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	08006699 	.word	0x08006699
 80066bc:	08006699 	.word	0x08006699
 80066c0:	08006699 	.word	0x08006699
 80066c4:	08006699 	.word	0x08006699
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006699 	.word	0x08006699
 80066d0:	08006699 	.word	0x08006699
 80066d4:	08006699 	.word	0x08006699
 80066d8:	08006699 	.word	0x08006699
 80066dc:	08006821 	.word	0x08006821
 80066e0:	08006749 	.word	0x08006749
 80066e4:	080067db 	.word	0x080067db
 80066e8:	08006699 	.word	0x08006699
 80066ec:	08006699 	.word	0x08006699
 80066f0:	08006843 	.word	0x08006843
 80066f4:	08006699 	.word	0x08006699
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006699 	.word	0x08006699
 8006700:	08006699 	.word	0x08006699
 8006704:	080067e3 	.word	0x080067e3
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	602a      	str	r2, [r5, #0]
 8006710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006718:	2301      	movs	r3, #1
 800671a:	e09f      	b.n	800685c <_printf_i+0x1ec>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	0607      	lsls	r7, r0, #24
 8006722:	f103 0104 	add.w	r1, r3, #4
 8006726:	6029      	str	r1, [r5, #0]
 8006728:	d501      	bpl.n	800672e <_printf_i+0xbe>
 800672a:	681e      	ldr	r6, [r3, #0]
 800672c:	e003      	b.n	8006736 <_printf_i+0xc6>
 800672e:	0646      	lsls	r6, r0, #25
 8006730:	d5fb      	bpl.n	800672a <_printf_i+0xba>
 8006732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006736:	2e00      	cmp	r6, #0
 8006738:	da03      	bge.n	8006742 <_printf_i+0xd2>
 800673a:	232d      	movs	r3, #45	; 0x2d
 800673c:	4276      	negs	r6, r6
 800673e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006742:	485a      	ldr	r0, [pc, #360]	; (80068ac <_printf_i+0x23c>)
 8006744:	230a      	movs	r3, #10
 8006746:	e012      	b.n	800676e <_printf_i+0xfe>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	6820      	ldr	r0, [r4, #0]
 800674c:	1d19      	adds	r1, r3, #4
 800674e:	6029      	str	r1, [r5, #0]
 8006750:	0605      	lsls	r5, r0, #24
 8006752:	d501      	bpl.n	8006758 <_printf_i+0xe8>
 8006754:	681e      	ldr	r6, [r3, #0]
 8006756:	e002      	b.n	800675e <_printf_i+0xee>
 8006758:	0641      	lsls	r1, r0, #25
 800675a:	d5fb      	bpl.n	8006754 <_printf_i+0xe4>
 800675c:	881e      	ldrh	r6, [r3, #0]
 800675e:	4853      	ldr	r0, [pc, #332]	; (80068ac <_printf_i+0x23c>)
 8006760:	2f6f      	cmp	r7, #111	; 0x6f
 8006762:	bf0c      	ite	eq
 8006764:	2308      	moveq	r3, #8
 8006766:	230a      	movne	r3, #10
 8006768:	2100      	movs	r1, #0
 800676a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800676e:	6865      	ldr	r5, [r4, #4]
 8006770:	60a5      	str	r5, [r4, #8]
 8006772:	2d00      	cmp	r5, #0
 8006774:	bfa2      	ittt	ge
 8006776:	6821      	ldrge	r1, [r4, #0]
 8006778:	f021 0104 	bicge.w	r1, r1, #4
 800677c:	6021      	strge	r1, [r4, #0]
 800677e:	b90e      	cbnz	r6, 8006784 <_printf_i+0x114>
 8006780:	2d00      	cmp	r5, #0
 8006782:	d04b      	beq.n	800681c <_printf_i+0x1ac>
 8006784:	4615      	mov	r5, r2
 8006786:	fbb6 f1f3 	udiv	r1, r6, r3
 800678a:	fb03 6711 	mls	r7, r3, r1, r6
 800678e:	5dc7      	ldrb	r7, [r0, r7]
 8006790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006794:	4637      	mov	r7, r6
 8006796:	42bb      	cmp	r3, r7
 8006798:	460e      	mov	r6, r1
 800679a:	d9f4      	bls.n	8006786 <_printf_i+0x116>
 800679c:	2b08      	cmp	r3, #8
 800679e:	d10b      	bne.n	80067b8 <_printf_i+0x148>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07de      	lsls	r6, r3, #31
 80067a4:	d508      	bpl.n	80067b8 <_printf_i+0x148>
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	6861      	ldr	r1, [r4, #4]
 80067aa:	4299      	cmp	r1, r3
 80067ac:	bfde      	ittt	le
 80067ae:	2330      	movle	r3, #48	; 0x30
 80067b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067b8:	1b52      	subs	r2, r2, r5
 80067ba:	6122      	str	r2, [r4, #16]
 80067bc:	f8cd a000 	str.w	sl, [sp]
 80067c0:	464b      	mov	r3, r9
 80067c2:	aa03      	add	r2, sp, #12
 80067c4:	4621      	mov	r1, r4
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7ff fee4 	bl	8006594 <_printf_common>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d14a      	bne.n	8006866 <_printf_i+0x1f6>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b004      	add	sp, #16
 80067d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f043 0320 	orr.w	r3, r3, #32
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	4833      	ldr	r0, [pc, #204]	; (80068b0 <_printf_i+0x240>)
 80067e4:	2778      	movs	r7, #120	; 0x78
 80067e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	6829      	ldr	r1, [r5, #0]
 80067ee:	061f      	lsls	r7, r3, #24
 80067f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80067f4:	d402      	bmi.n	80067fc <_printf_i+0x18c>
 80067f6:	065f      	lsls	r7, r3, #25
 80067f8:	bf48      	it	mi
 80067fa:	b2b6      	uxthmi	r6, r6
 80067fc:	07df      	lsls	r7, r3, #31
 80067fe:	bf48      	it	mi
 8006800:	f043 0320 	orrmi.w	r3, r3, #32
 8006804:	6029      	str	r1, [r5, #0]
 8006806:	bf48      	it	mi
 8006808:	6023      	strmi	r3, [r4, #0]
 800680a:	b91e      	cbnz	r6, 8006814 <_printf_i+0x1a4>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	f023 0320 	bic.w	r3, r3, #32
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	2310      	movs	r3, #16
 8006816:	e7a7      	b.n	8006768 <_printf_i+0xf8>
 8006818:	4824      	ldr	r0, [pc, #144]	; (80068ac <_printf_i+0x23c>)
 800681a:	e7e4      	b.n	80067e6 <_printf_i+0x176>
 800681c:	4615      	mov	r5, r2
 800681e:	e7bd      	b.n	800679c <_printf_i+0x12c>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	6826      	ldr	r6, [r4, #0]
 8006824:	6961      	ldr	r1, [r4, #20]
 8006826:	1d18      	adds	r0, r3, #4
 8006828:	6028      	str	r0, [r5, #0]
 800682a:	0635      	lsls	r5, r6, #24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	d501      	bpl.n	8006834 <_printf_i+0x1c4>
 8006830:	6019      	str	r1, [r3, #0]
 8006832:	e002      	b.n	800683a <_printf_i+0x1ca>
 8006834:	0670      	lsls	r0, r6, #25
 8006836:	d5fb      	bpl.n	8006830 <_printf_i+0x1c0>
 8006838:	8019      	strh	r1, [r3, #0]
 800683a:	2300      	movs	r3, #0
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	4615      	mov	r5, r2
 8006840:	e7bc      	b.n	80067bc <_printf_i+0x14c>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	602a      	str	r2, [r5, #0]
 8006848:	681d      	ldr	r5, [r3, #0]
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	2100      	movs	r1, #0
 800684e:	4628      	mov	r0, r5
 8006850:	f7f9 fcc6 	bl	80001e0 <memchr>
 8006854:	b108      	cbz	r0, 800685a <_printf_i+0x1ea>
 8006856:	1b40      	subs	r0, r0, r5
 8006858:	6060      	str	r0, [r4, #4]
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	2300      	movs	r3, #0
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006864:	e7aa      	b.n	80067bc <_printf_i+0x14c>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	462a      	mov	r2, r5
 800686a:	4649      	mov	r1, r9
 800686c:	4640      	mov	r0, r8
 800686e:	47d0      	blx	sl
 8006870:	3001      	adds	r0, #1
 8006872:	d0ad      	beq.n	80067d0 <_printf_i+0x160>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	079b      	lsls	r3, r3, #30
 8006878:	d413      	bmi.n	80068a2 <_printf_i+0x232>
 800687a:	68e0      	ldr	r0, [r4, #12]
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	4298      	cmp	r0, r3
 8006880:	bfb8      	it	lt
 8006882:	4618      	movlt	r0, r3
 8006884:	e7a6      	b.n	80067d4 <_printf_i+0x164>
 8006886:	2301      	movs	r3, #1
 8006888:	4632      	mov	r2, r6
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d09d      	beq.n	80067d0 <_printf_i+0x160>
 8006894:	3501      	adds	r5, #1
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	9903      	ldr	r1, [sp, #12]
 800689a:	1a5b      	subs	r3, r3, r1
 800689c:	42ab      	cmp	r3, r5
 800689e:	dcf2      	bgt.n	8006886 <_printf_i+0x216>
 80068a0:	e7eb      	b.n	800687a <_printf_i+0x20a>
 80068a2:	2500      	movs	r5, #0
 80068a4:	f104 0619 	add.w	r6, r4, #25
 80068a8:	e7f5      	b.n	8006896 <_printf_i+0x226>
 80068aa:	bf00      	nop
 80068ac:	08006d9a 	.word	0x08006d9a
 80068b0:	08006dab 	.word	0x08006dab

080068b4 <__swbuf_r>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	460e      	mov	r6, r1
 80068b8:	4614      	mov	r4, r2
 80068ba:	4605      	mov	r5, r0
 80068bc:	b118      	cbz	r0, 80068c6 <__swbuf_r+0x12>
 80068be:	6a03      	ldr	r3, [r0, #32]
 80068c0:	b90b      	cbnz	r3, 80068c6 <__swbuf_r+0x12>
 80068c2:	f7fe fce5 	bl	8005290 <__sinit>
 80068c6:	69a3      	ldr	r3, [r4, #24]
 80068c8:	60a3      	str	r3, [r4, #8]
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	071a      	lsls	r2, r3, #28
 80068ce:	d525      	bpl.n	800691c <__swbuf_r+0x68>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	b31b      	cbz	r3, 800691c <__swbuf_r+0x68>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	6922      	ldr	r2, [r4, #16]
 80068d8:	1a98      	subs	r0, r3, r2
 80068da:	6963      	ldr	r3, [r4, #20]
 80068dc:	b2f6      	uxtb	r6, r6
 80068de:	4283      	cmp	r3, r0
 80068e0:	4637      	mov	r7, r6
 80068e2:	dc04      	bgt.n	80068ee <__swbuf_r+0x3a>
 80068e4:	4621      	mov	r1, r4
 80068e6:	4628      	mov	r0, r5
 80068e8:	f7ff fb16 	bl	8005f18 <_fflush_r>
 80068ec:	b9e0      	cbnz	r0, 8006928 <__swbuf_r+0x74>
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	60a3      	str	r3, [r4, #8]
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	6022      	str	r2, [r4, #0]
 80068fa:	701e      	strb	r6, [r3, #0]
 80068fc:	6962      	ldr	r2, [r4, #20]
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	429a      	cmp	r2, r3
 8006902:	d004      	beq.n	800690e <__swbuf_r+0x5a>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	07db      	lsls	r3, r3, #31
 8006908:	d506      	bpl.n	8006918 <__swbuf_r+0x64>
 800690a:	2e0a      	cmp	r6, #10
 800690c:	d104      	bne.n	8006918 <__swbuf_r+0x64>
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f7ff fb01 	bl	8005f18 <_fflush_r>
 8006916:	b938      	cbnz	r0, 8006928 <__swbuf_r+0x74>
 8006918:	4638      	mov	r0, r7
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691c:	4621      	mov	r1, r4
 800691e:	4628      	mov	r0, r5
 8006920:	f000 f806 	bl	8006930 <__swsetup_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	d0d5      	beq.n	80068d4 <__swbuf_r+0x20>
 8006928:	f04f 37ff 	mov.w	r7, #4294967295
 800692c:	e7f4      	b.n	8006918 <__swbuf_r+0x64>
	...

08006930 <__swsetup_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <__swsetup_r+0xac>)
 8006934:	4605      	mov	r5, r0
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	460c      	mov	r4, r1
 800693a:	b118      	cbz	r0, 8006944 <__swsetup_r+0x14>
 800693c:	6a03      	ldr	r3, [r0, #32]
 800693e:	b90b      	cbnz	r3, 8006944 <__swsetup_r+0x14>
 8006940:	f7fe fca6 	bl	8005290 <__sinit>
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800694a:	0718      	lsls	r0, r3, #28
 800694c:	d422      	bmi.n	8006994 <__swsetup_r+0x64>
 800694e:	06d9      	lsls	r1, r3, #27
 8006950:	d407      	bmi.n	8006962 <__swsetup_r+0x32>
 8006952:	2309      	movs	r3, #9
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800695a:	81a3      	strh	r3, [r4, #12]
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	e034      	b.n	80069cc <__swsetup_r+0x9c>
 8006962:	0758      	lsls	r0, r3, #29
 8006964:	d512      	bpl.n	800698c <__swsetup_r+0x5c>
 8006966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006968:	b141      	cbz	r1, 800697c <__swsetup_r+0x4c>
 800696a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800696e:	4299      	cmp	r1, r3
 8006970:	d002      	beq.n	8006978 <__swsetup_r+0x48>
 8006972:	4628      	mov	r0, r5
 8006974:	f7fe fe2a 	bl	80055cc <_free_r>
 8006978:	2300      	movs	r3, #0
 800697a:	6363      	str	r3, [r4, #52]	; 0x34
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	2300      	movs	r3, #0
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f043 0308 	orr.w	r3, r3, #8
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	b94b      	cbnz	r3, 80069ac <__swsetup_r+0x7c>
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800699e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a2:	d003      	beq.n	80069ac <__swsetup_r+0x7c>
 80069a4:	4621      	mov	r1, r4
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 f88c 	bl	8006ac4 <__smakebuf_r>
 80069ac:	89a0      	ldrh	r0, [r4, #12]
 80069ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069b2:	f010 0301 	ands.w	r3, r0, #1
 80069b6:	d00a      	beq.n	80069ce <__swsetup_r+0x9e>
 80069b8:	2300      	movs	r3, #0
 80069ba:	60a3      	str	r3, [r4, #8]
 80069bc:	6963      	ldr	r3, [r4, #20]
 80069be:	425b      	negs	r3, r3
 80069c0:	61a3      	str	r3, [r4, #24]
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	b943      	cbnz	r3, 80069d8 <__swsetup_r+0xa8>
 80069c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069ca:	d1c4      	bne.n	8006956 <__swsetup_r+0x26>
 80069cc:	bd38      	pop	{r3, r4, r5, pc}
 80069ce:	0781      	lsls	r1, r0, #30
 80069d0:	bf58      	it	pl
 80069d2:	6963      	ldrpl	r3, [r4, #20]
 80069d4:	60a3      	str	r3, [r4, #8]
 80069d6:	e7f4      	b.n	80069c2 <__swsetup_r+0x92>
 80069d8:	2000      	movs	r0, #0
 80069da:	e7f7      	b.n	80069cc <__swsetup_r+0x9c>
 80069dc:	20000068 	.word	0x20000068

080069e0 <_raise_r>:
 80069e0:	291f      	cmp	r1, #31
 80069e2:	b538      	push	{r3, r4, r5, lr}
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	d904      	bls.n	80069f4 <_raise_r+0x14>
 80069ea:	2316      	movs	r3, #22
 80069ec:	6003      	str	r3, [r0, #0]
 80069ee:	f04f 30ff 	mov.w	r0, #4294967295
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80069f6:	b112      	cbz	r2, 80069fe <_raise_r+0x1e>
 80069f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069fc:	b94b      	cbnz	r3, 8006a12 <_raise_r+0x32>
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 f830 	bl	8006a64 <_getpid_r>
 8006a04:	462a      	mov	r2, r5
 8006a06:	4601      	mov	r1, r0
 8006a08:	4620      	mov	r0, r4
 8006a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a0e:	f000 b817 	b.w	8006a40 <_kill_r>
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d00a      	beq.n	8006a2c <_raise_r+0x4c>
 8006a16:	1c59      	adds	r1, r3, #1
 8006a18:	d103      	bne.n	8006a22 <_raise_r+0x42>
 8006a1a:	2316      	movs	r3, #22
 8006a1c:	6003      	str	r3, [r0, #0]
 8006a1e:	2001      	movs	r0, #1
 8006a20:	e7e7      	b.n	80069f2 <_raise_r+0x12>
 8006a22:	2400      	movs	r4, #0
 8006a24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a28:	4628      	mov	r0, r5
 8006a2a:	4798      	blx	r3
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e7e0      	b.n	80069f2 <_raise_r+0x12>

08006a30 <raise>:
 8006a30:	4b02      	ldr	r3, [pc, #8]	; (8006a3c <raise+0xc>)
 8006a32:	4601      	mov	r1, r0
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	f7ff bfd3 	b.w	80069e0 <_raise_r>
 8006a3a:	bf00      	nop
 8006a3c:	20000068 	.word	0x20000068

08006a40 <_kill_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d07      	ldr	r5, [pc, #28]	; (8006a60 <_kill_r+0x20>)
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	f7fb fa3f 	bl	8001ed0 <_kill>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	d102      	bne.n	8006a5c <_kill_r+0x1c>
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	b103      	cbz	r3, 8006a5c <_kill_r+0x1c>
 8006a5a:	6023      	str	r3, [r4, #0]
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
 8006a5e:	bf00      	nop
 8006a60:	200001d4 	.word	0x200001d4

08006a64 <_getpid_r>:
 8006a64:	f7fb ba2c 	b.w	8001ec0 <_getpid>

08006a68 <_malloc_usable_size_r>:
 8006a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a6c:	1f18      	subs	r0, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfbc      	itt	lt
 8006a72:	580b      	ldrlt	r3, [r1, r0]
 8006a74:	18c0      	addlt	r0, r0, r3
 8006a76:	4770      	bx	lr

08006a78 <__swhatbuf_r>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a80:	2900      	cmp	r1, #0
 8006a82:	b096      	sub	sp, #88	; 0x58
 8006a84:	4615      	mov	r5, r2
 8006a86:	461e      	mov	r6, r3
 8006a88:	da0d      	bge.n	8006aa6 <__swhatbuf_r+0x2e>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a90:	f04f 0100 	mov.w	r1, #0
 8006a94:	bf0c      	ite	eq
 8006a96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a9a:	2340      	movne	r3, #64	; 0x40
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	6031      	str	r1, [r6, #0]
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	b016      	add	sp, #88	; 0x58
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	466a      	mov	r2, sp
 8006aa8:	f000 f848 	bl	8006b3c <_fstat_r>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	dbec      	blt.n	8006a8a <__swhatbuf_r+0x12>
 8006ab0:	9901      	ldr	r1, [sp, #4]
 8006ab2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ab6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006aba:	4259      	negs	r1, r3
 8006abc:	4159      	adcs	r1, r3
 8006abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac2:	e7eb      	b.n	8006a9c <__swhatbuf_r+0x24>

08006ac4 <__smakebuf_r>:
 8006ac4:	898b      	ldrh	r3, [r1, #12]
 8006ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ac8:	079d      	lsls	r5, r3, #30
 8006aca:	4606      	mov	r6, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	d507      	bpl.n	8006ae0 <__smakebuf_r+0x1c>
 8006ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	2301      	movs	r3, #1
 8006ada:	6163      	str	r3, [r4, #20]
 8006adc:	b002      	add	sp, #8
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	ab01      	add	r3, sp, #4
 8006ae2:	466a      	mov	r2, sp
 8006ae4:	f7ff ffc8 	bl	8006a78 <__swhatbuf_r>
 8006ae8:	9900      	ldr	r1, [sp, #0]
 8006aea:	4605      	mov	r5, r0
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7fe fde1 	bl	80056b4 <_malloc_r>
 8006af2:	b948      	cbnz	r0, 8006b08 <__smakebuf_r+0x44>
 8006af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af8:	059a      	lsls	r2, r3, #22
 8006afa:	d4ef      	bmi.n	8006adc <__smakebuf_r+0x18>
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	e7e3      	b.n	8006ad0 <__smakebuf_r+0xc>
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	6020      	str	r0, [r4, #0]
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	6163      	str	r3, [r4, #20]
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	6120      	str	r0, [r4, #16]
 8006b1a:	b15b      	cbz	r3, 8006b34 <__smakebuf_r+0x70>
 8006b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 f81d 	bl	8006b60 <_isatty_r>
 8006b26:	b128      	cbz	r0, 8006b34 <__smakebuf_r+0x70>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	431d      	orrs	r5, r3
 8006b38:	81a5      	strh	r5, [r4, #12]
 8006b3a:	e7cf      	b.n	8006adc <__smakebuf_r+0x18>

08006b3c <_fstat_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d07      	ldr	r5, [pc, #28]	; (8006b5c <_fstat_r+0x20>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	f7fb fa20 	bl	8001f8e <_fstat>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	d102      	bne.n	8006b58 <_fstat_r+0x1c>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	b103      	cbz	r3, 8006b58 <_fstat_r+0x1c>
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
 8006b5a:	bf00      	nop
 8006b5c:	200001d4 	.word	0x200001d4

08006b60 <_isatty_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d06      	ldr	r5, [pc, #24]	; (8006b7c <_isatty_r+0x1c>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fb fa1f 	bl	8001fae <_isatty>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_isatty_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_isatty_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	200001d4 	.word	0x200001d4

08006b80 <_init>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	bf00      	nop
 8006b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b86:	bc08      	pop	{r3}
 8006b88:	469e      	mov	lr, r3
 8006b8a:	4770      	bx	lr

08006b8c <_fini>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr
